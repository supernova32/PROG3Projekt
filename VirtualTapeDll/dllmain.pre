# 1 "dllmain.cpp"
# 1 "/home/eternus/NetBeansProjects/VirtualTapeDll//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "dllmain.cpp"


# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/i386-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/i386-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/i386-linux-gnu/gnu/stubs.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/i386-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 212 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 3 4
typedef unsigned int size_t;
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 131 "/usr/include/i386-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/i386-linux-gnu/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 554 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 91 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 253 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 263 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 296 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 567 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 600 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 646 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 723 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 734 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 770 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 789 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 812 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/i386-linux-gnu/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 940 "/usr/include/stdio.h" 3 4
}
# 4 "dllmain.cpp" 2

# 1 "dllmain.h" 1
# 12 "dllmain.h"
extern "C" {


void createBucket(const char *mesg);



}
# 6 "dllmain.cpp" 2
# 1 "../../AmazonS3/eternusC.cpp" 1
# 13 "../../AmazonS3/eternusC.cpp"
# 1 "../../AmazonS3/eternusH.h" 1
# 10 "../../AmazonS3/eternusH.h"
# 1 "../../AmazonS3/eternusStub.h" 1
# 14 "../../AmazonS3/eternusStub.h"
# 1 "/usr/include/stdsoap2.h" 1 3 4
# 599 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/i386-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/byteswap.h" 1 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 236 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 237 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/i386-linux-gnu/sys/types.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 99 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 116 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 148 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/i386-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/select.h" 1 3 4
# 32 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/i386-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 31 "/usr/include/i386-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 97 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
extern "C" {
# 107 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
}
# 221 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 64 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 3 4
}
# 224 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/i386-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 36 "/usr/include/i386-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;


typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 600 "/usr/include/stdsoap2.h" 2 3 4


# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 165 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 603 "/usr/include/stdsoap2.h" 2 3 4

# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4
extern "C" {
# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const));
# 106 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 273 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 349 "/usr/include/ctype.h" 3 4
}
# 605 "/usr/include/stdsoap2.h" 2 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 169 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/local_lim.h" 1 3 4
# 39 "/usr/include/i386-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/i386-linux-gnu/bits/local_lim.h" 2 3 4
# 158 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 170 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 606 "/usr/include/stdsoap2.h" 2 3 4







# 1 "/usr/include/poll.h" 1 3 4
# 1 "/usr/include/i386-linux-gnu/sys/poll.h" 1 3 4
# 26 "/usr/include/i386-linux-gnu/sys/poll.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/poll.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/sys/poll.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/sigset.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/sys/poll.h" 2 3 4


# 1 "/usr/include/time.h" 1 3 4
# 33 "/usr/include/i386-linux-gnu/sys/poll.h" 2 3 4




typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };


extern "C" {
# 58 "/usr/include/i386-linux-gnu/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
# 67 "/usr/include/i386-linux-gnu/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    __const struct timespec *__timeout,
    __const __sigset_t *__ss);


}
# 1 "/usr/include/poll.h" 2 3 4
# 614 "/usr/include/stdsoap2.h" 2 3 4



# 1 "/usr/include/c++/4.6/string" 1 3 4
# 38 "/usr/include/c++/4.6/string" 3 4
       
# 39 "/usr/include/c++/4.6/string" 3

# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h" 1 3
# 153 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;




}
# 393 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h" 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/os_defines.h" 1 3
# 394 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/cpu_defines.h" 1 3
# 397 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++config.h" 2 3
# 41 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/stringfwd.h" 1 3
# 39 "/usr/include/c++/4.6/bits/stringfwd.h" 3
       
# 40 "/usr/include/c++/4.6/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 85 "/usr/include/c++/4.6/bits/stringfwd.h" 3

}
# 42 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/char_traits.h" 1 3
# 39 "/usr/include/c++/4.6/bits/char_traits.h" 3
       
# 40 "/usr/include/c++/4.6/bits/char_traits.h" 3

# 1 "/usr/include/c++/4.6/bits/stl_algobase.h" 1 3
# 61 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/4.6/bits/functexcept.h" 1 3
# 41 "/usr/include/c++/4.6/bits/functexcept.h" 3
# 1 "/usr/include/c++/4.6/bits/exception_defines.h" 1 3
# 42 "/usr/include/c++/4.6/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 422 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3

}
# 63 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/ext/type_traits.h" 1 3
# 33 "/usr/include/c++/4.6/ext/type_traits.h" 3
       
# 34 "/usr/include/c++/4.6/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/4.6/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_pair.h" 1 3
# 60 "/usr/include/c++/4.6/bits/stl_pair.h" 3
# 1 "/usr/include/c++/4.6/bits/move.h" 1 3
# 34 "/usr/include/c++/4.6/bits/move.h" 3
# 1 "/usr/include/c++/4.6/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/4.6/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/4.6/bits/concept_check.h" 3
# 35 "/usr/include/c++/4.6/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 109 "/usr/include/c++/4.6/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 120 "/usr/include/c++/4.6/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/usr/include/c++/4.6/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 86 "/usr/include/c++/4.6/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 196 "/usr/include/c++/4.6/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 270 "/usr/include/c++/4.6/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }



}
# 66 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
       
# 64 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 90 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 117 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 163 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
       
# 64 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 111 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 169 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 200 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3

}
# 68 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator.h" 1 3
# 68 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 96 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 395 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 422 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 445 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 512 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 535 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 623 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 649 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 699 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 69 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/4.6/debug/debug.h" 1 3
# 47 "/usr/include/c++/4.6/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;


     

     

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 319 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 357 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 494 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 522 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 552 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 669 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1008 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;


     
     
      ;
      ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 42 "/usr/include/c++/4.6/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/4.6/bits/postypes.h" 1 3
# 40 "/usr/include/c++/4.6/bits/postypes.h" 3
       
# 41 "/usr/include/c++/4.6/bits/postypes.h" 3

# 1 "/usr/include/c++/4.6/cwchar" 1 3
# 41 "/usr/include/c++/4.6/cwchar" 3
       
# 42 "/usr/include/c++/4.6/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 40 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/wchar.h" 1 3 4
# 43 "/usr/include/wchar.h" 2 3 4
# 52 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 353 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 129 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcspbrk (__const wchar_t *__wcs,
           __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsstr (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcswcs (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 303 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c,
           size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 402 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 527 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;
# 677 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 733 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 798 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 824 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 834 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 888 "/usr/include/wchar.h" 3 4
}
# 47 "/usr/include/c++/4.6/cwchar" 2 3
# 64 "/usr/include/c++/4.6/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 137 "/usr/include/c++/4.6/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/4.6/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 259 "/usr/include/c++/4.6/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 43 "/usr/include/c++/4.6/bits/postypes.h" 2 3
# 70 "/usr/include/c++/4.6/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 92 "/usr/include/c++/4.6/bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 113 "/usr/include/c++/4.6/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 135 "/usr/include/c++/4.6/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 241 "/usr/include/c++/4.6/bits/postypes.h" 3

}
# 43 "/usr/include/c++/4.6/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/4.6/cwchar" 1 3
# 41 "/usr/include/c++/4.6/cwchar" 3
       
# 42 "/usr/include/c++/4.6/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 47 "/usr/include/c++/4.6/cwchar" 2 3
# 44 "/usr/include/c++/4.6/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 59 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 84 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 228 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}
# 43 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/allocator.h" 1 3
# 48 "/usr/include/c++/4.6/bits/allocator.h" 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++allocator.h" 1 3
# 34 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++allocator.h" 3
# 1 "/usr/include/c++/4.6/ext/new_allocator.h" 1 3
# 34 "/usr/include/c++/4.6/ext/new_allocator.h" 3
# 1 "/usr/include/c++/4.6/new" 1 3
# 39 "/usr/include/c++/4.6/new" 3
       
# 40 "/usr/include/c++/4.6/new" 3


# 1 "/usr/include/c++/4.6/exception" 1 3
# 35 "/usr/include/c++/4.6/exception" 3
       
# 36 "/usr/include/c++/4.6/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 61 "/usr/include/c++/4.6/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 118 "/usr/include/c++/4.6/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 143 "/usr/include/c++/4.6/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 43 "/usr/include/c++/4.6/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 93 "/usr/include/c++/4.6/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/usr/include/c++/4.6/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/usr/include/c++/4.6/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 117 "/usr/include/c++/4.6/ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++allocator.h" 2 3
# 49 "/usr/include/c++/4.6/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 65 "/usr/include/c++/4.6/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/usr/include/c++/4.6/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 236 "/usr/include/c++/4.6/bits/allocator.h" 3

}
# 44 "/usr/include/c++/4.6/string" 2 3

# 1 "/usr/include/c++/4.6/bits/localefwd.h" 1 3
# 39 "/usr/include/c++/4.6/bits/localefwd.h" 3
       
# 40 "/usr/include/c++/4.6/bits/localefwd.h" 3


# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++locale.h" 1 3
# 40 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++locale.h" 3
       
# 41 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++locale.h" 3

# 1 "/usr/include/c++/4.6/clocale" 1 3
# 41 "/usr/include/c++/4.6/clocale" 3
       
# 42 "/usr/include/c++/4.6/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/locale.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, __const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 152 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, __const char *__locale,
        __locale_t __base) throw ();
# 187 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 45 "/usr/include/c++/4.6/clocale" 2 3
# 53 "/usr/include/c++/4.6/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 43 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 89 "/usr/include/c++/4.6/i686-linux-gnu/./bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 43 "/usr/include/c++/4.6/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/4.6/iosfwd" 1 3
# 38 "/usr/include/c++/4.6/iosfwd" 3
       
# 39 "/usr/include/c++/4.6/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/4.6/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 44 "/usr/include/c++/4.6/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/4.6/cctype" 1 3
# 41 "/usr/include/c++/4.6/cctype" 3
       
# 42 "/usr/include/c++/4.6/cctype" 3
# 64 "/usr/include/c++/4.6/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 45 "/usr/include/c++/4.6/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/4.6/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 46 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/4.6/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/4.6/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/4.6/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 47 "/usr/include/c++/4.6/string" 2 3



# 1 "/usr/include/c++/4.6/bits/stl_function.h" 1 3
# 60 "/usr/include/c++/4.6/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 101 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
# 508 "/usr/include/c++/4.6/bits/stl_function.h" 3
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/4.6/backward/binders.h" 1 3
# 60 "/usr/include/c++/4.6/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 99 "/usr/include/c++/4.6/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/usr/include/c++/4.6/bits/stl_function.h" 2 3
# 51 "/usr/include/c++/4.6/string" 2 3


# 1 "/usr/include/c++/4.6/bits/range_access.h" 1 3
# 33 "/usr/include/c++/4.6/bits/range_access.h" 3
       
# 34 "/usr/include/c++/4.6/bits/range_access.h" 3
# 54 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_string.h" 1 3
# 39 "/usr/include/c++/4.6/bits/basic_string.h" 3
       
# 40 "/usr/include/c++/4.6/bits/basic_string.h" 3

# 1 "/usr/include/c++/4.6/ext/atomicity.h" 1 3
# 34 "/usr/include/c++/4.6/ext/atomicity.h" 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr.h" 1 3
# 30 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr.h" 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 1 3
# 41 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 30 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 31 "/usr/include/sched.h" 2 3 4



# 1 "/usr/include/time.h" 1 3 4
# 35 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/sched.h" 1 3 4
# 74 "/usr/include/i386-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 120 "/usr/include/i386-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 203 "/usr/include/i386-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 26 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 86 "/usr/include/i386-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/timex.h" 1 3 4
# 24 "/usr/include/i386-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  long int offset;
  long int freq;
  long int maxerror;
  long int esterror;
  int status;
  long int constant;
  long int precision;
  long int tolerance;
  struct timeval time;
  long int tick;

  long int ppsfreq;
  long int jitter;
  int shift;
  long int stabil;
  long int jitcnt;
  long int calcnt;
  long int errcnt;
  long int stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/i386-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 27 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/setjmp.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 147 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 182 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 220 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, __const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 478 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 490 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 524 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 726 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        __const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 790 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 872 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 984 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1028 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1095 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1129 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1143 "/usr/include/pthread.h" 3 4
}
# 42 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/environments.h" 1 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 268 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 335 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 346 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 377 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 405 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 433 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 445 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 470 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 512 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/i386-linux-gnu/bits/confname.h" 1 3 4
# 26 "/usr/include/i386-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 611 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 647 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 673 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 690 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 894 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 895 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 980 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 1018 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1030 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1050 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1061 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1105 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1136 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__libc_block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1174 "/usr/include/unistd.h" 3 4
}
# 43 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &







 __gthrw_pthread_cancel;
  return __gthread_active_ptr != 0;
}
# 659 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 802 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/usr/include/c++/4.6/i686-linux-gnu/./bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/usr/include/c++/4.6/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/atomic_word.h" 1 3
# 32 "/usr/include/c++/4.6/i686-linux-gnu/./bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/usr/include/c++/4.6/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/usr/include/c++/4.6/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 42 "/usr/include/c++/4.6/bits/basic_string.h" 2 3

# 1 "/usr/include/c++/4.6/initializer_list" 1 3
# 33 "/usr/include/c++/4.6/initializer_list" 3
       
# 34 "/usr/include/c++/4.6/initializer_list" 3
# 44 "/usr/include/c++/4.6/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 143 "/usr/include/c++/4.6/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 168 "/usr/include/c++/4.6/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

       ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
    ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 478 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 526 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 559 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 599 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 705 "/usr/include/c++/4.6/bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 734 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 747 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 767 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 788 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 817 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 834 "/usr/include/c++/4.6/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 855 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 908 "/usr/include/c++/4.6/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 964 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 979 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 1011 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 1033 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1089 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1105 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1117 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1133 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1145 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1173 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1188 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1219 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1241 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1264 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1282 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1305 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1322 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1346 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1362 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1382 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1401 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1423 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1447 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1466 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1489 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1507 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1525 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1546 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1567 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1589 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                            ;
   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1664 "/usr/include/c++/4.6/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1745 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1755 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1765 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1797 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1810 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1824 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1841 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1854 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1869 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1882 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1899 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1912 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1927 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1940 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1959 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1973 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1988 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2001 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2020 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2034 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2049 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2063 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2080 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2093 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2109 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2122 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2139 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2154 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2172 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2202 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2226 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2244 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2267 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2292 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2304 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2425 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2471 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2508 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2545 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2582 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2619 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2656 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2673 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2691 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2714 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2732 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}
# 55 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/4.6/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 242 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {
      
                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 579 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 56 "/usr/include/c++/4.6/string" 2 3
# 618 "/usr/include/stdsoap2.h" 2 3 4
# 1 "/usr/include/c++/4.6/iostream" 1 3 4
# 37 "/usr/include/c++/4.6/iostream" 3 4
       
# 38 "/usr/include/c++/4.6/iostream" 3


# 1 "/usr/include/c++/4.6/ostream" 1 3
# 38 "/usr/include/c++/4.6/ostream" 3
       
# 39 "/usr/include/c++/4.6/ostream" 3

# 1 "/usr/include/c++/4.6/ios" 1 3
# 37 "/usr/include/c++/4.6/ios" 3
       
# 38 "/usr/include/c++/4.6/ios" 3





# 1 "/usr/include/c++/4.6/bits/ios_base.h" 1 3
# 39 "/usr/include/c++/4.6/bits/ios_base.h" 3
       
# 40 "/usr/include/c++/4.6/bits/ios_base.h" 3



# 1 "/usr/include/c++/4.6/bits/locale_classes.h" 1 3
# 39 "/usr/include/c++/4.6/bits/locale_classes.h" 3
       
# 40 "/usr/include/c++/4.6/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 100 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 119 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale() throw();
# 128 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 138 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 153 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 166 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 178 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 192 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 207 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 226 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 254 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 270 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 305 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 339 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 370 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 437 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 583 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 600 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 617 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 644 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 658 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 675 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 694 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 708 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 737 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 753 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 766 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/4.6/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/4.6/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/4.6/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 824 "/usr/include/c++/4.6/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/4.6/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 201 "/usr/include/c++/4.6/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 257 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 332 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 363 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 395 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 421 "/usr/include/c++/4.6/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 438 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 450 "/usr/include/c++/4.6/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 563 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 579 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 596 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 622 "/usr/include/c++/4.6/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 673 "/usr/include/c++/4.6/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 685 "/usr/include/c++/4.6/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 696 "/usr/include/c++/4.6/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 707 "/usr/include/c++/4.6/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 726 "/usr/include/c++/4.6/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 742 "/usr/include/c++/4.6/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 763 "/usr/include/c++/4.6/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 780 "/usr/include/c++/4.6/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 44 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/streambuf" 1 3
# 37 "/usr/include/c++/4.6/streambuf" 3
       
# 38 "/usr/include/c++/4.6/streambuf" 3
# 46 "/usr/include/c++/4.6/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 116 "/usr/include/c++/4.6/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 182 "/usr/include/c++/4.6/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 206 "/usr/include/c++/4.6/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 223 "/usr/include/c++/4.6/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 236 "/usr/include/c++/4.6/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 263 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 277 "/usr/include/c++/4.6/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 295 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 317 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 336 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 351 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 376 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 403 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 429 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 443 "/usr/include/c++/4.6/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 461 "/usr/include/c++/4.6/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 477 "/usr/include/c++/4.6/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 488 "/usr/include/c++/4.6/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 508 "/usr/include/c++/4.6/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 524 "/usr/include/c++/4.6/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 534 "/usr/include/c++/4.6/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 555 "/usr/include/c++/4.6/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 570 "/usr/include/c++/4.6/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 581 "/usr/include/c++/4.6/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 593 "/usr/include/c++/4.6/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 606 "/usr/include/c++/4.6/streambuf" 3
      virtual int
      sync() { return 0; }
# 628 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 644 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 666 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 679 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 703 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 721 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 747 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 762 "/usr/include/c++/4.6/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}

# 1 "/usr/include/c++/4.6/bits/streambuf.tcc" 1 3
# 38 "/usr/include/c++/4.6/bits/streambuf.tcc" 3
       
# 39 "/usr/include/c++/4.6/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 809 "/usr/include/c++/4.6/streambuf" 2 3
# 45 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_ios.h" 1 3
# 35 "/usr/include/c++/4.6/bits/basic_ios.h" 3
       
# 36 "/usr/include/c++/4.6/bits/basic_ios.h" 3



# 1 "/usr/include/c++/4.6/bits/locale_facets.h" 1 3
# 39 "/usr/include/c++/4.6/bits/locale_facets.h" 3
       
# 40 "/usr/include/c++/4.6/bits/locale_facets.h" 3

# 1 "/usr/include/c++/4.6/cwctype" 1 3
# 41 "/usr/include/c++/4.6/cwctype" 3
       
# 42 "/usr/include/c++/4.6/cwctype" 3
# 52 "/usr/include/c++/4.6/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 34 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 35 "/usr/include/wctype.h" 2 3 4
# 50 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 72 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 172 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (__const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef __const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 214 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (__const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (__const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (__const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 53 "/usr/include/c++/4.6/cwctype" 2 3
# 82 "/usr/include/c++/4.6/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 42 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.6/cctype" 1 3
# 41 "/usr/include/c++/4.6/cctype" 3
       
# 42 "/usr/include/c++/4.6/cctype" 3
# 43 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/ctype_base.h" 1 3
# 37 "/usr/include/c++/4.6/i686-linux-gnu/./bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 44 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 1 3
# 35 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3
       
# 36 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 51 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 51 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 144 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 162 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 179 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 195 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 211 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 225 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 240 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 254 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 269 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 286 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 305 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 324 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 346 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 371 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 390 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 409 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 428 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 446 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 463 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 479 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 496 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 515 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 536 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 558 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 582 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 605 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 674 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 711 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 724 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 737 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 752 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 766 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 780 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 795 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 812 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 828 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 845 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 865 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 892 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 923 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 956 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1005 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1022 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1038 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1055 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1075 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1098 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1124 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1150 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1175 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1208 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1219 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1243 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1262 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1280 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1298 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1315 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1332 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1348 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1365 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1385 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1407 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1430 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1456 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/c++/4.6/i686-linux-gnu/./bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/4.6/i686-linux-gnu/./bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1513 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1641 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1679 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1693 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1707 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1720 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1751 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1764 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1777 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1794 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1806 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1819 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1832 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1845 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1915 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1936 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1962 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1998 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2057 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2099 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2170 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2235 "/usr/include/c++/4.6/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2253 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2274 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2292 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2334 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2397 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2422 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2470 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/4.6/bits/locale_facets.tcc" 1 3
# 35 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
       
# 36 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 138 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 732 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 968 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1029 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1154 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1191 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2609 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/4.6/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 63 "/usr/include/c++/4.6/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 128 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 139 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 192 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 213 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 248 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 286 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 298 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 338 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 352 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 381 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 401 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 421 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 440 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/4.6/bits/basic_ios.tcc" 1 3
# 34 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3
       
# 35 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 147 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 474 "/usr/include/c++/4.6/bits/basic_ios.h" 2 3
# 46 "/usr/include/c++/4.6/ios" 2 3
# 41 "/usr/include/c++/4.6/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/4.6/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 109 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 166 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 251 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 284 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 312 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 325 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      flush();
# 336 "/usr/include/c++/4.6/ostream" 3
      pos_type
      tellp();
# 347 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 359 "/usr/include/c++/4.6/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 378 "/usr/include/c++/4.6/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 397 "/usr/include/c++/4.6/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 407 "/usr/include/c++/4.6/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 428 "/usr/include/c++/4.6/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 449 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 491 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 541 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 585 "/usr/include/c++/4.6/ostream" 3

}

# 1 "/usr/include/c++/4.6/bits/ostream.tcc" 1 3
# 39 "/usr/include/c++/4.6/bits/ostream.tcc" 3
       
# 40 "/usr/include/c++/4.6/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 589 "/usr/include/c++/4.6/ostream" 2 3
# 41 "/usr/include/c++/4.6/iostream" 2 3
# 1 "/usr/include/c++/4.6/istream" 1 3
# 38 "/usr/include/c++/4.6/istream" 3
       
# 39 "/usr/include/c++/4.6/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 92 "/usr/include/c++/4.6/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 121 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 168 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 240 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 250 "/usr/include/c++/4.6/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 282 "/usr/include/c++/4.6/istream" 3
      int_type
      get();
# 296 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type& __c);
# 323 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 334 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 357 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 367 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 396 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 407 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 431 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 448 "/usr/include/c++/4.6/istream" 3
      int_type
      peek();
# 466 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 485 "/usr/include/c++/4.6/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 502 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      putback(char_type __c);
# 518 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      unget();
# 536 "/usr/include/c++/4.6/istream" 3
      int
      sync();
# 551 "/usr/include/c++/4.6/istream" 3
      pos_type
      tellg();
# 566 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      seekg(pos_type);
# 582 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 637 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 673 "/usr/include/c++/4.6/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 686 "/usr/include/c++/4.6/istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 703 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 745 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 773 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 834 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 856 "/usr/include/c++/4.6/istream" 3

}

# 1 "/usr/include/c++/4.6/bits/istream.tcc" 1 3
# 39 "/usr/include/c++/4.6/bits/istream.tcc" 3
       
# 40 "/usr/include/c++/4.6/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 515 "/usr/include/c++/4.6/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 860 "/usr/include/c++/4.6/istream" 2 3
# 42 "/usr/include/c++/4.6/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/4.6/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 619 "/usr/include/stdsoap2.h" 2 3 4
# 636 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4
extern "C" {



# 1 "/usr/include/i386-linux-gnu/bits/errno.h" 1 3 4
# 25 "/usr/include/i386-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/i386-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/i386-linux-gnu/bits/errno.h" 2 3 4
# 47 "/usr/include/i386-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 637 "/usr/include/stdsoap2.h" 2 3 4




# 1 "/usr/include/i386-linux-gnu/sys/timeb.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/sys/timeb.h" 3 4
extern "C" {



struct timeb
  {
    time_t time;
    unsigned short int millitm;
    short int timezone;
    short int dstflag;
  };



extern int ftime (struct timeb *__timebuf);

}
# 642 "/usr/include/stdsoap2.h" 2 3 4
# 658 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/i386-linux-gnu/sys/socket.h" 1 3 4
# 26 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern "C" {

# 1 "/usr/include/i386-linux-gnu/sys/uio.h" 1 3 4
# 26 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern "C" {


# 1 "/usr/include/i386-linux-gnu/bits/uio.h" 1 3 4
# 44 "/usr/include/i386-linux-gnu/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };






extern "C" {


extern ssize_t process_vm_readv (pid_t __pid, __const struct iovec *__lvec,
     unsigned long int __liovcnt,
     __const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  throw ();


extern ssize_t process_vm_writev (pid_t __pid, __const struct iovec *__lvec,
      unsigned long int __liovcnt,
      __const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  throw ();

}
# 30 "/usr/include/i386-linux-gnu/sys/uio.h" 2 3 4
# 40 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 51 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 66 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, __const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 78 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, __const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 104 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, __const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 116 "/usr/include/i386-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, __const struct iovec *__iovec, int __count,
     __off64_t __offset) ;



}
# 29 "/usr/include/i386-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 31 "/usr/include/i386-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/sigset.h" 1 3 4
# 34 "/usr/include/i386-linux-gnu/sys/socket.h" 2 3 4






# 1 "/usr/include/i386-linux-gnu/bits/socket.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/bits/socket.h" 2 3 4
# 40 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 04000


};
# 177 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/sockaddr.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 178 "/usr/include/i386-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 193 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    unsigned long int __ss_align;
    char __ss_padding[(128 - (2 * sizeof (unsigned long int)))];
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };



struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;
  };



struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 310 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) throw ();
# 337 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 383 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/i386-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/i386-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/i386-linux-gnu/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/asm/socket.h" 2 3 4
# 384 "/usr/include/i386-linux-gnu/bits/socket.h" 2 3 4
# 417 "/usr/include/i386-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };


extern "C" {






extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       __const struct timespec *__tmo);





extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);

}
# 41 "/usr/include/i386-linux-gnu/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 105 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern int socket (int __domain, int __type, int __protocol) throw ();





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) throw ();


extern int bind (int __fd, __const struct sockaddr * __addr, socklen_t __len)
     throw ();


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();
# 129 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, __const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();






extern ssize_t send (int __fd, __const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, __const void *__buf, size_t __n,
         int __flags, __const struct sockaddr * __addr,
         socklen_t __addr_len);
# 166 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, __const struct msghdr *__message,
   int __flags);






extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);





extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) throw ();




extern int setsockopt (int __fd, int __level, int __optname,
         __const void *__optval, socklen_t __optlen) throw ();





extern int listen (int __fd, int __n) throw ();
# 214 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 232 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) throw ();




extern int sockatmark (int __fd) throw ();







extern int isfdtype (int __fd, int __fdtype) throw ();
# 254 "/usr/include/i386-linux-gnu/sys/socket.h" 3 4
}
# 659 "/usr/include/stdsoap2.h" 2 3 4
# 667 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/strings.h" 1 3 4
# 668 "/usr/include/stdsoap2.h" 2 3 4
# 679 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/i386-linux-gnu/sys/time.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/sys/time.h" 2 3 4
# 39 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
extern "C" {
# 57 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     throw () __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) throw ();
# 191 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
}
# 680 "/usr/include/stdsoap2.h" 2 3 4

# 1 "/usr/include/netinet/in.h" 1 3 4
# 24 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdint.h" 1 3 4


# 1 "/usr/include/stdint.h" 1 3 4
# 28 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 129 "/usr/include/stdint.h" 3 4
typedef unsigned int uintptr_t;
# 138 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 4 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdint.h" 2 3 4
# 25 "/usr/include/netinet/in.h" 2 3 4




extern "C" {


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_HOPOPTS = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MTP = 92,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
# 198 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };

extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 225 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };


struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 356 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/in.h" 1 3 4
# 99 "/usr/include/i386-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 357 "/usr/include/netinet/in.h" 2 3 4
# 365 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) throw () __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     throw () __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     throw () __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     throw () __attribute__ ((__const__));




# 1 "/usr/include/i386-linux-gnu/bits/byteswap.h" 1 3 4
# 377 "/usr/include/netinet/in.h" 2 3 4
# 492 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) throw ();


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     throw ();
# 523 "/usr/include/netinet/in.h" 3 4
struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) throw () __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    __const uint8_t *__typep, int __multx,
    int __plusy) throw () __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_next (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_find (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     throw () __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) throw ();
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) throw ();
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     throw ();
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();



extern socklen_t inet6_rth_space (int __type, int __segments) throw ();
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) throw ();
extern int inet6_rth_add (void *__bp, __const struct in6_addr *__addr) throw ();
extern int inet6_rth_reverse (__const void *__in, void *__out) throw ();
extern int inet6_rth_segments (__const void *__bp) throw ();
extern struct in6_addr *inet6_rth_getaddr (__const void *__bp, int __index)
     throw ();





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     throw ();


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    __const struct in_addr *__slist)
     throw ();



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) throw ();


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       __const struct sockaddr_storage *__slist) throw ();


}
# 682 "/usr/include/stdsoap2.h" 2 3 4



# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 92 "/usr/include/netinet/tcp.h" 3 4
struct tcphdr
  {
    u_int16_t source;
    u_int16_t dest;
    u_int32_t seq;
    u_int32_t ack_seq;

    u_int16_t res1:4;
    u_int16_t doff:4;
    u_int16_t fin:1;
    u_int16_t syn:1;
    u_int16_t rst:1;
    u_int16_t psh:1;
    u_int16_t ack:1;
    u_int16_t urg:1;
    u_int16_t res2:2;
# 121 "/usr/include/netinet/tcp.h" 3 4
    u_int16_t window;
    u_int16_t check;
    u_int16_t urg_ptr;
};


enum
{
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING
};
# 179 "/usr/include/netinet/tcp.h" 3 4
enum tcp_ca_state
{
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4
};

struct tcp_info
{
  u_int8_t tcpi_state;
  u_int8_t tcpi_ca_state;
  u_int8_t tcpi_retransmits;
  u_int8_t tcpi_probes;
  u_int8_t tcpi_backoff;
  u_int8_t tcpi_options;
  u_int8_t tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

  u_int32_t tcpi_rto;
  u_int32_t tcpi_ato;
  u_int32_t tcpi_snd_mss;
  u_int32_t tcpi_rcv_mss;

  u_int32_t tcpi_unacked;
  u_int32_t tcpi_sacked;
  u_int32_t tcpi_lost;
  u_int32_t tcpi_retrans;
  u_int32_t tcpi_fackets;


  u_int32_t tcpi_last_data_sent;
  u_int32_t tcpi_last_ack_sent;
  u_int32_t tcpi_last_data_recv;
  u_int32_t tcpi_last_ack_recv;


  u_int32_t tcpi_pmtu;
  u_int32_t tcpi_rcv_ssthresh;
  u_int32_t tcpi_rtt;
  u_int32_t tcpi_rttvar;
  u_int32_t tcpi_snd_ssthresh;
  u_int32_t tcpi_snd_cwnd;
  u_int32_t tcpi_advmss;
  u_int32_t tcpi_reordering;

  u_int32_t tcpi_rcv_rtt;
  u_int32_t tcpi_rcv_space;

  u_int32_t tcpi_total_retrans;
};





struct tcp_md5sig
{
  struct sockaddr_storage tcpm_addr;
  u_int16_t __tcpm_pad1;
  u_int16_t tcpm_keylen;
  u_int32_t __tcpm_pad2;
  u_int8_t tcpm_key[80];
};
# 686 "/usr/include/stdsoap2.h" 2 3 4

# 1 "/usr/include/arpa/inet.h" 1 3 4
# 31 "/usr/include/arpa/inet.h" 3 4
extern "C" {



extern in_addr_t inet_addr (__const char *__cp) throw ();


extern in_addr_t inet_lnaof (struct in_addr __in) throw ();



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     throw ();


extern in_addr_t inet_netof (struct in_addr __in) throw ();



extern in_addr_t inet_network (__const char *__cp) throw ();



extern char *inet_ntoa (struct in_addr __in) throw ();




extern int inet_pton (int __af, __const char *__restrict __cp,
        void *__restrict __buf) throw ();




extern __const char *inet_ntop (int __af, __const void *__restrict __cp,
    char *__restrict __buf, socklen_t __len)
     throw ();






extern int inet_aton (__const char *__cp, struct in_addr *__inp) throw ();



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) throw ();




extern char *inet_net_ntop (int __af, __const void *__cp, int __bits,
       char *__buf, size_t __len) throw ();




extern int inet_net_pton (int __af, __const char *__cp,
     void *__buf, size_t __len) throw ();




extern unsigned int inet_nsap_addr (__const char *__cp,
        unsigned char *__buf, int __len) throw ();



extern char *inet_nsap_ntoa (int __len, __const unsigned char *__cp,
        char *__buf) throw ();


}
# 688 "/usr/include/stdsoap2.h" 2 3 4
# 725 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/netdb.h" 1 3 4
# 33 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4

extern "C" {

struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) throw ();
extern void endrpcent (void) throw ();
extern struct rpcent *getrpcbyname (__const char *__name) throw ();
extern struct rpcent *getrpcbynumber (int __number) throw ();
extern struct rpcent *getrpcent (void) throw ();


extern int getrpcbyname_r (__const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) throw ();

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) throw ();

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) throw ();


}
# 34 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/i386-linux-gnu/bits/siginfo.h" 1 3 4
# 25 "/usr/include/i386-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 26 "/usr/include/i386-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 273 "/usr/include/i386-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 39 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/i386-linux-gnu/bits/netdb.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 44 "/usr/include/netdb.h" 2 3 4
# 54 "/usr/include/netdb.h" 3 4
extern "C" {







extern int *__h_errno_location (void) throw () __attribute__ ((__const__));
# 93 "/usr/include/netdb.h" 3 4
extern void herror (__const char *__str) throw ();


extern __const char *hstrerror (int __err_num) throw ();




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (__const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (__const char *__name);
# 156 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (__const char *__name, int __af);
# 168 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (__const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (__const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (__const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 199 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (__const char *__name);
# 238 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (__const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (__const char *__name,
          __const char *__proto);






extern struct servent *getservbyport (int __port, __const char *__proto);
# 310 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (__const char *__restrict __name,
       __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (__const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 376 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (__const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 397 "/usr/include/netdb.h" 3 4
extern int setnetgrent (__const char *__netgroup);







extern void endnetgrent (void);
# 414 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 425 "/usr/include/netdb.h" 3 4
extern int innetgr (__const char *__netgroup, __const char *__host,
      __const char *__user, __const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 453 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   __const char *__restrict __locuser,
   __const char *__restrict __remuser,
   __const char *__restrict __cmd, int *__restrict __fd2p);
# 465 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      __const char *__restrict __locuser,
      __const char *__restrict __remuser,
      __const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 481 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    __const char *__restrict __name,
    __const char *__restrict __pass,
    __const char *__restrict __cmd, int *__restrict __fd2p);
# 493 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       __const char *__restrict __name,
       __const char *__restrict __pass,
       __const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 507 "/usr/include/netdb.h" 3 4
extern int ruserok (__const char *__rhost, int __suser,
      __const char *__remuser, __const char *__locuser);
# 517 "/usr/include/netdb.h" 3 4
extern int ruserok_af (__const char *__rhost, int __suser,
         __const char *__remuser, __const char *__locuser,
         sa_family_t __af);
# 530 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       __const char *__remuser, __const char *__locuser);
# 541 "/usr/include/netdb.h" 3 4
extern int iruserok_af (__const void *__raddr, int __suser,
   __const char *__remuser, __const char *__locuser,
   sa_family_t __af);
# 553 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 562 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __unused[5];
};
# 664 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (__const char *__restrict __name,
   __const char *__restrict __service,
   __const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) throw ();


extern __const char *gai_strerror (int __ecode) throw ();





extern int getnameinfo (__const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 694 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[],
     int __ent, struct sigevent *__restrict __sig);
# 705 "/usr/include/netdb.h" 3 4
extern int gai_suspend (__const struct gaicb *__const __list[], int __ent,
   __const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) throw ();


extern int gai_cancel (struct gaicb *__gaicbp) throw ();


}
# 726 "/usr/include/stdsoap2.h" 2 3 4


# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4
extern "C" {



# 1 "/usr/include/i386-linux-gnu/bits/fcntl.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/bits/fcntl.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/uio.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/bits/fcntl.h" 2 3 4
# 153 "/usr/include/i386-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };




enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 239 "/usr/include/i386-linux-gnu/bits/fcntl.h" 3 4
struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 266 "/usr/include/i386-linux-gnu/bits/fcntl.h" 3 4
extern "C" {




extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();



extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);





extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);





extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 318 "/usr/include/i386-linux-gnu/bits/fcntl.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 35 "/usr/include/fcntl.h" 2 3 4






# 1 "/usr/include/i386-linux-gnu/bits/stat.h" 1 3 4
# 39 "/usr/include/i386-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;
    unsigned short int __pad1;

    __ino_t st_ino;



    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned short int __pad2;

    __off_t st_size;



    __blksize_t st_blksize;


    __blkcnt_t st_blocks;
# 73 "/usr/include/i386-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 88 "/usr/include/i386-linux-gnu/bits/stat.h" 3 4
    unsigned long int __unused4;
    unsigned long int __unused5;



  };


struct stat64
  {
    __dev_t st_dev;
    unsigned int __pad1;

    __ino_t __st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned int __pad2;
    __off64_t st_size;
    __blksize_t st_blksize;

    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 130 "/usr/include/i386-linux-gnu/bits/stat.h" 3 4
    __ino64_t st_ino;
  };
# 42 "/usr/include/fcntl.h" 2 3 4
# 110 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 119 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 129 "/usr/include/fcntl.h" 3 4
extern int open64 (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 143 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 154 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 165 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 175 "/usr/include/fcntl.h" 3 4
extern int creat64 (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 211 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) throw ();
# 223 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, __off64_t __offset, __off64_t __len,
       int __advise) throw ();
# 233 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 244 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, __off64_t __offset, __off64_t __len);
# 255 "/usr/include/fcntl.h" 3 4
}
# 729 "/usr/include/stdsoap2.h" 2 3 4
# 791 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/i386-linux-gnu/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/mathdef.h" 1 3 4
# 36 "/usr/include/i386-linux-gnu/bits/mathdef.h" 3 4
typedef long double float_t;

typedef long double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void
 sincosf
# 82 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw (); extern void
 __sincosf
# 82 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 146 "/usr/include/math.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void
 sincosl
# 82 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw (); extern void
 __sincosl
# 82 "/usr/include/i386-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 147 "/usr/include/math.h" 2 3 4
# 162 "/usr/include/math.h" 3 4
extern int signgam;
# 203 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 296 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 319 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 483 "/usr/include/math.h" 3 4
}
# 792 "/usr/include/stdsoap2.h" 2 3 4






extern "C" {
# 858 "/usr/include/stdsoap2.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 859 "/usr/include/stdsoap2.h" 2 3 4
# 1080 "/usr/include/stdsoap2.h" 3 4
union soap_double_nan {struct {unsigned int n1, n2;} iv; double dv; float fv;};
extern const union soap_double_nan soap_double_nan;
extern const char soap_base64o[], soap_base64i[];
# 1255 "/usr/include/stdsoap2.h" 3 4
typedef int32_t soap_mode;
# 1461 "/usr/include/stdsoap2.h" 3 4
typedef int32_t soap_wchar;


struct Namespace
{ const char *id;
  const char *ns;
  const char *in;
  char *out;
};


struct soap_nlist
{ struct soap_nlist *next;
  unsigned int level;
  short index;
  const char *ns;
  char id[1];
};


struct soap_blist
{ struct soap_blist *next;
  char *ptr;
  size_t size;
};


struct soap_array
{ void *__ptr;
  int __size;
};


struct soap_plist
{ struct soap_plist *next;
  const void *ptr;
  const struct soap_array *array;
  int type;
  int id;
  char mark1;
  char mark2;
};


struct soap_pblk
{ struct soap_pblk *next;
  struct soap_plist plist[(32)];
};
# 1522 "/usr/include/stdsoap2.h" 3 4
struct soap_clist
{ struct soap_clist *next;
  void *ptr;
  int type;
  int size;
  int (*fdelete)(struct soap_clist*);
};


struct soap_attribute
{ struct soap_attribute *next;
  short flag;
  char *value;
  size_t size;
  const char *ns;
  short visible;
  char name[1];
};


struct soap_cookie
{ struct soap_cookie *next;
  char *name;
  char *value;
  char *domain;
  char *path;
  time_t expire;
  long maxage;
  unsigned int version;
  short secure;
  short session;
  short env;
  short modified;
};


 struct soap_multipart* soap_next_multipart(struct soap_multipart*);



class soap_multipart_iterator
{ public:
  struct soap_multipart *content;
  bool operator==(const soap_multipart_iterator& iter) const
    { return (bool)(content == iter.content); }
  bool operator!=(const soap_multipart_iterator& iter) const
    { return (bool)(content != iter.content); }
  struct soap_multipart &operator*() const
    { return *content; }
  soap_multipart_iterator &operator++()
    { content = soap_next_multipart(content); return *this; }
  soap_multipart_iterator() : content(__null)
    { }
  soap_multipart_iterator(struct soap_multipart *p) : content(p)
    { }
};



struct soap_dime
{ size_t count;
  size_t size;
  size_t chunksize;
  size_t buflen;
  char flags;
  char *ptr;
  const char *id;
  const char *type;
  const char *options;
  struct soap_multipart *list;
  struct soap_multipart *first, *last;

  soap_multipart_iterator begin()
    { soap_multipart_iterator iter(list); return iter; };
  soap_multipart_iterator end()
    { soap_multipart_iterator iter(__null); return iter; };

};



struct soap_mime
{ char *boundary;
  const char *start;
  struct soap_multipart *list;
  struct soap_multipart *first, *last;

  soap_multipart_iterator begin()
    { soap_multipart_iterator iter(list); return iter; };
  soap_multipart_iterator end()
    { soap_multipart_iterator iter(__null); return iter; };

};




enum soap_mime_encoding
{ SOAP_MIME_NONE,
  SOAP_MIME_7BIT,
  SOAP_MIME_8BIT,
  SOAP_MIME_BINARY,
  SOAP_MIME_QUOTED_PRINTABLE,
  SOAP_MIME_BASE64,
  SOAP_MIME_IETF_TOKEN,
  SOAP_MIME_X_TOKEN
};




struct soap_multipart
{ struct soap_multipart *next;
  char *ptr;
  size_t size;
  const char *id;
  const char *type;
  const char *options;
  enum soap_mime_encoding encoding;
  const char *location;
  const char *description;

  typedef soap_multipart_iterator iterator;

};




struct soap_xlist
{ struct soap_xlist *next;
  unsigned char **ptr;
  int *size;
  char *id;
  char **type;
  char **options;
};






class soap_dom_attribute_iterator
{ public:
  struct soap_dom_attribute *att;
  const char *nstr;
  const char *name;
  bool operator==(const soap_dom_attribute_iterator&) const;
  bool operator!=(const soap_dom_attribute_iterator&) const;
  struct soap_dom_attribute &operator*() const;
  soap_dom_attribute_iterator &operator++();
  soap_dom_attribute_iterator();
  soap_dom_attribute_iterator(struct soap_dom_attribute*);
  ~soap_dom_attribute_iterator();
};




struct soap_dom_attribute
{ struct soap_dom_attribute *next;
  const char *nstr;
  char *name;
  char *data;
  wchar_t *wide;
  struct soap *soap;

  typedef soap_dom_attribute_iterator iterator;
  struct soap_dom_attribute &set(const char *nstr, const char *name);
  struct soap_dom_attribute &set(const char *data);
  soap_dom_attribute_iterator begin();
  soap_dom_attribute_iterator end();
  soap_dom_attribute_iterator find(const char *nstr, const char *name);
  void unlink();
  soap_dom_attribute();
  soap_dom_attribute(struct soap *soap);
  soap_dom_attribute(struct soap *soap, const char *nstr, const char *name, const char *data);
  ~soap_dom_attribute();

};




class soap_dom_element_iterator
{ public:
  struct soap_dom_element *elt;
  const char *nstr;
  const char *name;
  int type;
  bool operator==(const soap_dom_element_iterator&) const;
  bool operator!=(const soap_dom_element_iterator&) const;
  struct soap_dom_element &operator*() const;
  soap_dom_element_iterator &operator++();
  soap_dom_element_iterator();
  soap_dom_element_iterator(struct soap_dom_element*);
  ~soap_dom_element_iterator();
};




struct soap_dom_element
{ struct soap_dom_element *next;
  struct soap_dom_element *prnt;
  struct soap_dom_element *elts;
  struct soap_dom_attribute *atts;
  const char *nstr;
  char *name;
  char *data;
  wchar_t *wide;
  int type;
  void *node;
  char *head;
  char *tail;
  struct soap *soap;

  typedef soap_dom_element_iterator iterator;
  struct soap_dom_element &set(const char *nstr, const char *name);
  struct soap_dom_element &set(const char *data);
  struct soap_dom_element &set(void *node, int type);
  struct soap_dom_element &add(struct soap_dom_element*);
  struct soap_dom_element &add(struct soap_dom_element&);
  struct soap_dom_element &add(struct soap_dom_attribute*);
  struct soap_dom_element &add(struct soap_dom_attribute&);
  soap_dom_element_iterator begin();
  soap_dom_element_iterator end();
  soap_dom_element_iterator find(const char *nstr, const char *name);
  soap_dom_element_iterator find(int type);
  void unlink();
  soap_dom_element();
  soap_dom_element(struct soap *soap);
  soap_dom_element(struct soap *soap, const char *nstr, const char *name);
  soap_dom_element(struct soap *soap, const char *nstr, const char *name, const char *data);
  soap_dom_element(struct soap *soap, const char *nstr, const char *name, void *node, int type);
  ~soap_dom_element();

};
 struct soap_dom_element * soap_dom_next_element(struct soap_dom_element *elt);
 struct soap_dom_attribute * soap_dom_next_attribute(struct soap_dom_attribute *att);



}
extern std::ostream &operator<<(std::ostream&, const struct soap_dom_element&);
extern std::istream &operator>>(std::istream&, struct soap_dom_element&);
extern "C" {
# 1784 "/usr/include/stdsoap2.h" 3 4
struct soap
{ short state;
  short version;
  soap_mode mode;
  soap_mode imode;
  soap_mode omode;
  const char *float_format;
  const char *double_format;
  const char *dime_id_format;
  const char *http_version;
  const char *http_content;
  const char *encodingStyle;
  const char *actor;
  const char *lang;
  int recv_timeout;
  int send_timeout;
  int connect_timeout;
  int accept_timeout;
  int socket_flags;
  int connect_flags;
  int bind_flags;
  int accept_flags;
  unsigned short linger_time;
  const struct Namespace *namespaces;
  struct Namespace *local_namespaces;
  struct soap_nlist *nlist;
  struct soap_blist *blist;
  struct soap_clist *clist;
  void *alist;
  struct soap_ilist *iht[(1999)];
  struct soap_plist *pht[(4096)];
  struct soap_pblk *pblk;
  short pidx;
  struct SOAP_ENV__Header *header;
  struct SOAP_ENV__Fault *fault;
  int idnum;
  void *user;
  void *data[4];
  struct soap_plugin *plugins;
  const char *userid;
  const char *passwd;
  const char *authrealm;

  const char *ntlm_challenge;
  short ntlm_auth;
  short ntlm_stage;

  int (*fpost)(struct soap*, const char*, const char*, int, const char*, const char*, size_t);
  int (*fget)(struct soap*);
  int (*fput)(struct soap*);
  int (*fdel)(struct soap*);
  int (*fopt)(struct soap*);
  int (*fhead)(struct soap*);
  int (*fform)(struct soap*);
  int (*fposthdr)(struct soap*, const char*, const char*);
  int (*fresponse)(struct soap*, int, size_t);
  int (*fparse)(struct soap*);
  int (*fparsehdr)(struct soap*, const char*, const char*);
  int (*fheader)(struct soap*);
  int (*fresolve)(struct soap*, const char*, struct in_addr* inaddr);
  int (*fconnect)(struct soap*, const char*, const char*, int);
  int (*fdisconnect)(struct soap*);
  int (*fclosesocket)(struct soap*, int);
  int (*fshutdownsocket)(struct soap*, int, int);
  int (*fopen)(struct soap*, const char*, const char*, int);
  int (*faccept)(struct soap*, int, struct sockaddr*, int *n);
  int (*fclose)(struct soap*);
  int (*fsend)(struct soap*, const char*, size_t);
  size_t (*frecv)(struct soap*, char*, size_t);
  int (*fpoll)(struct soap*);
  void (*fseterror)(struct soap*, const char **c, const char **s);
  int (*fignore)(struct soap*, const char*);
  int (*fserveloop)(struct soap*);
  void *(*fplugin)(struct soap*, const char*);
  void *(*fmalloc)(struct soap*, size_t);

  int (*feltbegin)(struct soap*, const char*);
  int (*feltendin)(struct soap*, const char*, const char*);
  int (*feltbegout)(struct soap*, const char*);
  int (*feltendout)(struct soap*, const char*);
  int (*fprepareinitsend)(struct soap*);
  int (*fprepareinitrecv)(struct soap*);
  int (*fpreparesend)(struct soap*, const char*, size_t);
  int (*fpreparerecv)(struct soap*, const char*, size_t);
  int (*fpreparefinalsend)(struct soap*);
  int (*fpreparefinalrecv)(struct soap*);
  int filterstop;
  int (*ffiltersend)(struct soap*, const char**, size_t*);
  int (*ffilterrecv)(struct soap*, char*, size_t*, size_t);
  void *(*fdimereadopen)(struct soap*, void*, const char*, const char*, const char*);
  void *(*fdimewriteopen)(struct soap*, const char*, const char*, const char*);
  void (*fdimereadclose)(struct soap*, void*);
  void (*fdimewriteclose)(struct soap*, void*);
  size_t (*fdimeread)(struct soap*, void*, char*, size_t);
  int (*fdimewrite)(struct soap*, void*, const char*, size_t);
  void *(*fmimereadopen)(struct soap*, void*, const char*, const char*, const char*);
  void *(*fmimewriteopen)(struct soap*, void*, const char*, const char*, const char*, enum soap_mime_encoding);
  void (*fmimereadclose)(struct soap*, void*);
  void (*fmimewriteclose)(struct soap*, void*);
  size_t (*fmimeread)(struct soap*, void*, char*, size_t);
  int (*fmimewrite)(struct soap*, void*, const char*, size_t);

  int master;
  int socket;

  std::ostream *os;
  std::istream *is;





  int sendfd;
  int recvfd;




  size_t bufidx;
  size_t buflen;
  soap_wchar ahead;
  short cdata;
  short body;
  unsigned int level;
  size_t count;
  size_t length;
  char *labbuf;
  size_t lablen;
  size_t labidx;
  char buf[(65536)];
  char msgbuf[1024];
  char tmpbuf[1024];
  char tag[(1024)];
  char id[(1024)];
  char href[(1024)];
  char type[(1024)];
  char arrayType[(1024)];
  char arraySize[(1024)];
  char arrayOffset[(1024)];
  short other;
  short position;
  int positions[(16)];
  short root;
  struct soap_attribute *attributes;
  short encoding;
  short mustUnderstand;
  short null;
  short ns;
  short part;
  short event;
  short alloced;
  short peeked;
  size_t chunksize;
  size_t chunkbuflen;
  char endpoint[(1024)];
  char path[(1024)];
  char host[(1024)];
  char *action;
  char *prolog;
  unsigned long ip;
  int port;
  short keep_alive;
  short tcp_keep_alive;
  unsigned int tcp_keep_idle;
  unsigned int tcp_keep_intvl;
  unsigned int tcp_keep_cnt;
  unsigned int max_keep_alive;
  const char *proxy_http_version;
  const char *proxy_host;
  int proxy_port;
  const char *proxy_userid;
  const char *proxy_passwd;
  const char *proxy_from;
  int status;
  int error;
  int errmode;
  int errnum;

  struct soap_dom_element *dom;
  struct soap_dime dime;
  struct soap_mime mime;
  struct soap_xlist *xlist;


  const char *logfile[(3)];
  FILE *fdebug[(3)];
  struct soap_mlist *mht[(4096)];


  const char *wsuid;
  const char *c14nexclude;
  struct soap_cookie *cookies;
  const char *cookie_domain;
  const char *cookie_path;
  int cookie_max;


  int ipv6_multicast_if;
  char* ipv4_multicast_if;
  unsigned char ipv4_multicast_ttl;



  struct sockaddr_in peer;


  size_t peerlen;
# 2010 "/usr/include/stdsoap2.h" 3 4
  void *fsslauth;
  void *fsslverify;
  void *bio;
  void *ssl;
  void *ctx;
  void *session;
  void *dh_params;
  void *rsa_params;

  unsigned short ssl_flags;
  const char *keyfile;
  const char *password;
  const char *cafile;
  const char *capath;
  const char *crlfile;
  char session_host[(1024)];
  int session_port;



  void *c_locale;





  void *d_stream;
  int32_t z_crc;

  const char *z_dict;
  unsigned int z_dict_len;
  short zlib_state;
  short zlib_in;
  short zlib_out;
  char *z_buf;
  size_t z_buflen;
  unsigned short z_level;
  float z_ratio_in;
  float z_ratio_out;




  soap();
  soap(soap_mode);
  soap(soap_mode, soap_mode);
  soap(const struct soap&);
  virtual ~soap();



};

struct soap_code_map
{ long code;
  const char *string;
};


struct soap_flist
{ struct soap_flist *next;
  int type;
  void *ptr;
  unsigned int level;
  size_t len;
  void (*fcopy)(struct soap*, int, int, void*, size_t, const void*, size_t);
};


struct soap_ilist
{ struct soap_ilist *next;
  int type;
  size_t size;
  void *link;
  void *copy;
  struct soap_flist *flist;
  void *ptr;
  unsigned int level;
  char id[1];
};

struct soap_plugin
{ struct soap_plugin *next;
  const char *id;
  void *data;
  int (*fcopy)(struct soap *soap, struct soap_plugin *dst, struct soap_plugin *src);
  void (*fdelete)(struct soap *soap, struct soap_plugin *p);
};


extern struct Namespace namespaces[];
# 2171 "/usr/include/stdsoap2.h" 3 4
typedef void soap_walker(struct soap*, void*, int, const char*, const char*);

 void soap_header(struct soap*);
 void soap_fault(struct soap*);
 const char** soap_faultcode(struct soap*);
 const char** soap_faultsubcode(struct soap*);
 const char** soap_faultstring(struct soap*);
 const char** soap_faultdetail(struct soap*);
 void soap_serializeheader(struct soap*);
 int soap_putheader(struct soap*);
 int soap_getheader(struct soap*);
 void soap_serializefault(struct soap*);
 int soap_putfault(struct soap*);
 int soap_getfault(struct soap*);

 void soap_ssl_init(void);
 int soap_poll(struct soap*);
 int soap_connect_command(struct soap*, int, const char*, const char*);
 int soap_connect(struct soap*, const char*, const char*);
 int soap_bind(struct soap*, const char*, int, int);
 int soap_accept(struct soap*);
 int soap_ssl_accept(struct soap*);
 const char * soap_ssl_error(struct soap*, int);

 int soap_ssl_server_context(struct soap*, unsigned short, const char*, const char*, const char*, const char*, const char*, const char*, const char*);
 int soap_ssl_client_context(struct soap*, unsigned short, const char*, const char*, const char*, const char*, const char*);

 int soap_puthttphdr(struct soap*, int status, size_t count);

 const char* soap_get_header_attribute(struct soap*, const char*, const char*);
 const char* soap_decode_key(char*, size_t, const char*);
 const char* soap_decode_val(char*, size_t, const char*);

 size_t soap_hash(const char*);
 void soap_set_endpoint(struct soap*, const char*);
 int soap_flush_raw(struct soap*, const char*, size_t);
 int soap_flush(struct soap*);
 soap_wchar soap_get(struct soap*);
 soap_wchar soap_getchar(struct soap*);
 int soap_tag_cmp(const char*, const char*);
 void soap_set_fault(struct soap*);
 int soap_sender_fault(struct soap*, const char*, const char*);
 int soap_sender_fault_subcode(struct soap*, const char*, const char*, const char*);
 int soap_receiver_fault(struct soap*, const char*, const char*);
 int soap_receiver_fault_subcode(struct soap*, const char*, const char*, const char*);
 int soap_set_sender_error(struct soap*, const char*, const char*, int);
 int soap_set_receiver_error(struct soap*, const char*, const char*, int);

 int soap_send_raw(struct soap*, const char*, size_t);
 int soap_recv_raw(struct soap*);
 int soap_recv(struct soap*);
 int soap_send(struct soap*, const char*);
 int soap_send2(struct soap*, const char*, const char*);
 int soap_send3(struct soap*, const char*, const char*, const char*);

 int soap_pututf8(struct soap*, unsigned long);
 soap_wchar soap_getutf8(struct soap*);

 int soap_putbase64(struct soap*, const unsigned char*, int);
 unsigned char* soap_getbase64(struct soap*, int*, int);
 int soap_puthex(struct soap*, const unsigned char*, int);
 unsigned char* soap_gethex(struct soap*, int*);


 int soap_xop_forward(struct soap*, unsigned char**, int*, char**, char**, char**);
 int soap_dime_forward(struct soap*, unsigned char**, int*, char**, char**, char**);



 int soap_pointer_lookup_id(struct soap*, void *p, int t, struct soap_plist**);
 int soap_pointer_lookup(struct soap*, const void *p, int t, struct soap_plist**);
 int soap_pointer_enter(struct soap*, const void *p, const struct soap_array *a, int n, int t, struct soap_plist**);
 int soap_array_pointer_lookup(struct soap*, const void *p, const struct soap_array *a, int n, int t, struct soap_plist**);
 int soap_embed(struct soap *soap, const void *p, const struct soap_array *a, int n, const char *tag, int type);
 struct soap_ilist* soap_lookup(struct soap*, const char*);
 struct soap_ilist* soap_enter(struct soap*, const char*);
 int soap_resolve(struct soap*);
 void soap_embedded(struct soap*, const void *p, int t);
 int soap_reference(struct soap*, const void *p, int t);
 int soap_array_reference(struct soap*, const void *p, const struct soap_array *a, int n, int t);
 int soap_embedded_id(struct soap*, int id, const void *p, int t);
 int soap_is_embedded(struct soap*, struct soap_plist*);
 int soap_is_single(struct soap*, struct soap_plist*);
 void soap_set_embedded(struct soap*, struct soap_plist*);


 int soap_begin_count(struct soap*);
 int soap_end_count(struct soap*);
 int soap_begin_send(struct soap*);
 int soap_end_send(struct soap*);

 const struct soap_code_map* soap_code(const struct soap_code_map*, const char*);
 long soap_code_int(const struct soap_code_map*, const char*, long);
 const char* soap_code_str(const struct soap_code_map*, long);
 long soap_code_bits(const struct soap_code_map*, const char*);
 const char* soap_code_list(struct soap*, const struct soap_code_map*, long);

 int soap_getline(struct soap*, char*, int);
 int soap_begin_serve(struct soap*);
 int soap_begin_recv(struct soap*);
 int soap_end_recv(struct soap*);

 void* soap_malloc(struct soap*, size_t);
 void soap_dealloc(struct soap*, void*);
 struct soap_clist * soap_link(struct soap*, void*, int, int, int (*fdelete)(struct soap_clist*));
 int soap_unlink(struct soap*, const void*);
 void soap_free_temp(struct soap*);
 void soap_del(struct soap*);

 void* soap_track_malloc(struct soap*, const char*, int, size_t);
 void soap_track_free(struct soap*, const char*, int, void*);


 int soap_lookup_type(struct soap*, const char *id);
 void* soap_id_lookup(struct soap*, const char *id, void **p, int t, size_t n, unsigned int k);
 void* soap_id_forward(struct soap*, const char *id, void *p, size_t len, int st, int tt, size_t n, unsigned int k, void(*fcopy)(struct soap*, int, int, void*, size_t, const void*, size_t));

 void* soap_id_enter(struct soap*, const char *id, void *p, int t, size_t n, unsigned int k, const char *type, const char *arrayType, void *(*finstantiate)(struct soap*, int, const char*, const char*, size_t*));
 void soap_fcopy(struct soap *soap, int st, int tt, void *p, size_t, const void *q, size_t n);

 int soap_size(const int *, int);
 int soap_getoffsets(const char *, const int *, int *, int);
 int soap_getsize(const char *, const char *, int *);
 int soap_getsizes(const char *, int *, int);
 int soap_getposition(const char *, int *);

 char* soap_putsize(struct soap*, const char *, int);
 char* soap_putsizesoffsets(struct soap*, const char *, const int *, const int *, int);
 char* soap_putsizes(struct soap*, const char *, const int *, int);
 char* soap_putoffset(struct soap*, int);
 char* soap_putoffsets(struct soap*, const int *, int);

 int soap_closesock(struct soap*);
 int soap_force_closesock(struct soap*);

 struct soap * soap_new(void);
 struct soap * soap_new1(soap_mode);
 struct soap * soap_new2(soap_mode, soap_mode);
 void soap_free(struct soap*);
 struct soap * soap_copy(const struct soap*);
 struct soap * soap_copy_context(struct soap*, const struct soap*);
 void soap_copy_stream(struct soap*, struct soap*);
 void soap_free_stream(struct soap*);
 void soap_init(struct soap*);
 void soap_init1(struct soap*, soap_mode);
 void soap_init2(struct soap*, soap_mode, soap_mode);
 void soap_done(struct soap*);
 void soap_cleanup(struct soap*);
 void soap_begin(struct soap*);
 void soap_end(struct soap*);
 void soap_delete(struct soap*, void*);
 void soap_delegate_deletion(struct soap*, struct soap*);


 void soap_set_recv_logfile(struct soap*, const char*);
 void soap_set_sent_logfile(struct soap*, const char*);
 void soap_set_test_logfile(struct soap*, const char*);
 void soap_close_logfiles(struct soap*);
 void soap_open_logfile(struct soap*, int);


 const char* soap_value(struct soap*);

 int soap_match_tag(struct soap*, const char*, const char *);
 int soap_match_array(struct soap*, const char*);

 int soap_element(struct soap*, const char*, int, const char*);
 int soap_element_begin_out(struct soap*, const char *tag, int id, const char *type);
 int soap_array_begin_out(struct soap*, const char *tag, int id, const char *type, const char *offset);
 int soap_element_ref(struct soap*, const char *tag, int id, int href);
 int soap_element_href(struct soap*, const char *tag, int id, const char *ref, const char *val);
 int soap_element_null(struct soap*, const char *tag, int id, const char *type);
 int soap_element_nil(struct soap*, const char *tag);
 int soap_element_id(struct soap*, const char *tag, int id, const void *p, const struct soap_array *a, int d, const char *type, int n);
 int soap_element_result(struct soap*, const char *tag);
 void soap_check_result(struct soap*, const char *tag);
 int soap_element_end_out(struct soap*, const char *tag);
 int soap_element_start_end_out(struct soap*, const char *tag);

 int soap_attribute(struct soap*, const char*, const char*);

 int soap_element_begin_in(struct soap*, const char *tag, int nillable, const char *type);

 int soap_element_end_in(struct soap*, const char *tag);

 int soap_peek_element(struct soap*);

 void soap_retry(struct soap*);
 void soap_revert(struct soap*);

 char* soap_strdup(struct soap*, const char*);
 wchar_t* soap_wstrdup(struct soap*, const wchar_t*);
 const char * soap_tagsearch(const char *big, const char *little);

 int soap_string_out(struct soap*, const char *s, int flag);
 char* soap_string_in(struct soap*, int, long, long);


 int soap_wstring_out(struct soap*, const wchar_t *s, int flag);
 wchar_t* soap_wstring_in(struct soap*, int, long, long);


 int soap_match_namespace(struct soap*, const char *, const char*, size_t n1, size_t n2);

 int soap_set_namespaces(struct soap*, const struct Namespace*);
 void soap_set_local_namespaces(struct soap*);

 void soap_pop_namespace(struct soap*);
 struct soap_nlist* soap_push_namespace(struct soap*, const char *,const char *);
 const char* soap_current_namespace(struct soap *soap, const char *tag);

 struct soap_nlist* soap_lookup_ns(struct soap *soap, const char *tag, size_t n);

 int soap_store_lab(struct soap*, const char*, size_t);
 int soap_append_lab(struct soap*, const char*, size_t);

 struct soap_blist* soap_new_block(struct soap*);
 void* soap_push_block(struct soap*, struct soap_blist*, size_t);
 void soap_pop_block(struct soap*, struct soap_blist*);
 size_t soap_size_block(struct soap*, struct soap_blist*, size_t);
 char* soap_first_block(struct soap*, struct soap_blist*);
 char* soap_next_block(struct soap*, struct soap_blist*);
 size_t soap_block_size(struct soap*, struct soap_blist*);
 char* soap_save_block(struct soap*, struct soap_blist*, char*, int);
 void soap_end_block(struct soap*, struct soap_blist*);
 void soap_update_pointers(struct soap *soap, char *start, char *end, char *p1, char *p2);

 int soap_envelope_begin_out(struct soap*);
 int soap_envelope_end_out(struct soap*);

 char * soap_get_http_body(struct soap*);

 int soap_envelope_begin_in(struct soap*);
 int soap_envelope_end_in(struct soap*);

 int soap_body_begin_out(struct soap*);
 int soap_body_end_out(struct soap*);

 int soap_body_begin_in(struct soap*);
 int soap_body_end_in(struct soap*);

 int soap_recv_header(struct soap*);

 int soap_response(struct soap*, int);

 int soap_send_empty_response(struct soap*, int status);
 int soap_recv_empty_response(struct soap*);

 int soap_send_fault(struct soap*);
 int soap_recv_fault(struct soap*, int check);


 void soap_print_fault(struct soap*, FILE*);
 void soap_print_fault_location(struct soap*, FILE*);


 void soap_stream_fault(struct soap*, std::ostream&);

 char* soap_sprint_fault(struct soap*, char*, size_t);



 int soap_s2byte(struct soap*, const char*, char*);
 int soap_s2short(struct soap*, const char*, short*);
 int soap_s2int(struct soap*, const char*, int*);
 int soap_s2long(struct soap*, const char*, long*);
 int soap_s2LONG64(struct soap*, const char*, long long*);
 int soap_s2float(struct soap*, const char*, float*);
 int soap_s2double(struct soap*, const char*, double*);
 int soap_s2unsignedByte(struct soap*, const char*, unsigned char*);
 int soap_s2unsignedShort(struct soap*, const char*, unsigned short*);
 int soap_s2unsignedInt(struct soap*, const char*, unsigned int*);
 int soap_s2unsignedLong(struct soap*, const char*, unsigned long*);
 int soap_s2ULONG64(struct soap*, const char*, unsigned long long*);
 int soap_s2string(struct soap*, const char*, char**, long minlen, long maxlen);
 int soap_s2QName(struct soap*, const char*, char**, long minlen, long maxlen);


 int soap_s2wchar(struct soap*, const char*, wchar_t**, long minlen, long maxlen);
 int soap_s2dateTime(struct soap*, const char*, time_t*);
 char* soap_s2base64(struct soap*, const unsigned char*, char*, int);
 char* soap_s2hex(struct soap*, const unsigned char*, char*, int);


 const char* soap_byte2s(struct soap*, char);
 const char* soap_short2s(struct soap*, short);
 const char* soap_int2s(struct soap*, int);
 const char* soap_long2s(struct soap*, long);
 const char* soap_LONG642s(struct soap*, long long);
 const char* soap_float2s(struct soap*, float);
 const char* soap_double2s(struct soap*, double);
 const char* soap_unsignedByte2s(struct soap*, unsigned char);
 const char* soap_unsignedShort2s(struct soap*, unsigned short);
 const char* soap_unsignedInt2s(struct soap*, unsigned int);
 const char* soap_unsignedLong2s(struct soap*, unsigned long);
 const char* soap_ULONG642s(struct soap*, unsigned long long);
 const char* soap_QName2s(struct soap*, const char*);


 const char* soap_wchar2s(struct soap*, const wchar_t*);
 const char* soap_dateTime2s(struct soap*, time_t);
 const char* soap_base642s(struct soap*, const char*, char*, size_t, int*);
 const char* soap_hex2s(struct soap*, const char*, char*, size_t, int*);



 int* soap_inint(struct soap*, const char *tag, int *p, const char *, int);
 char* soap_inbyte(struct soap*, const char *tag, char *p, const char *, int);
 long* soap_inlong(struct soap*, const char *tag, long *p, const char *, int);
 long long* soap_inLONG64(struct soap*, const char *tag, long long *p, const char *, int);
 short* soap_inshort(struct soap*, const char *tag, short *p, const char *, int);
 float* soap_infloat(struct soap*, const char *tag, float *p, const char *, int);
 double* soap_indouble(struct soap*, const char *tag, double *p, const char *, int);
 unsigned char* soap_inunsignedByte(struct soap*, const char *tag, unsigned char *p, const char *, int);
 unsigned short* soap_inunsignedShort(struct soap*, const char *tag, unsigned short *p, const char *, int);
 unsigned int* soap_inunsignedInt(struct soap*, const char *tag, unsigned int *p, const char *, int);
 unsigned long* soap_inunsignedLong(struct soap*, const char *tag, unsigned long *p, const char *, int);
 unsigned long long* soap_inULONG64(struct soap*, const char *tag, unsigned long long *p, const char *, int);
 char** soap_instring(struct soap*, const char *tag, char **p, const char *, int, int, long, long);
 char** soap_inliteral(struct soap*, const char *tag, char **p);


 time_t* soap_indateTime(struct soap*, const char *tag, time_t *p, const char *, int);
 time_t soap_timegm(struct tm*);



 wchar_t** soap_inwstring(struct soap*, const char *tag, wchar_t **p, const char *, int, long, long);
 wchar_t** soap_inwliteral(struct soap*, const char *tag, wchar_t **p);


 int soap_outbyte(struct soap*, const char *tag, int id, const char *p, const char *, int);
 int soap_outshort(struct soap*, const char *tag, int id, const short *p, const char *, int);
 int soap_outint(struct soap*, const char *tag, int id, const int *p, const char *, int);
 int soap_outlong(struct soap*, const char *tag, int id, const long *p, const char *, int);
 int soap_outLONG64(struct soap*, const char *tag, int id, const long long *p, const char *, int);
 int soap_outfloat(struct soap*, const char *tag, int id, const float *p, const char *, int);
 int soap_outdouble(struct soap*, const char *tag, int id, const double *p, const char *, int);
 int soap_outunsignedByte(struct soap*, const char *tag, int id, const unsigned char *p, const char *, int);
 int soap_outunsignedShort(struct soap*, const char *tag, int id, const unsigned short *p, const char *, int);
 int soap_outunsignedInt(struct soap*, const char *tag, int id, const unsigned int *p, const char *, int);
 int soap_outunsignedLong(struct soap*, const char *tag, int id, const unsigned long *p, const char *, int);
 int soap_outULONG64(struct soap*, const char *tag, int id, const unsigned long long *p, const char *, int);
 int soap_outstring(struct soap*, const char *tag, int id, char *const*p, const char *, int);
 int soap_outliteral(struct soap*, const char *tag, char *const*p, const char *type);


 int soap_outdateTime(struct soap*, const char *tag, int id, const time_t *p, const char *, int);



 int soap_outwstring(struct soap*, const char *tag, int id, wchar_t *const*p, const char *, int);
 int soap_outwliteral(struct soap*, const char *tag, wchar_t *const*p, const char *type);



 int soap_attachment(struct soap *, const char*, int, const void*, const struct soap_array*, const char*, const char*, const char*, int, const char*, int);
 int soap_move(struct soap*, long);
 size_t soap_tell(struct soap*);
 char* soap_dime_option(struct soap*, unsigned short, const char*);
 int soap_getdimehdr(struct soap*);
 int soap_getdime(struct soap*);
 int soap_putdimehdr(struct soap*);
 int soap_putdime(struct soap*);
 int soap_getmimehdr(struct soap*);
 int soap_getmime(struct soap*);
 int soap_putmimehdr(struct soap*, struct soap_multipart*);
 int soap_putmime(struct soap*);
 void soap_set_dime(struct soap*);
 void soap_set_mime(struct soap*, const char *boundary, const char *start);
 void soap_clr_dime(struct soap*);
 void soap_clr_mime(struct soap*);
 int soap_set_dime_attachment(struct soap*, char *ptr, size_t size, const char *type, const char *id, unsigned short optype, const char *option);
 int soap_set_mime_attachment(struct soap*, char *ptr, size_t size, enum soap_mime_encoding encoding, const char *type, const char *id, const char *location, const char *description);
 void soap_post_check_mime_attachments(struct soap *soap);
 int soap_check_mime_attachments(struct soap *soap);
 struct soap_multipart* soap_get_mime_attachment(struct soap *soap, void *handle);
 int soap_match_cid(struct soap*, const char*, const char*);


 int soap_register_plugin_arg(struct soap*, int (*fcreate)(struct soap*, struct soap_plugin*, void*), void*);
 void* soap_lookup_plugin(struct soap*, const char*);

 const char* soap_attr_value(struct soap *soap, const char *name, int flag);
 int soap_set_attr(struct soap *soap, const char *name, const char *value, int flag);
 void soap_clr_attr(struct soap *soap);
# 2578 "/usr/include/stdsoap2.h" 3 4
}
# 15 "../../AmazonS3/eternusStub.h" 2
# 28 "../../AmazonS3/eternusStub.h"
enum ns1__Permission {ns1__Permission__READ = 0, ns1__Permission__WRITE = 1, ns1__Permission__READ_USCOREACP = 2, ns1__Permission__WRITE_USCOREACP = 3, ns1__Permission__FULL_USCORECONTROL = 4};





enum ns1__StorageClass {ns1__StorageClass__STANDARD = 0, ns1__StorageClass__UNKNOWN = 1};





enum ns1__MetadataDirective {ns1__MetadataDirective__COPY = 0, ns1__MetadataDirective__REPLACE = 1};





enum ns1__Payer {ns1__Payer__BucketOwner = 0, ns1__Payer__Requester = 1};
# 70 "../../AmazonS3/eternusStub.h"
class xsd__base64Binary
{
public:
 unsigned char *__ptr;
 int __size;
 char *id;
 char *type;
 char *options;
 struct soap *soap;
public:
 virtual int soap_type() const { return 8; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          xsd__base64Binary(): __ptr(__null), id(__null), type(__null), options(__null), soap(__null) { xsd__base64Binary::soap_default(__null); }
 virtual ~xsd__base64Binary() { }
};





class ns1__MetadataEntry
{
public:
 char *Name;
 char *Value;
 struct soap *soap;
public:
 virtual int soap_type() const { return 13; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__MetadataEntry(): Name(__null), Value(__null), soap(__null) { ns1__MetadataEntry::soap_default(__null); }
 virtual ~ns1__MetadataEntry() { }
};





class ns1__Status
{
public:
 int Code;
 char *Description;
 struct soap *soap;
public:
 virtual int soap_type() const { return 14; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__Status(): Description(__null), soap(__null) { ns1__Status::soap_default(__null); }
 virtual ~ns1__Status() { }
};





class ns1__Result
{
public:
 ns1__Status *Status;
 struct soap *soap;
public:
 virtual int soap_type() const { return 15; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__Result(): Status(__null), soap(__null) { ns1__Result::soap_default(__null); }
 virtual ~ns1__Result() { }
};





class ns1__CreateBucketResult
{
public:
 char *BucketName;
 struct soap *soap;
public:
 virtual int soap_type() const { return 16; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__CreateBucketResult(): BucketName(__null), soap(__null) { ns1__CreateBucketResult::soap_default(__null); }
 virtual ~ns1__CreateBucketResult() { }
};





class ns1__BucketLoggingStatus
{
public:
 class ns1__LoggingSettings *LoggingEnabled;
 struct soap *soap;
public:
 virtual int soap_type() const { return 17; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__BucketLoggingStatus(): LoggingEnabled(__null), soap(__null) { ns1__BucketLoggingStatus::soap_default(__null); }
 virtual ~ns1__BucketLoggingStatus() { }
};





class ns1__LoggingSettings
{
public:
 char *TargetBucket;
 char *TargetPrefix;
 class ns1__AccessControlList *TargetGrants;
 struct soap *soap;
public:
 virtual int soap_type() const { return 18; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__LoggingSettings(): TargetBucket(__null), TargetPrefix(__null), TargetGrants(__null), soap(__null) { ns1__LoggingSettings::soap_default(__null); }
 virtual ~ns1__LoggingSettings() { }
};





class ns1__Grantee
{
public:
 struct soap *soap;
public:
 virtual int soap_type() const { return 19; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__Grantee(): soap(__null) { ns1__Grantee::soap_default(__null); }
 virtual ~ns1__Grantee() { }
};





class ns1__Grant
{
public:
 ns1__Grantee *Grantee;
 enum ns1__Permission Permission;
 struct soap *soap;
public:
 virtual int soap_type() const { return 24; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__Grant(): Grantee(__null), soap(__null) { ns1__Grant::soap_default(__null); }
 virtual ~ns1__Grant() { }
};





class ns1__AccessControlList
{
public:
 int __sizeGrant;
 ns1__Grant **Grant;
 struct soap *soap;
public:
 virtual int soap_type() const { return 25; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__AccessControlList(): Grant(__null), soap(__null) { ns1__AccessControlList::soap_default(__null); }
 virtual ~ns1__AccessControlList() { }
};





class ns1__CreateBucketConfiguration
{
public:
 class ns1__LocationConstraint *LocationConstraint;
 struct soap *soap;
public:
 virtual int soap_type() const { return 26; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__CreateBucketConfiguration(): LocationConstraint(__null), soap(__null) { ns1__CreateBucketConfiguration::soap_default(__null); }
 virtual ~ns1__CreateBucketConfiguration() { }
};





class ns1__AccessControlPolicy
{
public:
 class ns1__CanonicalUser *Owner;
 ns1__AccessControlList *AccessControlList;
 struct soap *soap;
public:
 virtual int soap_type() const { return 28; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__AccessControlPolicy(): Owner(__null), AccessControlList(__null), soap(__null) { ns1__AccessControlPolicy::soap_default(__null); }
 virtual ~ns1__AccessControlPolicy() { }
};





class ns1__PutObjectResult
{
public:
 char *ETag;
 time_t LastModified;
 struct soap *soap;
public:
 virtual int soap_type() const { return 30; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__PutObjectResult(): ETag(__null), soap(__null) { ns1__PutObjectResult::soap_default(__null); }
 virtual ~ns1__PutObjectResult() { }
};





class ns1__ListEntry
{
public:
 char *Key;
 time_t LastModified;
 char *ETag;
 long long Size;
 ns1__CanonicalUser *Owner;
 enum ns1__StorageClass StorageClass;
 struct soap *soap;
public:
 virtual int soap_type() const { return 31; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__ListEntry(): Key(__null), ETag(__null), Owner(__null), soap(__null) { ns1__ListEntry::soap_default(__null); }
 virtual ~ns1__ListEntry() { }
};





class ns1__PrefixEntry
{
public:
 char *Prefix;
 struct soap *soap;
public:
 virtual int soap_type() const { return 32; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__PrefixEntry(): Prefix(__null), soap(__null) { ns1__PrefixEntry::soap_default(__null); }
 virtual ~ns1__PrefixEntry() { }
};





class ns1__ListBucketResult
{
public:
 int __sizeMetadata;
 ns1__MetadataEntry **Metadata;
 char *Name;
 char *Prefix;
 char *Marker;
 char *NextMarker;
 int MaxKeys;
 char *Delimiter;
 bool IsTruncated;
 int __sizeContents;
 ns1__ListEntry **Contents;
 int __sizeCommonPrefixes;
 ns1__PrefixEntry **CommonPrefixes;
 struct soap *soap;
public:
 virtual int soap_type() const { return 33; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__ListBucketResult(): Metadata(__null), Name(__null), Prefix(__null), Marker(__null), NextMarker(__null), Delimiter(__null), Contents(__null), CommonPrefixes(__null), soap(__null) { ns1__ListBucketResult::soap_default(__null); }
 virtual ~ns1__ListBucketResult() { }
};





class ns1__ListAllMyBucketsEntry
{
public:
 char *Name;
 time_t CreationDate;
 struct soap *soap;
public:
 virtual int soap_type() const { return 34; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__ListAllMyBucketsEntry(): Name(__null), soap(__null) { ns1__ListAllMyBucketsEntry::soap_default(__null); }
 virtual ~ns1__ListAllMyBucketsEntry() { }
};





class ns1__ListAllMyBucketsResult
{
public:
 ns1__CanonicalUser *Owner;
 class ns1__ListAllMyBucketsList *Buckets;
 struct soap *soap;
public:
 virtual int soap_type() const { return 35; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__ListAllMyBucketsResult(): Owner(__null), Buckets(__null), soap(__null) { ns1__ListAllMyBucketsResult::soap_default(__null); }
 virtual ~ns1__ListAllMyBucketsResult() { }
};





class ns1__ListAllMyBucketsList
{
public:
 int __sizeBucket;
 ns1__ListAllMyBucketsEntry **Bucket;
 struct soap *soap;
public:
 virtual int soap_type() const { return 36; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__ListAllMyBucketsList(): Bucket(__null), soap(__null) { ns1__ListAllMyBucketsList::soap_default(__null); }
 virtual ~ns1__ListAllMyBucketsList() { }
};





class ns1__CopyObjectResult
{
public:
 time_t LastModified;
 char *ETag;
 struct soap *soap;
public:
 virtual int soap_type() const { return 37; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__CopyObjectResult(): ETag(__null), soap(__null) { ns1__CopyObjectResult::soap_default(__null); }
 virtual ~ns1__CopyObjectResult() { }
};





class ns1__RequestPaymentConfiguration
{
public:
 enum ns1__Payer Payer;
 struct soap *soap;
public:
 virtual int soap_type() const { return 38; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__RequestPaymentConfiguration(): soap(__null) { ns1__RequestPaymentConfiguration::soap_default(__null); }
 virtual ~ns1__RequestPaymentConfiguration() { }
};





class _ns1__CreateBucket
{
public:
 char *Bucket;
 ns1__AccessControlList *AccessControlList;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 struct soap *soap;
public:
 virtual int soap_type() const { return 39; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__CreateBucket(): Bucket(__null), AccessControlList(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), soap(__null) { _ns1__CreateBucket::soap_default(__null); }
 virtual ~_ns1__CreateBucket() { }
};





class _ns1__CreateBucketResponse
{
public:
 ns1__CreateBucketResult *CreateBucketReturn;
 struct soap *soap;
public:
 virtual int soap_type() const { return 40; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__CreateBucketResponse(): CreateBucketReturn(__null), soap(__null) { _ns1__CreateBucketResponse::soap_default(__null); }
 virtual ~_ns1__CreateBucketResponse() { }
};





class _ns1__DeleteBucket
{
public:
 char *Bucket;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 41; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__DeleteBucket(): Bucket(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__DeleteBucket::soap_default(__null); }
 virtual ~_ns1__DeleteBucket() { }
};





class _ns1__DeleteBucketResponse
{
public:
 ns1__Status *DeleteBucketResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 42; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__DeleteBucketResponse(): DeleteBucketResponse(__null), soap(__null) { _ns1__DeleteBucketResponse::soap_default(__null); }
 virtual ~_ns1__DeleteBucketResponse() { }
};





class _ns1__GetBucketLoggingStatus
{
public:
 char *Bucket;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 43; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetBucketLoggingStatus(): Bucket(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__GetBucketLoggingStatus::soap_default(__null); }
 virtual ~_ns1__GetBucketLoggingStatus() { }
};





class _ns1__GetBucketLoggingStatusResponse
{
public:
 ns1__BucketLoggingStatus *GetBucketLoggingStatusResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 44; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetBucketLoggingStatusResponse(): GetBucketLoggingStatusResponse(__null), soap(__null) { _ns1__GetBucketLoggingStatusResponse::soap_default(__null); }
 virtual ~_ns1__GetBucketLoggingStatusResponse() { }
};





class _ns1__SetBucketLoggingStatus
{
public:
 char *Bucket;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 ns1__BucketLoggingStatus *BucketLoggingStatus;
 struct soap *soap;
public:
 virtual int soap_type() const { return 45; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetBucketLoggingStatus(): Bucket(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), BucketLoggingStatus(__null), soap(__null) { _ns1__SetBucketLoggingStatus::soap_default(__null); }
 virtual ~_ns1__SetBucketLoggingStatus() { }
};





class _ns1__SetBucketLoggingStatusResponse
{
public:
 struct soap *soap;
public:
 virtual int soap_type() const { return 46; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetBucketLoggingStatusResponse(): soap(__null) { _ns1__SetBucketLoggingStatusResponse::soap_default(__null); }
 virtual ~_ns1__SetBucketLoggingStatusResponse() { }
};





class _ns1__GetObjectAccessControlPolicy
{
public:
 char *Bucket;
 char *Key;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 47; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObjectAccessControlPolicy(): Bucket(__null), Key(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__GetObjectAccessControlPolicy::soap_default(__null); }
 virtual ~_ns1__GetObjectAccessControlPolicy() { }
};





class _ns1__GetObjectAccessControlPolicyResponse
{
public:
 ns1__AccessControlPolicy *GetObjectAccessControlPolicyResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 48; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObjectAccessControlPolicyResponse(): GetObjectAccessControlPolicyResponse(__null), soap(__null) { _ns1__GetObjectAccessControlPolicyResponse::soap_default(__null); }
 virtual ~_ns1__GetObjectAccessControlPolicyResponse() { }
};





class _ns1__GetBucketAccessControlPolicy
{
public:
 char *Bucket;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 49; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetBucketAccessControlPolicy(): Bucket(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__GetBucketAccessControlPolicy::soap_default(__null); }
 virtual ~_ns1__GetBucketAccessControlPolicy() { }
};





class _ns1__GetBucketAccessControlPolicyResponse
{
public:
 ns1__AccessControlPolicy *GetBucketAccessControlPolicyResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 50; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetBucketAccessControlPolicyResponse(): GetBucketAccessControlPolicyResponse(__null), soap(__null) { _ns1__GetBucketAccessControlPolicyResponse::soap_default(__null); }
 virtual ~_ns1__GetBucketAccessControlPolicyResponse() { }
};





class _ns1__SetObjectAccessControlPolicy
{
public:
 char *Bucket;
 char *Key;
 ns1__AccessControlList *AccessControlList;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 51; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetObjectAccessControlPolicy(): Bucket(__null), Key(__null), AccessControlList(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__SetObjectAccessControlPolicy::soap_default(__null); }
 virtual ~_ns1__SetObjectAccessControlPolicy() { }
};





class _ns1__SetObjectAccessControlPolicyResponse
{
public:
 struct soap *soap;
public:
 virtual int soap_type() const { return 52; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetObjectAccessControlPolicyResponse(): soap(__null) { _ns1__SetObjectAccessControlPolicyResponse::soap_default(__null); }
 virtual ~_ns1__SetObjectAccessControlPolicyResponse() { }
};





class _ns1__SetBucketAccessControlPolicy
{
public:
 char *Bucket;
 ns1__AccessControlList *AccessControlList;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 53; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetBucketAccessControlPolicy(): Bucket(__null), AccessControlList(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__SetBucketAccessControlPolicy::soap_default(__null); }
 virtual ~_ns1__SetBucketAccessControlPolicy() { }
};





class _ns1__SetBucketAccessControlPolicyResponse
{
public:
 struct soap *soap;
public:
 virtual int soap_type() const { return 54; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__SetBucketAccessControlPolicyResponse(): soap(__null) { _ns1__SetBucketAccessControlPolicyResponse::soap_default(__null); }
 virtual ~_ns1__SetBucketAccessControlPolicyResponse() { }
};





class _ns1__GetObject
{
public:
 char *Bucket;
 char *Key;
 bool GetMetadata;
 bool GetData;
 bool InlineData;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 55; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObject(): Bucket(__null), Key(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__GetObject::soap_default(__null); }
 virtual ~_ns1__GetObject() { }
};





class _ns1__GetObjectResponse
{
public:
 class ns1__GetObjectResult *GetObjectResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 56; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObjectResponse(): GetObjectResponse(__null), soap(__null) { _ns1__GetObjectResponse::soap_default(__null); }
 virtual ~_ns1__GetObjectResponse() { }
};





class _ns1__GetObjectExtended
{
public:
 char *Bucket;
 char *Key;
 bool GetMetadata;
 bool GetData;
 bool InlineData;
 long long *ByteRangeStart;
 long long *ByteRangeEnd;
 time_t *IfModifiedSince;
 time_t *IfUnmodifiedSince;
 int __sizeIfMatch;
 char **IfMatch;
 int __sizeIfNoneMatch;
 char **IfNoneMatch;
 bool *ReturnCompleteObjectOnConditionFailure;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 57; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObjectExtended(): Bucket(__null), Key(__null), ByteRangeStart(__null), ByteRangeEnd(__null), IfModifiedSince(__null), IfUnmodifiedSince(__null), IfMatch(__null), IfNoneMatch(__null), ReturnCompleteObjectOnConditionFailure(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__GetObjectExtended::soap_default(__null); }
 virtual ~_ns1__GetObjectExtended() { }
};





class _ns1__GetObjectExtendedResponse
{
public:
 ns1__GetObjectResult *GetObjectResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 58; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__GetObjectExtendedResponse(): GetObjectResponse(__null), soap(__null) { _ns1__GetObjectExtendedResponse::soap_default(__null); }
 virtual ~_ns1__GetObjectExtendedResponse() { }
};





class _ns1__PutObject
{
public:
 char *Bucket;
 char *Key;
 int __sizeMetadata;
 ns1__MetadataEntry **Metadata;
 long long ContentLength;
 ns1__AccessControlList *AccessControlList;
 enum ns1__StorageClass *StorageClass;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 59; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__PutObject(): Bucket(__null), Key(__null), Metadata(__null), AccessControlList(__null), StorageClass(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__PutObject::soap_default(__null); }
 virtual ~_ns1__PutObject() { }
};





class _ns1__PutObjectResponse
{
public:
 ns1__PutObjectResult *PutObjectResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 60; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__PutObjectResponse(): PutObjectResponse(__null), soap(__null) { _ns1__PutObjectResponse::soap_default(__null); }
 virtual ~_ns1__PutObjectResponse() { }
};





class _ns1__PutObjectInline
{
public:
 char *Bucket;
 char *Key;
 int __sizeMetadata;
 ns1__MetadataEntry **Metadata;
 xsd__base64Binary Data;
 long long ContentLength;
 ns1__AccessControlList *AccessControlList;
 enum ns1__StorageClass *StorageClass;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 61; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__PutObjectInline(): Bucket(__null), Key(__null), Metadata(__null), AccessControlList(__null), StorageClass(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__PutObjectInline::soap_default(__null); }
 virtual ~_ns1__PutObjectInline() { }
};





class _ns1__PutObjectInlineResponse
{
public:
 ns1__PutObjectResult *PutObjectInlineResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 62; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__PutObjectInlineResponse(): PutObjectInlineResponse(__null), soap(__null) { _ns1__PutObjectInlineResponse::soap_default(__null); }
 virtual ~_ns1__PutObjectInlineResponse() { }
};





class _ns1__DeleteObject
{
public:
 char *Bucket;
 char *Key;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 63; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__DeleteObject(): Bucket(__null), Key(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__DeleteObject::soap_default(__null); }
 virtual ~_ns1__DeleteObject() { }
};





class _ns1__DeleteObjectResponse
{
public:
 ns1__Status *DeleteObjectResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 64; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__DeleteObjectResponse(): DeleteObjectResponse(__null), soap(__null) { _ns1__DeleteObjectResponse::soap_default(__null); }
 virtual ~_ns1__DeleteObjectResponse() { }
};





class _ns1__ListBucket
{
public:
 char *Bucket;
 char *Prefix;
 char *Marker;
 int *MaxKeys;
 char *Delimiter;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 65; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__ListBucket(): Bucket(__null), Prefix(__null), Marker(__null), MaxKeys(__null), Delimiter(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__ListBucket::soap_default(__null); }
 virtual ~_ns1__ListBucket() { }
};





class _ns1__ListBucketResponse
{
public:
 ns1__ListBucketResult *ListBucketResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 66; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__ListBucketResponse(): ListBucketResponse(__null), soap(__null) { _ns1__ListBucketResponse::soap_default(__null); }
 virtual ~_ns1__ListBucketResponse() { }
};





class _ns1__ListAllMyBuckets
{
public:
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 struct soap *soap;
public:
 virtual int soap_type() const { return 67; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__ListAllMyBuckets(): AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), soap(__null) { _ns1__ListAllMyBuckets::soap_default(__null); }
 virtual ~_ns1__ListAllMyBuckets() { }
};





class _ns1__ListAllMyBucketsResponse
{
public:
 ns1__ListAllMyBucketsResult *ListAllMyBucketsResponse;
 struct soap *soap;
public:
 virtual int soap_type() const { return 68; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__ListAllMyBucketsResponse(): ListAllMyBucketsResponse(__null), soap(__null) { _ns1__ListAllMyBucketsResponse::soap_default(__null); }
 virtual ~_ns1__ListAllMyBucketsResponse() { }
};





class _ns1__PostResponse
{
public:
 char *Location;
 char *Bucket;
 char *Key;
 char *ETag;
 struct soap *soap;
public:
 virtual int soap_type() const { return 69; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__PostResponse(): Location(__null), Bucket(__null), Key(__null), ETag(__null), soap(__null) { _ns1__PostResponse::soap_default(__null); }
 virtual ~_ns1__PostResponse() { }
};





class _ns1__CopyObject
{
public:
 char *SourceBucket;
 char *SourceKey;
 char *DestinationBucket;
 char *DestinationKey;
 enum ns1__MetadataDirective *MetadataDirective;
 int __sizeMetadata;
 ns1__MetadataEntry **Metadata;
 ns1__AccessControlList *AccessControlList;
 time_t *CopySourceIfModifiedSince;
 time_t *CopySourceIfUnmodifiedSince;
 int __sizeCopySourceIfMatch;
 char **CopySourceIfMatch;
 int __sizeCopySourceIfNoneMatch;
 char **CopySourceIfNoneMatch;
 enum ns1__StorageClass *StorageClass;
 char *AWSAccessKeyId;
 time_t *Timestamp;
 char *Signature;
 char *Credential;
 struct soap *soap;
public:
 virtual int soap_type() const { return 70; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__CopyObject(): SourceBucket(__null), SourceKey(__null), DestinationBucket(__null), DestinationKey(__null), MetadataDirective(__null), Metadata(__null), AccessControlList(__null), CopySourceIfModifiedSince(__null), CopySourceIfUnmodifiedSince(__null), CopySourceIfMatch(__null), CopySourceIfNoneMatch(__null), StorageClass(__null), AWSAccessKeyId(__null), Timestamp(__null), Signature(__null), Credential(__null), soap(__null) { _ns1__CopyObject::soap_default(__null); }
 virtual ~_ns1__CopyObject() { }
};





class _ns1__CopyObjectResponse
{
public:
 ns1__CopyObjectResult *CopyObjectResult;
 struct soap *soap;
public:
 virtual int soap_type() const { return 71; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          _ns1__CopyObjectResponse(): CopyObjectResult(__null), soap(__null) { _ns1__CopyObjectResponse::soap_default(__null); }
 virtual ~_ns1__CopyObjectResponse() { }
};





class ns1__User : public ns1__Grantee
{
public:
 virtual int soap_type() const { return 20; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__User() { ns1__User::soap_default(__null); }
 virtual ~ns1__User() { }
};





class ns1__Group : public ns1__Grantee
{
public:
 char *URI;
public:
 virtual int soap_type() const { return 23; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__Group(): URI(__null) { ns1__Group::soap_default(__null); }
 virtual ~ns1__Group() { }
};





class ns1__LocationConstraint
{
public:
 char *__item;
 struct soap *soap;
public:
 virtual int soap_type() const { return 27; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__LocationConstraint(): __item(__null), soap(__null) { ns1__LocationConstraint::soap_default(__null); }
 virtual ~ns1__LocationConstraint() { }
};





class ns1__GetObjectResult : public ns1__Result
{
public:
 int __sizeMetadata;
 ns1__MetadataEntry **Metadata;
 xsd__base64Binary *Data;
 time_t LastModified;
 char *ETag;
public:
 virtual int soap_type() const { return 29; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__GetObjectResult(): Metadata(__null), Data(__null), ETag(__null) { ns1__GetObjectResult::soap_default(__null); }
 virtual ~ns1__GetObjectResult() { }
};





class ns1__AmazonCustomerByEmail : public ns1__User
{
public:
 char *EmailAddress;
public:
 virtual int soap_type() const { return 21; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__AmazonCustomerByEmail(): EmailAddress(__null) { ns1__AmazonCustomerByEmail::soap_default(__null); }
 virtual ~ns1__AmazonCustomerByEmail() { }
};





class ns1__CanonicalUser : public ns1__User
{
public:
 char *ID;
 char *DisplayName;
public:
 virtual int soap_type() const { return 22; }
 virtual void soap_default(struct soap*);
 virtual void soap_serialize(struct soap*) const;
 virtual int soap_put(struct soap*, const char*, const char*) const;
 virtual int soap_out(struct soap*, const char*, int, const char*) const;
 virtual void *soap_get(struct soap*, const char*, const char*);
 virtual void *soap_in(struct soap*, const char*, const char*);
          ns1__CanonicalUser(): ID(__null), DisplayName(__null) { ns1__CanonicalUser::soap_default(__null); }
 virtual ~ns1__CanonicalUser() { }
};





struct __ns1__CreateBucket
{
public:
 _ns1__CreateBucket *ns1__CreateBucket;
};





struct __ns1__DeleteBucket
{
public:
 _ns1__DeleteBucket *ns1__DeleteBucket;
};





struct __ns1__GetObjectAccessControlPolicy
{
public:
 _ns1__GetObjectAccessControlPolicy *ns1__GetObjectAccessControlPolicy;
};





struct __ns1__GetBucketAccessControlPolicy
{
public:
 _ns1__GetBucketAccessControlPolicy *ns1__GetBucketAccessControlPolicy;
};





struct __ns1__SetObjectAccessControlPolicy
{
public:
 _ns1__SetObjectAccessControlPolicy *ns1__SetObjectAccessControlPolicy;
};





struct __ns1__SetBucketAccessControlPolicy
{
public:
 _ns1__SetBucketAccessControlPolicy *ns1__SetBucketAccessControlPolicy;
};





struct __ns1__GetObject
{
public:
 _ns1__GetObject *ns1__GetObject;
};





struct __ns1__GetObjectExtended
{
public:
 _ns1__GetObjectExtended *ns1__GetObjectExtended;
};





struct __ns1__PutObject
{
public:
 _ns1__PutObject *ns1__PutObject;
};





struct __ns1__PutObjectInline
{
public:
 _ns1__PutObjectInline *ns1__PutObjectInline;
};





struct __ns1__DeleteObject
{
public:
 _ns1__DeleteObject *ns1__DeleteObject;
};





struct __ns1__ListBucket
{
public:
 _ns1__ListBucket *ns1__ListBucket;
};





struct __ns1__ListAllMyBuckets
{
public:
 _ns1__ListAllMyBuckets *ns1__ListAllMyBuckets;
};





struct __ns1__SetBucketLoggingStatus
{
public:
 _ns1__SetBucketLoggingStatus *ns1__SetBucketLoggingStatus;
};





struct __ns1__GetBucketLoggingStatus
{
public:
 _ns1__GetBucketLoggingStatus *ns1__GetBucketLoggingStatus;
};





struct __ns1__CopyObject
{
public:
 _ns1__CopyObject *ns1__CopyObject;
};





struct SOAP_ENV__Header
{




};





struct SOAP_ENV__Code
{
public:
 char *SOAP_ENV__Value;
 struct SOAP_ENV__Code *SOAP_ENV__Subcode;
};





struct SOAP_ENV__Detail
{
public:
 int __type;
 void *fault;
 char *__any;
};





struct SOAP_ENV__Reason
{
public:
 char *SOAP_ENV__Text;
};





struct SOAP_ENV__Fault
{
public:
 char *faultcode;
 char *faultstring;
 char *faultactor;
 struct SOAP_ENV__Detail *detail;
 struct SOAP_ENV__Code *SOAP_ENV__Code;
 struct SOAP_ENV__Reason *SOAP_ENV__Reason;
 char *SOAP_ENV__Node;
 char *SOAP_ENV__Role;
 struct SOAP_ENV__Detail *SOAP_ENV__Detail;
};
# 1704 "../../AmazonS3/eternusStub.h"
typedef char *_QName;




typedef char *_XML;




typedef char *xsd__anyURI;
# 1732 "../../AmazonS3/eternusStub.h"
 int __ns1__CreateBucket(struct soap*, _ns1__CreateBucket *ns1__CreateBucket, _ns1__CreateBucketResponse *ns1__CreateBucketResponse);

 int __ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket *ns1__DeleteBucket, _ns1__DeleteBucketResponse *ns1__DeleteBucketResponse);

 int __ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy *ns1__GetObjectAccessControlPolicy, _ns1__GetObjectAccessControlPolicyResponse *ns1__GetObjectAccessControlPolicyResponse);

 int __ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy *ns1__GetBucketAccessControlPolicy, _ns1__GetBucketAccessControlPolicyResponse *ns1__GetBucketAccessControlPolicyResponse);

 int __ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy *ns1__SetObjectAccessControlPolicy, _ns1__SetObjectAccessControlPolicyResponse *ns1__SetObjectAccessControlPolicyResponse);

 int __ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy *ns1__SetBucketAccessControlPolicy, _ns1__SetBucketAccessControlPolicyResponse *ns1__SetBucketAccessControlPolicyResponse);

 int __ns1__GetObject(struct soap*, _ns1__GetObject *ns1__GetObject, _ns1__GetObjectResponse *ns1__GetObjectResponse);

 int __ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended *ns1__GetObjectExtended, _ns1__GetObjectExtendedResponse *ns1__GetObjectExtendedResponse);

 int __ns1__PutObject(struct soap*, _ns1__PutObject *ns1__PutObject, _ns1__PutObjectResponse *ns1__PutObjectResponse);

 int __ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline *ns1__PutObjectInline, _ns1__PutObjectInlineResponse *ns1__PutObjectInlineResponse);

 int __ns1__DeleteObject(struct soap*, _ns1__DeleteObject *ns1__DeleteObject, _ns1__DeleteObjectResponse *ns1__DeleteObjectResponse);

 int __ns1__ListBucket(struct soap*, _ns1__ListBucket *ns1__ListBucket, _ns1__ListBucketResponse *ns1__ListBucketResponse);

 int __ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets *ns1__ListAllMyBuckets, _ns1__ListAllMyBucketsResponse *ns1__ListAllMyBucketsResponse);

 int __ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus *ns1__SetBucketLoggingStatus, _ns1__SetBucketLoggingStatusResponse *ns1__SetBucketLoggingStatusResponse);

 int __ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus *ns1__GetBucketLoggingStatus, _ns1__GetBucketLoggingStatusResponse *ns1__GetBucketLoggingStatusResponse);

 int __ns1__CopyObject(struct soap*, _ns1__CopyObject *ns1__CopyObject, _ns1__CopyObjectResponse *ns1__CopyObjectResponse);







 int soap_serve(struct soap*);

 int soap_serve_request(struct soap*);

 int soap_serve___ns1__CreateBucket(struct soap*);

 int soap_serve___ns1__DeleteBucket(struct soap*);

 int soap_serve___ns1__GetObjectAccessControlPolicy(struct soap*);

 int soap_serve___ns1__GetBucketAccessControlPolicy(struct soap*);

 int soap_serve___ns1__SetObjectAccessControlPolicy(struct soap*);

 int soap_serve___ns1__SetBucketAccessControlPolicy(struct soap*);

 int soap_serve___ns1__GetObject(struct soap*);

 int soap_serve___ns1__GetObjectExtended(struct soap*);

 int soap_serve___ns1__PutObject(struct soap*);

 int soap_serve___ns1__PutObjectInline(struct soap*);

 int soap_serve___ns1__DeleteObject(struct soap*);

 int soap_serve___ns1__ListBucket(struct soap*);

 int soap_serve___ns1__ListAllMyBuckets(struct soap*);

 int soap_serve___ns1__SetBucketLoggingStatus(struct soap*);

 int soap_serve___ns1__GetBucketLoggingStatus(struct soap*);

 int soap_serve___ns1__CopyObject(struct soap*);
# 11 "../../AmazonS3/eternusH.h" 2



 void soap_markelement(struct soap*, const void*, int);
 int soap_putelement(struct soap*, const void*, const char*, int, int);
 void * soap_getelement(struct soap*, int*);
 int soap_putindependent(struct soap*);
 int soap_getindependent(struct soap*);

 int soap_ignore_element(struct soap*);

 void * soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
 int soap_fdelete(struct soap_clist*);
 void* soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);




 void soap_default_byte(struct soap*, char *);
 int soap_out_byte(struct soap*, const char*, int, const char *, const char*);
 char * soap_in_byte(struct soap*, const char*, char *, const char*);




 int soap_put_byte(struct soap*, const char *, const char*, const char*);



 char * soap_get_byte(struct soap*, char *, const char*, const char*);




 void soap_default_int(struct soap*, int *);
 int soap_out_int(struct soap*, const char*, int, const int *, const char*);
 int * soap_in_int(struct soap*, const char*, int *, const char*);




 int soap_put_int(struct soap*, const int *, const char*, const char*);



 int * soap_get_int(struct soap*, int *, const char*, const char*);




 void soap_default_LONG64(struct soap*, long long *);
 int soap_out_LONG64(struct soap*, const char*, int, const long long *, const char*);
 long long * soap_in_LONG64(struct soap*, const char*, long long *, const char*);




 int soap_put_LONG64(struct soap*, const long long *, const char*, const char*);



 long long * soap_get_LONG64(struct soap*, long long *, const char*, const char*);




 void soap_default_unsignedByte(struct soap*, unsigned char *);
 int soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
 unsigned char * soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);




 int soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);



 unsigned char * soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);




 void soap_default_unsignedInt(struct soap*, unsigned int *);
 int soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
 unsigned int * soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);




 int soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);



 unsigned int * soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);




 void soap_default_time(struct soap*, time_t *);
 int soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
 time_t * soap_in_time(struct soap*, const char*, time_t *, const char*);




 int soap_put_time(struct soap*, const time_t *, const char*, const char*);



 time_t * soap_get_time(struct soap*, time_t *, const char*, const char*);




 void soap_default_bool(struct soap*, bool *);
 int soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

 const char* soap_bool2s(struct soap*, bool);
 bool * soap_in_bool(struct soap*, const char*, bool *, const char*);

 int soap_s2bool(struct soap*, const char*, bool *);




 int soap_put_bool(struct soap*, const bool *, const char*, const char*);



 bool * soap_get_bool(struct soap*, bool *, const char*, const char*);




 void soap_default_ns1__Payer(struct soap*, enum ns1__Payer *);
 int soap_out_ns1__Payer(struct soap*, const char*, int, const enum ns1__Payer *, const char*);

 const char* soap_ns1__Payer2s(struct soap*, enum ns1__Payer);
 enum ns1__Payer * soap_in_ns1__Payer(struct soap*, const char*, enum ns1__Payer *, const char*);

 int soap_s2ns1__Payer(struct soap*, const char*, enum ns1__Payer *);




 int soap_put_ns1__Payer(struct soap*, const enum ns1__Payer *, const char*, const char*);



 enum ns1__Payer * soap_get_ns1__Payer(struct soap*, enum ns1__Payer *, const char*, const char*);




 void soap_default_ns1__MetadataDirective(struct soap*, enum ns1__MetadataDirective *);
 int soap_out_ns1__MetadataDirective(struct soap*, const char*, int, const enum ns1__MetadataDirective *, const char*);

 const char* soap_ns1__MetadataDirective2s(struct soap*, enum ns1__MetadataDirective);
 enum ns1__MetadataDirective * soap_in_ns1__MetadataDirective(struct soap*, const char*, enum ns1__MetadataDirective *, const char*);

 int soap_s2ns1__MetadataDirective(struct soap*, const char*, enum ns1__MetadataDirective *);




 int soap_put_ns1__MetadataDirective(struct soap*, const enum ns1__MetadataDirective *, const char*, const char*);



 enum ns1__MetadataDirective * soap_get_ns1__MetadataDirective(struct soap*, enum ns1__MetadataDirective *, const char*, const char*);




 void soap_default_ns1__StorageClass(struct soap*, enum ns1__StorageClass *);
 int soap_out_ns1__StorageClass(struct soap*, const char*, int, const enum ns1__StorageClass *, const char*);

 const char* soap_ns1__StorageClass2s(struct soap*, enum ns1__StorageClass);
 enum ns1__StorageClass * soap_in_ns1__StorageClass(struct soap*, const char*, enum ns1__StorageClass *, const char*);

 int soap_s2ns1__StorageClass(struct soap*, const char*, enum ns1__StorageClass *);




 int soap_put_ns1__StorageClass(struct soap*, const enum ns1__StorageClass *, const char*, const char*);



 enum ns1__StorageClass * soap_get_ns1__StorageClass(struct soap*, enum ns1__StorageClass *, const char*, const char*);




 void soap_default_ns1__Permission(struct soap*, enum ns1__Permission *);
 int soap_out_ns1__Permission(struct soap*, const char*, int, const enum ns1__Permission *, const char*);

 const char* soap_ns1__Permission2s(struct soap*, enum ns1__Permission);
 enum ns1__Permission * soap_in_ns1__Permission(struct soap*, const char*, enum ns1__Permission *, const char*);

 int soap_s2ns1__Permission(struct soap*, const char*, enum ns1__Permission *);




 int soap_put_ns1__Permission(struct soap*, const enum ns1__Permission *, const char*, const char*);



 enum ns1__Permission * soap_get_ns1__Permission(struct soap*, enum ns1__Permission *, const char*, const char*);





 int soap_out__ns1__CopyObjectResponse(struct soap*, const char*, int, const _ns1__CopyObjectResponse *, const char*);
 _ns1__CopyObjectResponse * soap_in__ns1__CopyObjectResponse(struct soap*, const char*, _ns1__CopyObjectResponse *, const char*);






 _ns1__CopyObjectResponse * soap_get__ns1__CopyObjectResponse(struct soap*, _ns1__CopyObjectResponse *, const char*, const char*);






 _ns1__CopyObjectResponse * soap_instantiate__ns1__CopyObjectResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__CopyObjectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__CopyObject(struct soap*, const char*, int, const _ns1__CopyObject *, const char*);
 _ns1__CopyObject * soap_in__ns1__CopyObject(struct soap*, const char*, _ns1__CopyObject *, const char*);






 _ns1__CopyObject * soap_get__ns1__CopyObject(struct soap*, _ns1__CopyObject *, const char*, const char*);






 _ns1__CopyObject * soap_instantiate__ns1__CopyObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__CopyObject(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__PostResponse(struct soap*, const char*, int, const _ns1__PostResponse *, const char*);
 _ns1__PostResponse * soap_in__ns1__PostResponse(struct soap*, const char*, _ns1__PostResponse *, const char*);






 _ns1__PostResponse * soap_get__ns1__PostResponse(struct soap*, _ns1__PostResponse *, const char*, const char*);






 _ns1__PostResponse * soap_instantiate__ns1__PostResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__PostResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__ListAllMyBucketsResponse(struct soap*, const char*, int, const _ns1__ListAllMyBucketsResponse *, const char*);
 _ns1__ListAllMyBucketsResponse * soap_in__ns1__ListAllMyBucketsResponse(struct soap*, const char*, _ns1__ListAllMyBucketsResponse *, const char*);






 _ns1__ListAllMyBucketsResponse * soap_get__ns1__ListAllMyBucketsResponse(struct soap*, _ns1__ListAllMyBucketsResponse *, const char*, const char*);






 _ns1__ListAllMyBucketsResponse * soap_instantiate__ns1__ListAllMyBucketsResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__ListAllMyBucketsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__ListAllMyBuckets(struct soap*, const char*, int, const _ns1__ListAllMyBuckets *, const char*);
 _ns1__ListAllMyBuckets * soap_in__ns1__ListAllMyBuckets(struct soap*, const char*, _ns1__ListAllMyBuckets *, const char*);






 _ns1__ListAllMyBuckets * soap_get__ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets *, const char*, const char*);






 _ns1__ListAllMyBuckets * soap_instantiate__ns1__ListAllMyBuckets(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__ListAllMyBuckets(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__ListBucketResponse(struct soap*, const char*, int, const _ns1__ListBucketResponse *, const char*);
 _ns1__ListBucketResponse * soap_in__ns1__ListBucketResponse(struct soap*, const char*, _ns1__ListBucketResponse *, const char*);






 _ns1__ListBucketResponse * soap_get__ns1__ListBucketResponse(struct soap*, _ns1__ListBucketResponse *, const char*, const char*);






 _ns1__ListBucketResponse * soap_instantiate__ns1__ListBucketResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__ListBucketResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__ListBucket(struct soap*, const char*, int, const _ns1__ListBucket *, const char*);
 _ns1__ListBucket * soap_in__ns1__ListBucket(struct soap*, const char*, _ns1__ListBucket *, const char*);






 _ns1__ListBucket * soap_get__ns1__ListBucket(struct soap*, _ns1__ListBucket *, const char*, const char*);






 _ns1__ListBucket * soap_instantiate__ns1__ListBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__ListBucket(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__DeleteObjectResponse(struct soap*, const char*, int, const _ns1__DeleteObjectResponse *, const char*);
 _ns1__DeleteObjectResponse * soap_in__ns1__DeleteObjectResponse(struct soap*, const char*, _ns1__DeleteObjectResponse *, const char*);






 _ns1__DeleteObjectResponse * soap_get__ns1__DeleteObjectResponse(struct soap*, _ns1__DeleteObjectResponse *, const char*, const char*);






 _ns1__DeleteObjectResponse * soap_instantiate__ns1__DeleteObjectResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__DeleteObjectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__DeleteObject(struct soap*, const char*, int, const _ns1__DeleteObject *, const char*);
 _ns1__DeleteObject * soap_in__ns1__DeleteObject(struct soap*, const char*, _ns1__DeleteObject *, const char*);






 _ns1__DeleteObject * soap_get__ns1__DeleteObject(struct soap*, _ns1__DeleteObject *, const char*, const char*);






 _ns1__DeleteObject * soap_instantiate__ns1__DeleteObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__DeleteObject(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__PutObjectInlineResponse(struct soap*, const char*, int, const _ns1__PutObjectInlineResponse *, const char*);
 _ns1__PutObjectInlineResponse * soap_in__ns1__PutObjectInlineResponse(struct soap*, const char*, _ns1__PutObjectInlineResponse *, const char*);






 _ns1__PutObjectInlineResponse * soap_get__ns1__PutObjectInlineResponse(struct soap*, _ns1__PutObjectInlineResponse *, const char*, const char*);






 _ns1__PutObjectInlineResponse * soap_instantiate__ns1__PutObjectInlineResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__PutObjectInlineResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__PutObjectInline(struct soap*, const char*, int, const _ns1__PutObjectInline *, const char*);
 _ns1__PutObjectInline * soap_in__ns1__PutObjectInline(struct soap*, const char*, _ns1__PutObjectInline *, const char*);






 _ns1__PutObjectInline * soap_get__ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline *, const char*, const char*);






 _ns1__PutObjectInline * soap_instantiate__ns1__PutObjectInline(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__PutObjectInline(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__PutObjectResponse(struct soap*, const char*, int, const _ns1__PutObjectResponse *, const char*);
 _ns1__PutObjectResponse * soap_in__ns1__PutObjectResponse(struct soap*, const char*, _ns1__PutObjectResponse *, const char*);






 _ns1__PutObjectResponse * soap_get__ns1__PutObjectResponse(struct soap*, _ns1__PutObjectResponse *, const char*, const char*);






 _ns1__PutObjectResponse * soap_instantiate__ns1__PutObjectResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__PutObjectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__PutObject(struct soap*, const char*, int, const _ns1__PutObject *, const char*);
 _ns1__PutObject * soap_in__ns1__PutObject(struct soap*, const char*, _ns1__PutObject *, const char*);






 _ns1__PutObject * soap_get__ns1__PutObject(struct soap*, _ns1__PutObject *, const char*, const char*);






 _ns1__PutObject * soap_instantiate__ns1__PutObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__PutObject(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObjectExtendedResponse(struct soap*, const char*, int, const _ns1__GetObjectExtendedResponse *, const char*);
 _ns1__GetObjectExtendedResponse * soap_in__ns1__GetObjectExtendedResponse(struct soap*, const char*, _ns1__GetObjectExtendedResponse *, const char*);






 _ns1__GetObjectExtendedResponse * soap_get__ns1__GetObjectExtendedResponse(struct soap*, _ns1__GetObjectExtendedResponse *, const char*, const char*);






 _ns1__GetObjectExtendedResponse * soap_instantiate__ns1__GetObjectExtendedResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObjectExtendedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObjectExtended(struct soap*, const char*, int, const _ns1__GetObjectExtended *, const char*);
 _ns1__GetObjectExtended * soap_in__ns1__GetObjectExtended(struct soap*, const char*, _ns1__GetObjectExtended *, const char*);






 _ns1__GetObjectExtended * soap_get__ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended *, const char*, const char*);






 _ns1__GetObjectExtended * soap_instantiate__ns1__GetObjectExtended(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObjectExtended(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObjectResponse(struct soap*, const char*, int, const _ns1__GetObjectResponse *, const char*);
 _ns1__GetObjectResponse * soap_in__ns1__GetObjectResponse(struct soap*, const char*, _ns1__GetObjectResponse *, const char*);






 _ns1__GetObjectResponse * soap_get__ns1__GetObjectResponse(struct soap*, _ns1__GetObjectResponse *, const char*, const char*);






 _ns1__GetObjectResponse * soap_instantiate__ns1__GetObjectResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObjectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObject(struct soap*, const char*, int, const _ns1__GetObject *, const char*);
 _ns1__GetObject * soap_in__ns1__GetObject(struct soap*, const char*, _ns1__GetObject *, const char*);






 _ns1__GetObject * soap_get__ns1__GetObject(struct soap*, _ns1__GetObject *, const char*, const char*);






 _ns1__GetObject * soap_instantiate__ns1__GetObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObject(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetBucketAccessControlPolicyResponse(struct soap*, const char*, int, const _ns1__SetBucketAccessControlPolicyResponse *, const char*);
 _ns1__SetBucketAccessControlPolicyResponse * soap_in__ns1__SetBucketAccessControlPolicyResponse(struct soap*, const char*, _ns1__SetBucketAccessControlPolicyResponse *, const char*);






 _ns1__SetBucketAccessControlPolicyResponse * soap_get__ns1__SetBucketAccessControlPolicyResponse(struct soap*, _ns1__SetBucketAccessControlPolicyResponse *, const char*, const char*);






 _ns1__SetBucketAccessControlPolicyResponse * soap_instantiate__ns1__SetBucketAccessControlPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetBucketAccessControlPolicyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetBucketAccessControlPolicy(struct soap*, const char*, int, const _ns1__SetBucketAccessControlPolicy *, const char*);
 _ns1__SetBucketAccessControlPolicy * soap_in__ns1__SetBucketAccessControlPolicy(struct soap*, const char*, _ns1__SetBucketAccessControlPolicy *, const char*);






 _ns1__SetBucketAccessControlPolicy * soap_get__ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy *, const char*, const char*);






 _ns1__SetBucketAccessControlPolicy * soap_instantiate__ns1__SetBucketAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetBucketAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetObjectAccessControlPolicyResponse(struct soap*, const char*, int, const _ns1__SetObjectAccessControlPolicyResponse *, const char*);
 _ns1__SetObjectAccessControlPolicyResponse * soap_in__ns1__SetObjectAccessControlPolicyResponse(struct soap*, const char*, _ns1__SetObjectAccessControlPolicyResponse *, const char*);






 _ns1__SetObjectAccessControlPolicyResponse * soap_get__ns1__SetObjectAccessControlPolicyResponse(struct soap*, _ns1__SetObjectAccessControlPolicyResponse *, const char*, const char*);






 _ns1__SetObjectAccessControlPolicyResponse * soap_instantiate__ns1__SetObjectAccessControlPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetObjectAccessControlPolicyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetObjectAccessControlPolicy(struct soap*, const char*, int, const _ns1__SetObjectAccessControlPolicy *, const char*);
 _ns1__SetObjectAccessControlPolicy * soap_in__ns1__SetObjectAccessControlPolicy(struct soap*, const char*, _ns1__SetObjectAccessControlPolicy *, const char*);






 _ns1__SetObjectAccessControlPolicy * soap_get__ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy *, const char*, const char*);






 _ns1__SetObjectAccessControlPolicy * soap_instantiate__ns1__SetObjectAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetObjectAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetBucketAccessControlPolicyResponse(struct soap*, const char*, int, const _ns1__GetBucketAccessControlPolicyResponse *, const char*);
 _ns1__GetBucketAccessControlPolicyResponse * soap_in__ns1__GetBucketAccessControlPolicyResponse(struct soap*, const char*, _ns1__GetBucketAccessControlPolicyResponse *, const char*);






 _ns1__GetBucketAccessControlPolicyResponse * soap_get__ns1__GetBucketAccessControlPolicyResponse(struct soap*, _ns1__GetBucketAccessControlPolicyResponse *, const char*, const char*);






 _ns1__GetBucketAccessControlPolicyResponse * soap_instantiate__ns1__GetBucketAccessControlPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetBucketAccessControlPolicyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetBucketAccessControlPolicy(struct soap*, const char*, int, const _ns1__GetBucketAccessControlPolicy *, const char*);
 _ns1__GetBucketAccessControlPolicy * soap_in__ns1__GetBucketAccessControlPolicy(struct soap*, const char*, _ns1__GetBucketAccessControlPolicy *, const char*);






 _ns1__GetBucketAccessControlPolicy * soap_get__ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy *, const char*, const char*);






 _ns1__GetBucketAccessControlPolicy * soap_instantiate__ns1__GetBucketAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetBucketAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObjectAccessControlPolicyResponse(struct soap*, const char*, int, const _ns1__GetObjectAccessControlPolicyResponse *, const char*);
 _ns1__GetObjectAccessControlPolicyResponse * soap_in__ns1__GetObjectAccessControlPolicyResponse(struct soap*, const char*, _ns1__GetObjectAccessControlPolicyResponse *, const char*);






 _ns1__GetObjectAccessControlPolicyResponse * soap_get__ns1__GetObjectAccessControlPolicyResponse(struct soap*, _ns1__GetObjectAccessControlPolicyResponse *, const char*, const char*);






 _ns1__GetObjectAccessControlPolicyResponse * soap_instantiate__ns1__GetObjectAccessControlPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObjectAccessControlPolicyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetObjectAccessControlPolicy(struct soap*, const char*, int, const _ns1__GetObjectAccessControlPolicy *, const char*);
 _ns1__GetObjectAccessControlPolicy * soap_in__ns1__GetObjectAccessControlPolicy(struct soap*, const char*, _ns1__GetObjectAccessControlPolicy *, const char*);






 _ns1__GetObjectAccessControlPolicy * soap_get__ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy *, const char*, const char*);






 _ns1__GetObjectAccessControlPolicy * soap_instantiate__ns1__GetObjectAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetObjectAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetBucketLoggingStatusResponse(struct soap*, const char*, int, const _ns1__SetBucketLoggingStatusResponse *, const char*);
 _ns1__SetBucketLoggingStatusResponse * soap_in__ns1__SetBucketLoggingStatusResponse(struct soap*, const char*, _ns1__SetBucketLoggingStatusResponse *, const char*);






 _ns1__SetBucketLoggingStatusResponse * soap_get__ns1__SetBucketLoggingStatusResponse(struct soap*, _ns1__SetBucketLoggingStatusResponse *, const char*, const char*);






 _ns1__SetBucketLoggingStatusResponse * soap_instantiate__ns1__SetBucketLoggingStatusResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetBucketLoggingStatusResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__SetBucketLoggingStatus(struct soap*, const char*, int, const _ns1__SetBucketLoggingStatus *, const char*);
 _ns1__SetBucketLoggingStatus * soap_in__ns1__SetBucketLoggingStatus(struct soap*, const char*, _ns1__SetBucketLoggingStatus *, const char*);






 _ns1__SetBucketLoggingStatus * soap_get__ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus *, const char*, const char*);






 _ns1__SetBucketLoggingStatus * soap_instantiate__ns1__SetBucketLoggingStatus(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__SetBucketLoggingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetBucketLoggingStatusResponse(struct soap*, const char*, int, const _ns1__GetBucketLoggingStatusResponse *, const char*);
 _ns1__GetBucketLoggingStatusResponse * soap_in__ns1__GetBucketLoggingStatusResponse(struct soap*, const char*, _ns1__GetBucketLoggingStatusResponse *, const char*);






 _ns1__GetBucketLoggingStatusResponse * soap_get__ns1__GetBucketLoggingStatusResponse(struct soap*, _ns1__GetBucketLoggingStatusResponse *, const char*, const char*);






 _ns1__GetBucketLoggingStatusResponse * soap_instantiate__ns1__GetBucketLoggingStatusResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetBucketLoggingStatusResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__GetBucketLoggingStatus(struct soap*, const char*, int, const _ns1__GetBucketLoggingStatus *, const char*);
 _ns1__GetBucketLoggingStatus * soap_in__ns1__GetBucketLoggingStatus(struct soap*, const char*, _ns1__GetBucketLoggingStatus *, const char*);






 _ns1__GetBucketLoggingStatus * soap_get__ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus *, const char*, const char*);






 _ns1__GetBucketLoggingStatus * soap_instantiate__ns1__GetBucketLoggingStatus(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__GetBucketLoggingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__DeleteBucketResponse(struct soap*, const char*, int, const _ns1__DeleteBucketResponse *, const char*);
 _ns1__DeleteBucketResponse * soap_in__ns1__DeleteBucketResponse(struct soap*, const char*, _ns1__DeleteBucketResponse *, const char*);






 _ns1__DeleteBucketResponse * soap_get__ns1__DeleteBucketResponse(struct soap*, _ns1__DeleteBucketResponse *, const char*, const char*);






 _ns1__DeleteBucketResponse * soap_instantiate__ns1__DeleteBucketResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__DeleteBucketResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__DeleteBucket(struct soap*, const char*, int, const _ns1__DeleteBucket *, const char*);
 _ns1__DeleteBucket * soap_in__ns1__DeleteBucket(struct soap*, const char*, _ns1__DeleteBucket *, const char*);






 _ns1__DeleteBucket * soap_get__ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket *, const char*, const char*);






 _ns1__DeleteBucket * soap_instantiate__ns1__DeleteBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__DeleteBucket(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__CreateBucketResponse(struct soap*, const char*, int, const _ns1__CreateBucketResponse *, const char*);
 _ns1__CreateBucketResponse * soap_in__ns1__CreateBucketResponse(struct soap*, const char*, _ns1__CreateBucketResponse *, const char*);






 _ns1__CreateBucketResponse * soap_get__ns1__CreateBucketResponse(struct soap*, _ns1__CreateBucketResponse *, const char*, const char*);






 _ns1__CreateBucketResponse * soap_instantiate__ns1__CreateBucketResponse(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__CreateBucketResponse(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out__ns1__CreateBucket(struct soap*, const char*, int, const _ns1__CreateBucket *, const char*);
 _ns1__CreateBucket * soap_in__ns1__CreateBucket(struct soap*, const char*, _ns1__CreateBucket *, const char*);






 _ns1__CreateBucket * soap_get__ns1__CreateBucket(struct soap*, _ns1__CreateBucket *, const char*, const char*);






 _ns1__CreateBucket * soap_instantiate__ns1__CreateBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy__ns1__CreateBucket(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__RequestPaymentConfiguration(struct soap*, const char*, int, const ns1__RequestPaymentConfiguration *, const char*);
 ns1__RequestPaymentConfiguration * soap_in_ns1__RequestPaymentConfiguration(struct soap*, const char*, ns1__RequestPaymentConfiguration *, const char*);






 ns1__RequestPaymentConfiguration * soap_get_ns1__RequestPaymentConfiguration(struct soap*, ns1__RequestPaymentConfiguration *, const char*, const char*);






 ns1__RequestPaymentConfiguration * soap_instantiate_ns1__RequestPaymentConfiguration(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__RequestPaymentConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__CopyObjectResult(struct soap*, const char*, int, const ns1__CopyObjectResult *, const char*);
 ns1__CopyObjectResult * soap_in_ns1__CopyObjectResult(struct soap*, const char*, ns1__CopyObjectResult *, const char*);






 ns1__CopyObjectResult * soap_get_ns1__CopyObjectResult(struct soap*, ns1__CopyObjectResult *, const char*, const char*);






 ns1__CopyObjectResult * soap_instantiate_ns1__CopyObjectResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__CopyObjectResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__ListAllMyBucketsList(struct soap*, const char*, int, const ns1__ListAllMyBucketsList *, const char*);
 ns1__ListAllMyBucketsList * soap_in_ns1__ListAllMyBucketsList(struct soap*, const char*, ns1__ListAllMyBucketsList *, const char*);






 ns1__ListAllMyBucketsList * soap_get_ns1__ListAllMyBucketsList(struct soap*, ns1__ListAllMyBucketsList *, const char*, const char*);






 ns1__ListAllMyBucketsList * soap_instantiate_ns1__ListAllMyBucketsList(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__ListAllMyBucketsList(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__ListAllMyBucketsResult(struct soap*, const char*, int, const ns1__ListAllMyBucketsResult *, const char*);
 ns1__ListAllMyBucketsResult * soap_in_ns1__ListAllMyBucketsResult(struct soap*, const char*, ns1__ListAllMyBucketsResult *, const char*);






 ns1__ListAllMyBucketsResult * soap_get_ns1__ListAllMyBucketsResult(struct soap*, ns1__ListAllMyBucketsResult *, const char*, const char*);






 ns1__ListAllMyBucketsResult * soap_instantiate_ns1__ListAllMyBucketsResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__ListAllMyBucketsResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__ListAllMyBucketsEntry(struct soap*, const char*, int, const ns1__ListAllMyBucketsEntry *, const char*);
 ns1__ListAllMyBucketsEntry * soap_in_ns1__ListAllMyBucketsEntry(struct soap*, const char*, ns1__ListAllMyBucketsEntry *, const char*);






 ns1__ListAllMyBucketsEntry * soap_get_ns1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry *, const char*, const char*);






 ns1__ListAllMyBucketsEntry * soap_instantiate_ns1__ListAllMyBucketsEntry(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__ListAllMyBucketsEntry(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__ListBucketResult(struct soap*, const char*, int, const ns1__ListBucketResult *, const char*);
 ns1__ListBucketResult * soap_in_ns1__ListBucketResult(struct soap*, const char*, ns1__ListBucketResult *, const char*);






 ns1__ListBucketResult * soap_get_ns1__ListBucketResult(struct soap*, ns1__ListBucketResult *, const char*, const char*);






 ns1__ListBucketResult * soap_instantiate_ns1__ListBucketResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__ListBucketResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__PrefixEntry(struct soap*, const char*, int, const ns1__PrefixEntry *, const char*);
 ns1__PrefixEntry * soap_in_ns1__PrefixEntry(struct soap*, const char*, ns1__PrefixEntry *, const char*);






 ns1__PrefixEntry * soap_get_ns1__PrefixEntry(struct soap*, ns1__PrefixEntry *, const char*, const char*);






 ns1__PrefixEntry * soap_instantiate_ns1__PrefixEntry(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__PrefixEntry(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__ListEntry(struct soap*, const char*, int, const ns1__ListEntry *, const char*);
 ns1__ListEntry * soap_in_ns1__ListEntry(struct soap*, const char*, ns1__ListEntry *, const char*);






 ns1__ListEntry * soap_get_ns1__ListEntry(struct soap*, ns1__ListEntry *, const char*, const char*);






 ns1__ListEntry * soap_instantiate_ns1__ListEntry(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__ListEntry(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__PutObjectResult(struct soap*, const char*, int, const ns1__PutObjectResult *, const char*);
 ns1__PutObjectResult * soap_in_ns1__PutObjectResult(struct soap*, const char*, ns1__PutObjectResult *, const char*);






 ns1__PutObjectResult * soap_get_ns1__PutObjectResult(struct soap*, ns1__PutObjectResult *, const char*, const char*);






 ns1__PutObjectResult * soap_instantiate_ns1__PutObjectResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__PutObjectResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__GetObjectResult(struct soap*, const char*, int, const ns1__GetObjectResult *, const char*);
 ns1__GetObjectResult * soap_in_ns1__GetObjectResult(struct soap*, const char*, ns1__GetObjectResult *, const char*);






 ns1__GetObjectResult * soap_get_ns1__GetObjectResult(struct soap*, ns1__GetObjectResult *, const char*, const char*);






 ns1__GetObjectResult * soap_instantiate_ns1__GetObjectResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__GetObjectResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__AccessControlPolicy(struct soap*, const char*, int, const ns1__AccessControlPolicy *, const char*);
 ns1__AccessControlPolicy * soap_in_ns1__AccessControlPolicy(struct soap*, const char*, ns1__AccessControlPolicy *, const char*);






 ns1__AccessControlPolicy * soap_get_ns1__AccessControlPolicy(struct soap*, ns1__AccessControlPolicy *, const char*, const char*);






 ns1__AccessControlPolicy * soap_instantiate_ns1__AccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__AccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__LocationConstraint(struct soap*, const char*, int, const ns1__LocationConstraint *, const char*);
 ns1__LocationConstraint * soap_in_ns1__LocationConstraint(struct soap*, const char*, ns1__LocationConstraint *, const char*);






 ns1__LocationConstraint * soap_get_ns1__LocationConstraint(struct soap*, ns1__LocationConstraint *, const char*, const char*);






 ns1__LocationConstraint * soap_instantiate_ns1__LocationConstraint(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__LocationConstraint(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__CreateBucketConfiguration(struct soap*, const char*, int, const ns1__CreateBucketConfiguration *, const char*);
 ns1__CreateBucketConfiguration * soap_in_ns1__CreateBucketConfiguration(struct soap*, const char*, ns1__CreateBucketConfiguration *, const char*);






 ns1__CreateBucketConfiguration * soap_get_ns1__CreateBucketConfiguration(struct soap*, ns1__CreateBucketConfiguration *, const char*, const char*);






 ns1__CreateBucketConfiguration * soap_instantiate_ns1__CreateBucketConfiguration(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__CreateBucketConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__AccessControlList(struct soap*, const char*, int, const ns1__AccessControlList *, const char*);
 ns1__AccessControlList * soap_in_ns1__AccessControlList(struct soap*, const char*, ns1__AccessControlList *, const char*);






 ns1__AccessControlList * soap_get_ns1__AccessControlList(struct soap*, ns1__AccessControlList *, const char*, const char*);






 ns1__AccessControlList * soap_instantiate_ns1__AccessControlList(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__AccessControlList(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__Grant(struct soap*, const char*, int, const ns1__Grant *, const char*);
 ns1__Grant * soap_in_ns1__Grant(struct soap*, const char*, ns1__Grant *, const char*);






 ns1__Grant * soap_get_ns1__Grant(struct soap*, ns1__Grant *, const char*, const char*);






 ns1__Grant * soap_instantiate_ns1__Grant(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__Grant(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__Group(struct soap*, const char*, int, const ns1__Group *, const char*);
 ns1__Group * soap_in_ns1__Group(struct soap*, const char*, ns1__Group *, const char*);






 ns1__Group * soap_get_ns1__Group(struct soap*, ns1__Group *, const char*, const char*);






 ns1__Group * soap_instantiate_ns1__Group(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__Group(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__CanonicalUser(struct soap*, const char*, int, const ns1__CanonicalUser *, const char*);
 ns1__CanonicalUser * soap_in_ns1__CanonicalUser(struct soap*, const char*, ns1__CanonicalUser *, const char*);






 ns1__CanonicalUser * soap_get_ns1__CanonicalUser(struct soap*, ns1__CanonicalUser *, const char*, const char*);






 ns1__CanonicalUser * soap_instantiate_ns1__CanonicalUser(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__CanonicalUser(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__AmazonCustomerByEmail(struct soap*, const char*, int, const ns1__AmazonCustomerByEmail *, const char*);
 ns1__AmazonCustomerByEmail * soap_in_ns1__AmazonCustomerByEmail(struct soap*, const char*, ns1__AmazonCustomerByEmail *, const char*);






 ns1__AmazonCustomerByEmail * soap_get_ns1__AmazonCustomerByEmail(struct soap*, ns1__AmazonCustomerByEmail *, const char*, const char*);






 ns1__AmazonCustomerByEmail * soap_instantiate_ns1__AmazonCustomerByEmail(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__AmazonCustomerByEmail(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__User(struct soap*, const char*, int, const ns1__User *, const char*);
 ns1__User * soap_in_ns1__User(struct soap*, const char*, ns1__User *, const char*);






 ns1__User * soap_get_ns1__User(struct soap*, ns1__User *, const char*, const char*);






 ns1__User * soap_instantiate_ns1__User(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__User(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__Grantee(struct soap*, const char*, int, const ns1__Grantee *, const char*);
 ns1__Grantee * soap_in_ns1__Grantee(struct soap*, const char*, ns1__Grantee *, const char*);






 ns1__Grantee * soap_get_ns1__Grantee(struct soap*, ns1__Grantee *, const char*, const char*);






 ns1__Grantee * soap_instantiate_ns1__Grantee(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__Grantee(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__LoggingSettings(struct soap*, const char*, int, const ns1__LoggingSettings *, const char*);
 ns1__LoggingSettings * soap_in_ns1__LoggingSettings(struct soap*, const char*, ns1__LoggingSettings *, const char*);






 ns1__LoggingSettings * soap_get_ns1__LoggingSettings(struct soap*, ns1__LoggingSettings *, const char*, const char*);






 ns1__LoggingSettings * soap_instantiate_ns1__LoggingSettings(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__LoggingSettings(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__BucketLoggingStatus(struct soap*, const char*, int, const ns1__BucketLoggingStatus *, const char*);
 ns1__BucketLoggingStatus * soap_in_ns1__BucketLoggingStatus(struct soap*, const char*, ns1__BucketLoggingStatus *, const char*);






 ns1__BucketLoggingStatus * soap_get_ns1__BucketLoggingStatus(struct soap*, ns1__BucketLoggingStatus *, const char*, const char*);






 ns1__BucketLoggingStatus * soap_instantiate_ns1__BucketLoggingStatus(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__BucketLoggingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__CreateBucketResult(struct soap*, const char*, int, const ns1__CreateBucketResult *, const char*);
 ns1__CreateBucketResult * soap_in_ns1__CreateBucketResult(struct soap*, const char*, ns1__CreateBucketResult *, const char*);






 ns1__CreateBucketResult * soap_get_ns1__CreateBucketResult(struct soap*, ns1__CreateBucketResult *, const char*, const char*);






 ns1__CreateBucketResult * soap_instantiate_ns1__CreateBucketResult(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__CreateBucketResult(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__Result(struct soap*, const char*, int, const ns1__Result *, const char*);
 ns1__Result * soap_in_ns1__Result(struct soap*, const char*, ns1__Result *, const char*);






 ns1__Result * soap_get_ns1__Result(struct soap*, ns1__Result *, const char*, const char*);






 ns1__Result * soap_instantiate_ns1__Result(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__Result(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__Status(struct soap*, const char*, int, const ns1__Status *, const char*);
 ns1__Status * soap_in_ns1__Status(struct soap*, const char*, ns1__Status *, const char*);






 ns1__Status * soap_get_ns1__Status(struct soap*, ns1__Status *, const char*, const char*);






 ns1__Status * soap_instantiate_ns1__Status(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__Status(struct soap*, int, int, void*, size_t, const void*, size_t);





 int soap_out_ns1__MetadataEntry(struct soap*, const char*, int, const ns1__MetadataEntry *, const char*);
 ns1__MetadataEntry * soap_in_ns1__MetadataEntry(struct soap*, const char*, ns1__MetadataEntry *, const char*);






 ns1__MetadataEntry * soap_get_ns1__MetadataEntry(struct soap*, ns1__MetadataEntry *, const char*, const char*);






 ns1__MetadataEntry * soap_instantiate_ns1__MetadataEntry(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_ns1__MetadataEntry(struct soap*, int, int, void*, size_t, const void*, size_t);




 int soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
 xsd__base64Binary * soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);






 xsd__base64Binary * soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);






 xsd__base64Binary * soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);
# 1689 "../../AmazonS3/eternusH.h"
 void soap_default___ns1__CopyObject(struct soap*, struct __ns1__CopyObject *);
 void soap_serialize___ns1__CopyObject(struct soap*, const struct __ns1__CopyObject *);
 int soap_out___ns1__CopyObject(struct soap*, const char*, int, const struct __ns1__CopyObject *, const char*);
 struct __ns1__CopyObject * soap_in___ns1__CopyObject(struct soap*, const char*, struct __ns1__CopyObject *, const char*);




 int soap_put___ns1__CopyObject(struct soap*, const struct __ns1__CopyObject *, const char*, const char*);



 struct __ns1__CopyObject * soap_get___ns1__CopyObject(struct soap*, struct __ns1__CopyObject *, const char*, const char*);






 struct __ns1__CopyObject * soap_instantiate___ns1__CopyObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__CopyObject(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__GetBucketLoggingStatus(struct soap*, struct __ns1__GetBucketLoggingStatus *);
 void soap_serialize___ns1__GetBucketLoggingStatus(struct soap*, const struct __ns1__GetBucketLoggingStatus *);
 int soap_out___ns1__GetBucketLoggingStatus(struct soap*, const char*, int, const struct __ns1__GetBucketLoggingStatus *, const char*);
 struct __ns1__GetBucketLoggingStatus * soap_in___ns1__GetBucketLoggingStatus(struct soap*, const char*, struct __ns1__GetBucketLoggingStatus *, const char*);




 int soap_put___ns1__GetBucketLoggingStatus(struct soap*, const struct __ns1__GetBucketLoggingStatus *, const char*, const char*);



 struct __ns1__GetBucketLoggingStatus * soap_get___ns1__GetBucketLoggingStatus(struct soap*, struct __ns1__GetBucketLoggingStatus *, const char*, const char*);






 struct __ns1__GetBucketLoggingStatus * soap_instantiate___ns1__GetBucketLoggingStatus(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__GetBucketLoggingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__SetBucketLoggingStatus(struct soap*, struct __ns1__SetBucketLoggingStatus *);
 void soap_serialize___ns1__SetBucketLoggingStatus(struct soap*, const struct __ns1__SetBucketLoggingStatus *);
 int soap_out___ns1__SetBucketLoggingStatus(struct soap*, const char*, int, const struct __ns1__SetBucketLoggingStatus *, const char*);
 struct __ns1__SetBucketLoggingStatus * soap_in___ns1__SetBucketLoggingStatus(struct soap*, const char*, struct __ns1__SetBucketLoggingStatus *, const char*);




 int soap_put___ns1__SetBucketLoggingStatus(struct soap*, const struct __ns1__SetBucketLoggingStatus *, const char*, const char*);



 struct __ns1__SetBucketLoggingStatus * soap_get___ns1__SetBucketLoggingStatus(struct soap*, struct __ns1__SetBucketLoggingStatus *, const char*, const char*);






 struct __ns1__SetBucketLoggingStatus * soap_instantiate___ns1__SetBucketLoggingStatus(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__SetBucketLoggingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__ListAllMyBuckets(struct soap*, struct __ns1__ListAllMyBuckets *);
 void soap_serialize___ns1__ListAllMyBuckets(struct soap*, const struct __ns1__ListAllMyBuckets *);
 int soap_out___ns1__ListAllMyBuckets(struct soap*, const char*, int, const struct __ns1__ListAllMyBuckets *, const char*);
 struct __ns1__ListAllMyBuckets * soap_in___ns1__ListAllMyBuckets(struct soap*, const char*, struct __ns1__ListAllMyBuckets *, const char*);




 int soap_put___ns1__ListAllMyBuckets(struct soap*, const struct __ns1__ListAllMyBuckets *, const char*, const char*);



 struct __ns1__ListAllMyBuckets * soap_get___ns1__ListAllMyBuckets(struct soap*, struct __ns1__ListAllMyBuckets *, const char*, const char*);






 struct __ns1__ListAllMyBuckets * soap_instantiate___ns1__ListAllMyBuckets(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__ListAllMyBuckets(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__ListBucket(struct soap*, struct __ns1__ListBucket *);
 void soap_serialize___ns1__ListBucket(struct soap*, const struct __ns1__ListBucket *);
 int soap_out___ns1__ListBucket(struct soap*, const char*, int, const struct __ns1__ListBucket *, const char*);
 struct __ns1__ListBucket * soap_in___ns1__ListBucket(struct soap*, const char*, struct __ns1__ListBucket *, const char*);




 int soap_put___ns1__ListBucket(struct soap*, const struct __ns1__ListBucket *, const char*, const char*);



 struct __ns1__ListBucket * soap_get___ns1__ListBucket(struct soap*, struct __ns1__ListBucket *, const char*, const char*);






 struct __ns1__ListBucket * soap_instantiate___ns1__ListBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__ListBucket(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__DeleteObject(struct soap*, struct __ns1__DeleteObject *);
 void soap_serialize___ns1__DeleteObject(struct soap*, const struct __ns1__DeleteObject *);
 int soap_out___ns1__DeleteObject(struct soap*, const char*, int, const struct __ns1__DeleteObject *, const char*);
 struct __ns1__DeleteObject * soap_in___ns1__DeleteObject(struct soap*, const char*, struct __ns1__DeleteObject *, const char*);




 int soap_put___ns1__DeleteObject(struct soap*, const struct __ns1__DeleteObject *, const char*, const char*);



 struct __ns1__DeleteObject * soap_get___ns1__DeleteObject(struct soap*, struct __ns1__DeleteObject *, const char*, const char*);






 struct __ns1__DeleteObject * soap_instantiate___ns1__DeleteObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__DeleteObject(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__PutObjectInline(struct soap*, struct __ns1__PutObjectInline *);
 void soap_serialize___ns1__PutObjectInline(struct soap*, const struct __ns1__PutObjectInline *);
 int soap_out___ns1__PutObjectInline(struct soap*, const char*, int, const struct __ns1__PutObjectInline *, const char*);
 struct __ns1__PutObjectInline * soap_in___ns1__PutObjectInline(struct soap*, const char*, struct __ns1__PutObjectInline *, const char*);




 int soap_put___ns1__PutObjectInline(struct soap*, const struct __ns1__PutObjectInline *, const char*, const char*);



 struct __ns1__PutObjectInline * soap_get___ns1__PutObjectInline(struct soap*, struct __ns1__PutObjectInline *, const char*, const char*);






 struct __ns1__PutObjectInline * soap_instantiate___ns1__PutObjectInline(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__PutObjectInline(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__PutObject(struct soap*, struct __ns1__PutObject *);
 void soap_serialize___ns1__PutObject(struct soap*, const struct __ns1__PutObject *);
 int soap_out___ns1__PutObject(struct soap*, const char*, int, const struct __ns1__PutObject *, const char*);
 struct __ns1__PutObject * soap_in___ns1__PutObject(struct soap*, const char*, struct __ns1__PutObject *, const char*);




 int soap_put___ns1__PutObject(struct soap*, const struct __ns1__PutObject *, const char*, const char*);



 struct __ns1__PutObject * soap_get___ns1__PutObject(struct soap*, struct __ns1__PutObject *, const char*, const char*);






 struct __ns1__PutObject * soap_instantiate___ns1__PutObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__PutObject(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__GetObjectExtended(struct soap*, struct __ns1__GetObjectExtended *);
 void soap_serialize___ns1__GetObjectExtended(struct soap*, const struct __ns1__GetObjectExtended *);
 int soap_out___ns1__GetObjectExtended(struct soap*, const char*, int, const struct __ns1__GetObjectExtended *, const char*);
 struct __ns1__GetObjectExtended * soap_in___ns1__GetObjectExtended(struct soap*, const char*, struct __ns1__GetObjectExtended *, const char*);




 int soap_put___ns1__GetObjectExtended(struct soap*, const struct __ns1__GetObjectExtended *, const char*, const char*);



 struct __ns1__GetObjectExtended * soap_get___ns1__GetObjectExtended(struct soap*, struct __ns1__GetObjectExtended *, const char*, const char*);






 struct __ns1__GetObjectExtended * soap_instantiate___ns1__GetObjectExtended(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__GetObjectExtended(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__GetObject(struct soap*, struct __ns1__GetObject *);
 void soap_serialize___ns1__GetObject(struct soap*, const struct __ns1__GetObject *);
 int soap_out___ns1__GetObject(struct soap*, const char*, int, const struct __ns1__GetObject *, const char*);
 struct __ns1__GetObject * soap_in___ns1__GetObject(struct soap*, const char*, struct __ns1__GetObject *, const char*);




 int soap_put___ns1__GetObject(struct soap*, const struct __ns1__GetObject *, const char*, const char*);



 struct __ns1__GetObject * soap_get___ns1__GetObject(struct soap*, struct __ns1__GetObject *, const char*, const char*);






 struct __ns1__GetObject * soap_instantiate___ns1__GetObject(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__GetObject(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__SetBucketAccessControlPolicy(struct soap*, struct __ns1__SetBucketAccessControlPolicy *);
 void soap_serialize___ns1__SetBucketAccessControlPolicy(struct soap*, const struct __ns1__SetBucketAccessControlPolicy *);
 int soap_out___ns1__SetBucketAccessControlPolicy(struct soap*, const char*, int, const struct __ns1__SetBucketAccessControlPolicy *, const char*);
 struct __ns1__SetBucketAccessControlPolicy * soap_in___ns1__SetBucketAccessControlPolicy(struct soap*, const char*, struct __ns1__SetBucketAccessControlPolicy *, const char*);




 int soap_put___ns1__SetBucketAccessControlPolicy(struct soap*, const struct __ns1__SetBucketAccessControlPolicy *, const char*, const char*);



 struct __ns1__SetBucketAccessControlPolicy * soap_get___ns1__SetBucketAccessControlPolicy(struct soap*, struct __ns1__SetBucketAccessControlPolicy *, const char*, const char*);






 struct __ns1__SetBucketAccessControlPolicy * soap_instantiate___ns1__SetBucketAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__SetBucketAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__SetObjectAccessControlPolicy(struct soap*, struct __ns1__SetObjectAccessControlPolicy *);
 void soap_serialize___ns1__SetObjectAccessControlPolicy(struct soap*, const struct __ns1__SetObjectAccessControlPolicy *);
 int soap_out___ns1__SetObjectAccessControlPolicy(struct soap*, const char*, int, const struct __ns1__SetObjectAccessControlPolicy *, const char*);
 struct __ns1__SetObjectAccessControlPolicy * soap_in___ns1__SetObjectAccessControlPolicy(struct soap*, const char*, struct __ns1__SetObjectAccessControlPolicy *, const char*);




 int soap_put___ns1__SetObjectAccessControlPolicy(struct soap*, const struct __ns1__SetObjectAccessControlPolicy *, const char*, const char*);



 struct __ns1__SetObjectAccessControlPolicy * soap_get___ns1__SetObjectAccessControlPolicy(struct soap*, struct __ns1__SetObjectAccessControlPolicy *, const char*, const char*);






 struct __ns1__SetObjectAccessControlPolicy * soap_instantiate___ns1__SetObjectAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__SetObjectAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__GetBucketAccessControlPolicy(struct soap*, struct __ns1__GetBucketAccessControlPolicy *);
 void soap_serialize___ns1__GetBucketAccessControlPolicy(struct soap*, const struct __ns1__GetBucketAccessControlPolicy *);
 int soap_out___ns1__GetBucketAccessControlPolicy(struct soap*, const char*, int, const struct __ns1__GetBucketAccessControlPolicy *, const char*);
 struct __ns1__GetBucketAccessControlPolicy * soap_in___ns1__GetBucketAccessControlPolicy(struct soap*, const char*, struct __ns1__GetBucketAccessControlPolicy *, const char*);




 int soap_put___ns1__GetBucketAccessControlPolicy(struct soap*, const struct __ns1__GetBucketAccessControlPolicy *, const char*, const char*);



 struct __ns1__GetBucketAccessControlPolicy * soap_get___ns1__GetBucketAccessControlPolicy(struct soap*, struct __ns1__GetBucketAccessControlPolicy *, const char*, const char*);






 struct __ns1__GetBucketAccessControlPolicy * soap_instantiate___ns1__GetBucketAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__GetBucketAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__GetObjectAccessControlPolicy(struct soap*, struct __ns1__GetObjectAccessControlPolicy *);
 void soap_serialize___ns1__GetObjectAccessControlPolicy(struct soap*, const struct __ns1__GetObjectAccessControlPolicy *);
 int soap_out___ns1__GetObjectAccessControlPolicy(struct soap*, const char*, int, const struct __ns1__GetObjectAccessControlPolicy *, const char*);
 struct __ns1__GetObjectAccessControlPolicy * soap_in___ns1__GetObjectAccessControlPolicy(struct soap*, const char*, struct __ns1__GetObjectAccessControlPolicy *, const char*);




 int soap_put___ns1__GetObjectAccessControlPolicy(struct soap*, const struct __ns1__GetObjectAccessControlPolicy *, const char*, const char*);



 struct __ns1__GetObjectAccessControlPolicy * soap_get___ns1__GetObjectAccessControlPolicy(struct soap*, struct __ns1__GetObjectAccessControlPolicy *, const char*, const char*);






 struct __ns1__GetObjectAccessControlPolicy * soap_instantiate___ns1__GetObjectAccessControlPolicy(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__GetObjectAccessControlPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__DeleteBucket(struct soap*, struct __ns1__DeleteBucket *);
 void soap_serialize___ns1__DeleteBucket(struct soap*, const struct __ns1__DeleteBucket *);
 int soap_out___ns1__DeleteBucket(struct soap*, const char*, int, const struct __ns1__DeleteBucket *, const char*);
 struct __ns1__DeleteBucket * soap_in___ns1__DeleteBucket(struct soap*, const char*, struct __ns1__DeleteBucket *, const char*);




 int soap_put___ns1__DeleteBucket(struct soap*, const struct __ns1__DeleteBucket *, const char*, const char*);



 struct __ns1__DeleteBucket * soap_get___ns1__DeleteBucket(struct soap*, struct __ns1__DeleteBucket *, const char*, const char*);






 struct __ns1__DeleteBucket * soap_instantiate___ns1__DeleteBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__DeleteBucket(struct soap*, int, int, void*, size_t, const void*, size_t);




 void soap_default___ns1__CreateBucket(struct soap*, struct __ns1__CreateBucket *);
 void soap_serialize___ns1__CreateBucket(struct soap*, const struct __ns1__CreateBucket *);
 int soap_out___ns1__CreateBucket(struct soap*, const char*, int, const struct __ns1__CreateBucket *, const char*);
 struct __ns1__CreateBucket * soap_in___ns1__CreateBucket(struct soap*, const char*, struct __ns1__CreateBucket *, const char*);




 int soap_put___ns1__CreateBucket(struct soap*, const struct __ns1__CreateBucket *, const char*, const char*);



 struct __ns1__CreateBucket * soap_get___ns1__CreateBucket(struct soap*, struct __ns1__CreateBucket *, const char*, const char*);






 struct __ns1__CreateBucket * soap_instantiate___ns1__CreateBucket(struct soap*, int, const char*, const char*, size_t*);
 void soap_copy___ns1__CreateBucket(struct soap*, int, int, void*, size_t, const void*, size_t);
# 2146 "../../AmazonS3/eternusH.h"
 void soap_serialize_PointerTo_ns1__CopyObjectResponse(struct soap*, _ns1__CopyObjectResponse *const*);
 int soap_out_PointerTo_ns1__CopyObjectResponse(struct soap*, const char *, int, _ns1__CopyObjectResponse *const*, const char *);
 _ns1__CopyObjectResponse ** soap_in_PointerTo_ns1__CopyObjectResponse(struct soap*, const char*, _ns1__CopyObjectResponse **, const char*);



 int soap_put_PointerTo_ns1__CopyObjectResponse(struct soap*, _ns1__CopyObjectResponse *const*, const char*, const char*);



 _ns1__CopyObjectResponse ** soap_get_PointerTo_ns1__CopyObjectResponse(struct soap*, _ns1__CopyObjectResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__CopyObject(struct soap*, _ns1__CopyObject *const*);
 int soap_out_PointerTo_ns1__CopyObject(struct soap*, const char *, int, _ns1__CopyObject *const*, const char *);
 _ns1__CopyObject ** soap_in_PointerTo_ns1__CopyObject(struct soap*, const char*, _ns1__CopyObject **, const char*);



 int soap_put_PointerTo_ns1__CopyObject(struct soap*, _ns1__CopyObject *const*, const char*, const char*);



 _ns1__CopyObject ** soap_get_PointerTo_ns1__CopyObject(struct soap*, _ns1__CopyObject **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap*, _ns1__GetBucketLoggingStatusResponse *const*);
 int soap_out_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap*, const char *, int, _ns1__GetBucketLoggingStatusResponse *const*, const char *);
 _ns1__GetBucketLoggingStatusResponse ** soap_in_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap*, const char*, _ns1__GetBucketLoggingStatusResponse **, const char*);



 int soap_put_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap*, _ns1__GetBucketLoggingStatusResponse *const*, const char*, const char*);



 _ns1__GetBucketLoggingStatusResponse ** soap_get_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap*, _ns1__GetBucketLoggingStatusResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus *const*);
 int soap_out_PointerTo_ns1__GetBucketLoggingStatus(struct soap*, const char *, int, _ns1__GetBucketLoggingStatus *const*, const char *);
 _ns1__GetBucketLoggingStatus ** soap_in_PointerTo_ns1__GetBucketLoggingStatus(struct soap*, const char*, _ns1__GetBucketLoggingStatus **, const char*);



 int soap_put_PointerTo_ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus *const*, const char*, const char*);



 _ns1__GetBucketLoggingStatus ** soap_get_PointerTo_ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap*, _ns1__SetBucketLoggingStatusResponse *const*);
 int soap_out_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap*, const char *, int, _ns1__SetBucketLoggingStatusResponse *const*, const char *);
 _ns1__SetBucketLoggingStatusResponse ** soap_in_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap*, const char*, _ns1__SetBucketLoggingStatusResponse **, const char*);



 int soap_put_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap*, _ns1__SetBucketLoggingStatusResponse *const*, const char*, const char*);



 _ns1__SetBucketLoggingStatusResponse ** soap_get_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap*, _ns1__SetBucketLoggingStatusResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus *const*);
 int soap_out_PointerTo_ns1__SetBucketLoggingStatus(struct soap*, const char *, int, _ns1__SetBucketLoggingStatus *const*, const char *);
 _ns1__SetBucketLoggingStatus ** soap_in_PointerTo_ns1__SetBucketLoggingStatus(struct soap*, const char*, _ns1__SetBucketLoggingStatus **, const char*);



 int soap_put_PointerTo_ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus *const*, const char*, const char*);



 _ns1__SetBucketLoggingStatus ** soap_get_PointerTo_ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__ListAllMyBucketsResponse(struct soap*, _ns1__ListAllMyBucketsResponse *const*);
 int soap_out_PointerTo_ns1__ListAllMyBucketsResponse(struct soap*, const char *, int, _ns1__ListAllMyBucketsResponse *const*, const char *);
 _ns1__ListAllMyBucketsResponse ** soap_in_PointerTo_ns1__ListAllMyBucketsResponse(struct soap*, const char*, _ns1__ListAllMyBucketsResponse **, const char*);



 int soap_put_PointerTo_ns1__ListAllMyBucketsResponse(struct soap*, _ns1__ListAllMyBucketsResponse *const*, const char*, const char*);



 _ns1__ListAllMyBucketsResponse ** soap_get_PointerTo_ns1__ListAllMyBucketsResponse(struct soap*, _ns1__ListAllMyBucketsResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets *const*);
 int soap_out_PointerTo_ns1__ListAllMyBuckets(struct soap*, const char *, int, _ns1__ListAllMyBuckets *const*, const char *);
 _ns1__ListAllMyBuckets ** soap_in_PointerTo_ns1__ListAllMyBuckets(struct soap*, const char*, _ns1__ListAllMyBuckets **, const char*);



 int soap_put_PointerTo_ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets *const*, const char*, const char*);



 _ns1__ListAllMyBuckets ** soap_get_PointerTo_ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__ListBucketResponse(struct soap*, _ns1__ListBucketResponse *const*);
 int soap_out_PointerTo_ns1__ListBucketResponse(struct soap*, const char *, int, _ns1__ListBucketResponse *const*, const char *);
 _ns1__ListBucketResponse ** soap_in_PointerTo_ns1__ListBucketResponse(struct soap*, const char*, _ns1__ListBucketResponse **, const char*);



 int soap_put_PointerTo_ns1__ListBucketResponse(struct soap*, _ns1__ListBucketResponse *const*, const char*, const char*);



 _ns1__ListBucketResponse ** soap_get_PointerTo_ns1__ListBucketResponse(struct soap*, _ns1__ListBucketResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__ListBucket(struct soap*, _ns1__ListBucket *const*);
 int soap_out_PointerTo_ns1__ListBucket(struct soap*, const char *, int, _ns1__ListBucket *const*, const char *);
 _ns1__ListBucket ** soap_in_PointerTo_ns1__ListBucket(struct soap*, const char*, _ns1__ListBucket **, const char*);



 int soap_put_PointerTo_ns1__ListBucket(struct soap*, _ns1__ListBucket *const*, const char*, const char*);



 _ns1__ListBucket ** soap_get_PointerTo_ns1__ListBucket(struct soap*, _ns1__ListBucket **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__DeleteObjectResponse(struct soap*, _ns1__DeleteObjectResponse *const*);
 int soap_out_PointerTo_ns1__DeleteObjectResponse(struct soap*, const char *, int, _ns1__DeleteObjectResponse *const*, const char *);
 _ns1__DeleteObjectResponse ** soap_in_PointerTo_ns1__DeleteObjectResponse(struct soap*, const char*, _ns1__DeleteObjectResponse **, const char*);



 int soap_put_PointerTo_ns1__DeleteObjectResponse(struct soap*, _ns1__DeleteObjectResponse *const*, const char*, const char*);



 _ns1__DeleteObjectResponse ** soap_get_PointerTo_ns1__DeleteObjectResponse(struct soap*, _ns1__DeleteObjectResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__DeleteObject(struct soap*, _ns1__DeleteObject *const*);
 int soap_out_PointerTo_ns1__DeleteObject(struct soap*, const char *, int, _ns1__DeleteObject *const*, const char *);
 _ns1__DeleteObject ** soap_in_PointerTo_ns1__DeleteObject(struct soap*, const char*, _ns1__DeleteObject **, const char*);



 int soap_put_PointerTo_ns1__DeleteObject(struct soap*, _ns1__DeleteObject *const*, const char*, const char*);



 _ns1__DeleteObject ** soap_get_PointerTo_ns1__DeleteObject(struct soap*, _ns1__DeleteObject **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__PutObjectInlineResponse(struct soap*, _ns1__PutObjectInlineResponse *const*);
 int soap_out_PointerTo_ns1__PutObjectInlineResponse(struct soap*, const char *, int, _ns1__PutObjectInlineResponse *const*, const char *);
 _ns1__PutObjectInlineResponse ** soap_in_PointerTo_ns1__PutObjectInlineResponse(struct soap*, const char*, _ns1__PutObjectInlineResponse **, const char*);



 int soap_put_PointerTo_ns1__PutObjectInlineResponse(struct soap*, _ns1__PutObjectInlineResponse *const*, const char*, const char*);



 _ns1__PutObjectInlineResponse ** soap_get_PointerTo_ns1__PutObjectInlineResponse(struct soap*, _ns1__PutObjectInlineResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline *const*);
 int soap_out_PointerTo_ns1__PutObjectInline(struct soap*, const char *, int, _ns1__PutObjectInline *const*, const char *);
 _ns1__PutObjectInline ** soap_in_PointerTo_ns1__PutObjectInline(struct soap*, const char*, _ns1__PutObjectInline **, const char*);



 int soap_put_PointerTo_ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline *const*, const char*, const char*);



 _ns1__PutObjectInline ** soap_get_PointerTo_ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__PutObjectResponse(struct soap*, _ns1__PutObjectResponse *const*);
 int soap_out_PointerTo_ns1__PutObjectResponse(struct soap*, const char *, int, _ns1__PutObjectResponse *const*, const char *);
 _ns1__PutObjectResponse ** soap_in_PointerTo_ns1__PutObjectResponse(struct soap*, const char*, _ns1__PutObjectResponse **, const char*);



 int soap_put_PointerTo_ns1__PutObjectResponse(struct soap*, _ns1__PutObjectResponse *const*, const char*, const char*);



 _ns1__PutObjectResponse ** soap_get_PointerTo_ns1__PutObjectResponse(struct soap*, _ns1__PutObjectResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__PutObject(struct soap*, _ns1__PutObject *const*);
 int soap_out_PointerTo_ns1__PutObject(struct soap*, const char *, int, _ns1__PutObject *const*, const char *);
 _ns1__PutObject ** soap_in_PointerTo_ns1__PutObject(struct soap*, const char*, _ns1__PutObject **, const char*);



 int soap_put_PointerTo_ns1__PutObject(struct soap*, _ns1__PutObject *const*, const char*, const char*);



 _ns1__PutObject ** soap_get_PointerTo_ns1__PutObject(struct soap*, _ns1__PutObject **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObjectExtendedResponse(struct soap*, _ns1__GetObjectExtendedResponse *const*);
 int soap_out_PointerTo_ns1__GetObjectExtendedResponse(struct soap*, const char *, int, _ns1__GetObjectExtendedResponse *const*, const char *);
 _ns1__GetObjectExtendedResponse ** soap_in_PointerTo_ns1__GetObjectExtendedResponse(struct soap*, const char*, _ns1__GetObjectExtendedResponse **, const char*);



 int soap_put_PointerTo_ns1__GetObjectExtendedResponse(struct soap*, _ns1__GetObjectExtendedResponse *const*, const char*, const char*);



 _ns1__GetObjectExtendedResponse ** soap_get_PointerTo_ns1__GetObjectExtendedResponse(struct soap*, _ns1__GetObjectExtendedResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended *const*);
 int soap_out_PointerTo_ns1__GetObjectExtended(struct soap*, const char *, int, _ns1__GetObjectExtended *const*, const char *);
 _ns1__GetObjectExtended ** soap_in_PointerTo_ns1__GetObjectExtended(struct soap*, const char*, _ns1__GetObjectExtended **, const char*);



 int soap_put_PointerTo_ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended *const*, const char*, const char*);



 _ns1__GetObjectExtended ** soap_get_PointerTo_ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObjectResponse(struct soap*, _ns1__GetObjectResponse *const*);
 int soap_out_PointerTo_ns1__GetObjectResponse(struct soap*, const char *, int, _ns1__GetObjectResponse *const*, const char *);
 _ns1__GetObjectResponse ** soap_in_PointerTo_ns1__GetObjectResponse(struct soap*, const char*, _ns1__GetObjectResponse **, const char*);



 int soap_put_PointerTo_ns1__GetObjectResponse(struct soap*, _ns1__GetObjectResponse *const*, const char*, const char*);



 _ns1__GetObjectResponse ** soap_get_PointerTo_ns1__GetObjectResponse(struct soap*, _ns1__GetObjectResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObject(struct soap*, _ns1__GetObject *const*);
 int soap_out_PointerTo_ns1__GetObject(struct soap*, const char *, int, _ns1__GetObject *const*, const char *);
 _ns1__GetObject ** soap_in_PointerTo_ns1__GetObject(struct soap*, const char*, _ns1__GetObject **, const char*);



 int soap_put_PointerTo_ns1__GetObject(struct soap*, _ns1__GetObject *const*, const char*, const char*);



 _ns1__GetObject ** soap_get_PointerTo_ns1__GetObject(struct soap*, _ns1__GetObject **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap*, _ns1__SetBucketAccessControlPolicyResponse *const*);
 int soap_out_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap*, const char *, int, _ns1__SetBucketAccessControlPolicyResponse *const*, const char *);
 _ns1__SetBucketAccessControlPolicyResponse ** soap_in_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap*, const char*, _ns1__SetBucketAccessControlPolicyResponse **, const char*);



 int soap_put_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap*, _ns1__SetBucketAccessControlPolicyResponse *const*, const char*, const char*);



 _ns1__SetBucketAccessControlPolicyResponse ** soap_get_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap*, _ns1__SetBucketAccessControlPolicyResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy *const*);
 int soap_out_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap*, const char *, int, _ns1__SetBucketAccessControlPolicy *const*, const char *);
 _ns1__SetBucketAccessControlPolicy ** soap_in_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap*, const char*, _ns1__SetBucketAccessControlPolicy **, const char*);



 int soap_put_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy *const*, const char*, const char*);



 _ns1__SetBucketAccessControlPolicy ** soap_get_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap*, _ns1__SetObjectAccessControlPolicyResponse *const*);
 int soap_out_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap*, const char *, int, _ns1__SetObjectAccessControlPolicyResponse *const*, const char *);
 _ns1__SetObjectAccessControlPolicyResponse ** soap_in_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap*, const char*, _ns1__SetObjectAccessControlPolicyResponse **, const char*);



 int soap_put_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap*, _ns1__SetObjectAccessControlPolicyResponse *const*, const char*, const char*);



 _ns1__SetObjectAccessControlPolicyResponse ** soap_get_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap*, _ns1__SetObjectAccessControlPolicyResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy *const*);
 int soap_out_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap*, const char *, int, _ns1__SetObjectAccessControlPolicy *const*, const char *);
 _ns1__SetObjectAccessControlPolicy ** soap_in_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap*, const char*, _ns1__SetObjectAccessControlPolicy **, const char*);



 int soap_put_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy *const*, const char*, const char*);



 _ns1__SetObjectAccessControlPolicy ** soap_get_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap*, _ns1__GetBucketAccessControlPolicyResponse *const*);
 int soap_out_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap*, const char *, int, _ns1__GetBucketAccessControlPolicyResponse *const*, const char *);
 _ns1__GetBucketAccessControlPolicyResponse ** soap_in_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap*, const char*, _ns1__GetBucketAccessControlPolicyResponse **, const char*);



 int soap_put_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap*, _ns1__GetBucketAccessControlPolicyResponse *const*, const char*, const char*);



 _ns1__GetBucketAccessControlPolicyResponse ** soap_get_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap*, _ns1__GetBucketAccessControlPolicyResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy *const*);
 int soap_out_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap*, const char *, int, _ns1__GetBucketAccessControlPolicy *const*, const char *);
 _ns1__GetBucketAccessControlPolicy ** soap_in_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap*, const char*, _ns1__GetBucketAccessControlPolicy **, const char*);



 int soap_put_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy *const*, const char*, const char*);



 _ns1__GetBucketAccessControlPolicy ** soap_get_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap*, _ns1__GetObjectAccessControlPolicyResponse *const*);
 int soap_out_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap*, const char *, int, _ns1__GetObjectAccessControlPolicyResponse *const*, const char *);
 _ns1__GetObjectAccessControlPolicyResponse ** soap_in_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap*, const char*, _ns1__GetObjectAccessControlPolicyResponse **, const char*);



 int soap_put_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap*, _ns1__GetObjectAccessControlPolicyResponse *const*, const char*, const char*);



 _ns1__GetObjectAccessControlPolicyResponse ** soap_get_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap*, _ns1__GetObjectAccessControlPolicyResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy *const*);
 int soap_out_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap*, const char *, int, _ns1__GetObjectAccessControlPolicy *const*, const char *);
 _ns1__GetObjectAccessControlPolicy ** soap_in_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap*, const char*, _ns1__GetObjectAccessControlPolicy **, const char*);



 int soap_put_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy *const*, const char*, const char*);



 _ns1__GetObjectAccessControlPolicy ** soap_get_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__DeleteBucketResponse(struct soap*, _ns1__DeleteBucketResponse *const*);
 int soap_out_PointerTo_ns1__DeleteBucketResponse(struct soap*, const char *, int, _ns1__DeleteBucketResponse *const*, const char *);
 _ns1__DeleteBucketResponse ** soap_in_PointerTo_ns1__DeleteBucketResponse(struct soap*, const char*, _ns1__DeleteBucketResponse **, const char*);



 int soap_put_PointerTo_ns1__DeleteBucketResponse(struct soap*, _ns1__DeleteBucketResponse *const*, const char*, const char*);



 _ns1__DeleteBucketResponse ** soap_get_PointerTo_ns1__DeleteBucketResponse(struct soap*, _ns1__DeleteBucketResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket *const*);
 int soap_out_PointerTo_ns1__DeleteBucket(struct soap*, const char *, int, _ns1__DeleteBucket *const*, const char *);
 _ns1__DeleteBucket ** soap_in_PointerTo_ns1__DeleteBucket(struct soap*, const char*, _ns1__DeleteBucket **, const char*);



 int soap_put_PointerTo_ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket *const*, const char*, const char*);



 _ns1__DeleteBucket ** soap_get_PointerTo_ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__CreateBucketResponse(struct soap*, _ns1__CreateBucketResponse *const*);
 int soap_out_PointerTo_ns1__CreateBucketResponse(struct soap*, const char *, int, _ns1__CreateBucketResponse *const*, const char *);
 _ns1__CreateBucketResponse ** soap_in_PointerTo_ns1__CreateBucketResponse(struct soap*, const char*, _ns1__CreateBucketResponse **, const char*);



 int soap_put_PointerTo_ns1__CreateBucketResponse(struct soap*, _ns1__CreateBucketResponse *const*, const char*, const char*);



 _ns1__CreateBucketResponse ** soap_get_PointerTo_ns1__CreateBucketResponse(struct soap*, _ns1__CreateBucketResponse **, const char*, const char*);




 void soap_serialize_PointerTo_ns1__CreateBucket(struct soap*, _ns1__CreateBucket *const*);
 int soap_out_PointerTo_ns1__CreateBucket(struct soap*, const char *, int, _ns1__CreateBucket *const*, const char *);
 _ns1__CreateBucket ** soap_in_PointerTo_ns1__CreateBucket(struct soap*, const char*, _ns1__CreateBucket **, const char*);



 int soap_put_PointerTo_ns1__CreateBucket(struct soap*, _ns1__CreateBucket *const*, const char*, const char*);



 _ns1__CreateBucket ** soap_get_PointerTo_ns1__CreateBucket(struct soap*, _ns1__CreateBucket **, const char*, const char*);




 void soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
 int soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
 xsd__base64Binary ** soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);



 int soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);



 xsd__base64Binary ** soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);




 void soap_serialize_PointerTons1__CopyObjectResult(struct soap*, ns1__CopyObjectResult *const*);
 int soap_out_PointerTons1__CopyObjectResult(struct soap*, const char *, int, ns1__CopyObjectResult *const*, const char *);
 ns1__CopyObjectResult ** soap_in_PointerTons1__CopyObjectResult(struct soap*, const char*, ns1__CopyObjectResult **, const char*);



 int soap_put_PointerTons1__CopyObjectResult(struct soap*, ns1__CopyObjectResult *const*, const char*, const char*);



 ns1__CopyObjectResult ** soap_get_PointerTons1__CopyObjectResult(struct soap*, ns1__CopyObjectResult **, const char*, const char*);




 void soap_serialize_PointerTons1__MetadataDirective(struct soap*, enum ns1__MetadataDirective *const*);
 int soap_out_PointerTons1__MetadataDirective(struct soap*, const char *, int, enum ns1__MetadataDirective *const*, const char *);
 enum ns1__MetadataDirective ** soap_in_PointerTons1__MetadataDirective(struct soap*, const char*, enum ns1__MetadataDirective **, const char*);



 int soap_put_PointerTons1__MetadataDirective(struct soap*, enum ns1__MetadataDirective *const*, const char*, const char*);



 enum ns1__MetadataDirective ** soap_get_PointerTons1__MetadataDirective(struct soap*, enum ns1__MetadataDirective **, const char*, const char*);




 void soap_serialize_PointerTons1__ListAllMyBucketsResult(struct soap*, ns1__ListAllMyBucketsResult *const*);
 int soap_out_PointerTons1__ListAllMyBucketsResult(struct soap*, const char *, int, ns1__ListAllMyBucketsResult *const*, const char *);
 ns1__ListAllMyBucketsResult ** soap_in_PointerTons1__ListAllMyBucketsResult(struct soap*, const char*, ns1__ListAllMyBucketsResult **, const char*);



 int soap_put_PointerTons1__ListAllMyBucketsResult(struct soap*, ns1__ListAllMyBucketsResult *const*, const char*, const char*);



 ns1__ListAllMyBucketsResult ** soap_get_PointerTons1__ListAllMyBucketsResult(struct soap*, ns1__ListAllMyBucketsResult **, const char*, const char*);




 void soap_serialize_PointerTons1__ListBucketResult(struct soap*, ns1__ListBucketResult *const*);
 int soap_out_PointerTons1__ListBucketResult(struct soap*, const char *, int, ns1__ListBucketResult *const*, const char *);
 ns1__ListBucketResult ** soap_in_PointerTons1__ListBucketResult(struct soap*, const char*, ns1__ListBucketResult **, const char*);



 int soap_put_PointerTons1__ListBucketResult(struct soap*, ns1__ListBucketResult *const*, const char*, const char*);



 ns1__ListBucketResult ** soap_get_PointerTons1__ListBucketResult(struct soap*, ns1__ListBucketResult **, const char*, const char*);




 void soap_serialize_PointerToint(struct soap*, int *const*);
 int soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
 int ** soap_in_PointerToint(struct soap*, const char*, int **, const char*);



 int soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);



 int ** soap_get_PointerToint(struct soap*, int **, const char*, const char*);




 void soap_serialize_PointerTons1__PutObjectResult(struct soap*, ns1__PutObjectResult *const*);
 int soap_out_PointerTons1__PutObjectResult(struct soap*, const char *, int, ns1__PutObjectResult *const*, const char *);
 ns1__PutObjectResult ** soap_in_PointerTons1__PutObjectResult(struct soap*, const char*, ns1__PutObjectResult **, const char*);



 int soap_put_PointerTons1__PutObjectResult(struct soap*, ns1__PutObjectResult *const*, const char*, const char*);



 ns1__PutObjectResult ** soap_get_PointerTons1__PutObjectResult(struct soap*, ns1__PutObjectResult **, const char*, const char*);




 void soap_serialize_PointerTons1__StorageClass(struct soap*, enum ns1__StorageClass *const*);
 int soap_out_PointerTons1__StorageClass(struct soap*, const char *, int, enum ns1__StorageClass *const*, const char *);
 enum ns1__StorageClass ** soap_in_PointerTons1__StorageClass(struct soap*, const char*, enum ns1__StorageClass **, const char*);



 int soap_put_PointerTons1__StorageClass(struct soap*, enum ns1__StorageClass *const*, const char*, const char*);



 enum ns1__StorageClass ** soap_get_PointerTons1__StorageClass(struct soap*, enum ns1__StorageClass **, const char*, const char*);




 void soap_serialize_PointerTobool(struct soap*, bool *const*);
 int soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
 bool ** soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);



 int soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);



 bool ** soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);




 void soap_serialize_PointerTostring(struct soap*, char **const*);
 int soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
 char *** soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);



 int soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);



 char *** soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);




 void soap_serialize_PointerToLONG64(struct soap*, long long *const*);
 int soap_out_PointerToLONG64(struct soap*, const char *, int, long long *const*, const char *);
 long long ** soap_in_PointerToLONG64(struct soap*, const char*, long long **, const char*);



 int soap_put_PointerToLONG64(struct soap*, long long *const*, const char*, const char*);



 long long ** soap_get_PointerToLONG64(struct soap*, long long **, const char*, const char*);




 void soap_serialize_PointerTons1__GetObjectResult(struct soap*, ns1__GetObjectResult *const*);
 int soap_out_PointerTons1__GetObjectResult(struct soap*, const char *, int, ns1__GetObjectResult *const*, const char *);
 ns1__GetObjectResult ** soap_in_PointerTons1__GetObjectResult(struct soap*, const char*, ns1__GetObjectResult **, const char*);



 int soap_put_PointerTons1__GetObjectResult(struct soap*, ns1__GetObjectResult *const*, const char*, const char*);



 ns1__GetObjectResult ** soap_get_PointerTons1__GetObjectResult(struct soap*, ns1__GetObjectResult **, const char*, const char*);




 void soap_serialize_PointerTons1__AccessControlPolicy(struct soap*, ns1__AccessControlPolicy *const*);
 int soap_out_PointerTons1__AccessControlPolicy(struct soap*, const char *, int, ns1__AccessControlPolicy *const*, const char *);
 ns1__AccessControlPolicy ** soap_in_PointerTons1__AccessControlPolicy(struct soap*, const char*, ns1__AccessControlPolicy **, const char*);



 int soap_put_PointerTons1__AccessControlPolicy(struct soap*, ns1__AccessControlPolicy *const*, const char*, const char*);



 ns1__AccessControlPolicy ** soap_get_PointerTons1__AccessControlPolicy(struct soap*, ns1__AccessControlPolicy **, const char*, const char*);




 void soap_serialize_PointerTons1__BucketLoggingStatus(struct soap*, ns1__BucketLoggingStatus *const*);
 int soap_out_PointerTons1__BucketLoggingStatus(struct soap*, const char *, int, ns1__BucketLoggingStatus *const*, const char *);
 ns1__BucketLoggingStatus ** soap_in_PointerTons1__BucketLoggingStatus(struct soap*, const char*, ns1__BucketLoggingStatus **, const char*);



 int soap_put_PointerTons1__BucketLoggingStatus(struct soap*, ns1__BucketLoggingStatus *const*, const char*, const char*);



 ns1__BucketLoggingStatus ** soap_get_PointerTons1__BucketLoggingStatus(struct soap*, ns1__BucketLoggingStatus **, const char*, const char*);




 void soap_serialize_PointerTons1__CreateBucketResult(struct soap*, ns1__CreateBucketResult *const*);
 int soap_out_PointerTons1__CreateBucketResult(struct soap*, const char *, int, ns1__CreateBucketResult *const*, const char *);
 ns1__CreateBucketResult ** soap_in_PointerTons1__CreateBucketResult(struct soap*, const char*, ns1__CreateBucketResult **, const char*);



 int soap_put_PointerTons1__CreateBucketResult(struct soap*, ns1__CreateBucketResult *const*, const char*, const char*);



 ns1__CreateBucketResult ** soap_get_PointerTons1__CreateBucketResult(struct soap*, ns1__CreateBucketResult **, const char*, const char*);




 void soap_serialize_PointerTotime(struct soap*, time_t *const*);
 int soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
 time_t ** soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);



 int soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);



 time_t ** soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);




 void soap_serialize_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry **const*);
 int soap_out_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap*, const char *, int, ns1__ListAllMyBucketsEntry **const*, const char *);
 ns1__ListAllMyBucketsEntry *** soap_in_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap*, const char*, ns1__ListAllMyBucketsEntry ***, const char*);



 int soap_put_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry **const*, const char*, const char*);



 ns1__ListAllMyBucketsEntry *** soap_get_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry ***, const char*, const char*);




 void soap_serialize_PointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry *const*);
 int soap_out_PointerTons1__ListAllMyBucketsEntry(struct soap*, const char *, int, ns1__ListAllMyBucketsEntry *const*, const char *);
 ns1__ListAllMyBucketsEntry ** soap_in_PointerTons1__ListAllMyBucketsEntry(struct soap*, const char*, ns1__ListAllMyBucketsEntry **, const char*);



 int soap_put_PointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry *const*, const char*, const char*);



 ns1__ListAllMyBucketsEntry ** soap_get_PointerTons1__ListAllMyBucketsEntry(struct soap*, ns1__ListAllMyBucketsEntry **, const char*, const char*);




 void soap_serialize_PointerTons1__ListAllMyBucketsList(struct soap*, ns1__ListAllMyBucketsList *const*);
 int soap_out_PointerTons1__ListAllMyBucketsList(struct soap*, const char *, int, ns1__ListAllMyBucketsList *const*, const char *);
 ns1__ListAllMyBucketsList ** soap_in_PointerTons1__ListAllMyBucketsList(struct soap*, const char*, ns1__ListAllMyBucketsList **, const char*);



 int soap_put_PointerTons1__ListAllMyBucketsList(struct soap*, ns1__ListAllMyBucketsList *const*, const char*, const char*);



 ns1__ListAllMyBucketsList ** soap_get_PointerTons1__ListAllMyBucketsList(struct soap*, ns1__ListAllMyBucketsList **, const char*, const char*);




 void soap_serialize_PointerToPointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry **const*);
 int soap_out_PointerToPointerTons1__PrefixEntry(struct soap*, const char *, int, ns1__PrefixEntry **const*, const char *);
 ns1__PrefixEntry *** soap_in_PointerToPointerTons1__PrefixEntry(struct soap*, const char*, ns1__PrefixEntry ***, const char*);



 int soap_put_PointerToPointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry **const*, const char*, const char*);



 ns1__PrefixEntry *** soap_get_PointerToPointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry ***, const char*, const char*);




 void soap_serialize_PointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry *const*);
 int soap_out_PointerTons1__PrefixEntry(struct soap*, const char *, int, ns1__PrefixEntry *const*, const char *);
 ns1__PrefixEntry ** soap_in_PointerTons1__PrefixEntry(struct soap*, const char*, ns1__PrefixEntry **, const char*);



 int soap_put_PointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry *const*, const char*, const char*);



 ns1__PrefixEntry ** soap_get_PointerTons1__PrefixEntry(struct soap*, ns1__PrefixEntry **, const char*, const char*);




 void soap_serialize_PointerToPointerTons1__ListEntry(struct soap*, ns1__ListEntry **const*);
 int soap_out_PointerToPointerTons1__ListEntry(struct soap*, const char *, int, ns1__ListEntry **const*, const char *);
 ns1__ListEntry *** soap_in_PointerToPointerTons1__ListEntry(struct soap*, const char*, ns1__ListEntry ***, const char*);



 int soap_put_PointerToPointerTons1__ListEntry(struct soap*, ns1__ListEntry **const*, const char*, const char*);



 ns1__ListEntry *** soap_get_PointerToPointerTons1__ListEntry(struct soap*, ns1__ListEntry ***, const char*, const char*);




 void soap_serialize_PointerTons1__ListEntry(struct soap*, ns1__ListEntry *const*);
 int soap_out_PointerTons1__ListEntry(struct soap*, const char *, int, ns1__ListEntry *const*, const char *);
 ns1__ListEntry ** soap_in_PointerTons1__ListEntry(struct soap*, const char*, ns1__ListEntry **, const char*);



 int soap_put_PointerTons1__ListEntry(struct soap*, ns1__ListEntry *const*, const char*, const char*);



 ns1__ListEntry ** soap_get_PointerTons1__ListEntry(struct soap*, ns1__ListEntry **, const char*, const char*);




 void soap_serialize_PointerToPointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry **const*);
 int soap_out_PointerToPointerTons1__MetadataEntry(struct soap*, const char *, int, ns1__MetadataEntry **const*, const char *);
 ns1__MetadataEntry *** soap_in_PointerToPointerTons1__MetadataEntry(struct soap*, const char*, ns1__MetadataEntry ***, const char*);



 int soap_put_PointerToPointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry **const*, const char*, const char*);



 ns1__MetadataEntry *** soap_get_PointerToPointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry ***, const char*, const char*);




 void soap_serialize_PointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry *const*);
 int soap_out_PointerTons1__MetadataEntry(struct soap*, const char *, int, ns1__MetadataEntry *const*, const char *);
 ns1__MetadataEntry ** soap_in_PointerTons1__MetadataEntry(struct soap*, const char*, ns1__MetadataEntry **, const char*);



 int soap_put_PointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry *const*, const char*, const char*);



 ns1__MetadataEntry ** soap_get_PointerTons1__MetadataEntry(struct soap*, ns1__MetadataEntry **, const char*, const char*);




 void soap_serialize_PointerTons1__CanonicalUser(struct soap*, ns1__CanonicalUser *const*);
 int soap_out_PointerTons1__CanonicalUser(struct soap*, const char *, int, ns1__CanonicalUser *const*, const char *);
 ns1__CanonicalUser ** soap_in_PointerTons1__CanonicalUser(struct soap*, const char*, ns1__CanonicalUser **, const char*);



 int soap_put_PointerTons1__CanonicalUser(struct soap*, ns1__CanonicalUser *const*, const char*, const char*);



 ns1__CanonicalUser ** soap_get_PointerTons1__CanonicalUser(struct soap*, ns1__CanonicalUser **, const char*, const char*);




 void soap_serialize_PointerTons1__LocationConstraint(struct soap*, ns1__LocationConstraint *const*);
 int soap_out_PointerTons1__LocationConstraint(struct soap*, const char *, int, ns1__LocationConstraint *const*, const char *);
 ns1__LocationConstraint ** soap_in_PointerTons1__LocationConstraint(struct soap*, const char*, ns1__LocationConstraint **, const char*);



 int soap_put_PointerTons1__LocationConstraint(struct soap*, ns1__LocationConstraint *const*, const char*, const char*);



 ns1__LocationConstraint ** soap_get_PointerTons1__LocationConstraint(struct soap*, ns1__LocationConstraint **, const char*, const char*);




 void soap_serialize_PointerToPointerTons1__Grant(struct soap*, ns1__Grant **const*);
 int soap_out_PointerToPointerTons1__Grant(struct soap*, const char *, int, ns1__Grant **const*, const char *);
 ns1__Grant *** soap_in_PointerToPointerTons1__Grant(struct soap*, const char*, ns1__Grant ***, const char*);



 int soap_put_PointerToPointerTons1__Grant(struct soap*, ns1__Grant **const*, const char*, const char*);



 ns1__Grant *** soap_get_PointerToPointerTons1__Grant(struct soap*, ns1__Grant ***, const char*, const char*);




 void soap_serialize_PointerTons1__Grant(struct soap*, ns1__Grant *const*);
 int soap_out_PointerTons1__Grant(struct soap*, const char *, int, ns1__Grant *const*, const char *);
 ns1__Grant ** soap_in_PointerTons1__Grant(struct soap*, const char*, ns1__Grant **, const char*);



 int soap_put_PointerTons1__Grant(struct soap*, ns1__Grant *const*, const char*, const char*);



 ns1__Grant ** soap_get_PointerTons1__Grant(struct soap*, ns1__Grant **, const char*, const char*);




 void soap_serialize_PointerTons1__Grantee(struct soap*, ns1__Grantee *const*);
 int soap_out_PointerTons1__Grantee(struct soap*, const char *, int, ns1__Grantee *const*, const char *);
 ns1__Grantee ** soap_in_PointerTons1__Grantee(struct soap*, const char*, ns1__Grantee **, const char*);



 int soap_put_PointerTons1__Grantee(struct soap*, ns1__Grantee *const*, const char*, const char*);



 ns1__Grantee ** soap_get_PointerTons1__Grantee(struct soap*, ns1__Grantee **, const char*, const char*);




 void soap_serialize_PointerTons1__AccessControlList(struct soap*, ns1__AccessControlList *const*);
 int soap_out_PointerTons1__AccessControlList(struct soap*, const char *, int, ns1__AccessControlList *const*, const char *);
 ns1__AccessControlList ** soap_in_PointerTons1__AccessControlList(struct soap*, const char*, ns1__AccessControlList **, const char*);



 int soap_put_PointerTons1__AccessControlList(struct soap*, ns1__AccessControlList *const*, const char*, const char*);



 ns1__AccessControlList ** soap_get_PointerTons1__AccessControlList(struct soap*, ns1__AccessControlList **, const char*, const char*);




 void soap_serialize_PointerTons1__LoggingSettings(struct soap*, ns1__LoggingSettings *const*);
 int soap_out_PointerTons1__LoggingSettings(struct soap*, const char *, int, ns1__LoggingSettings *const*, const char *);
 ns1__LoggingSettings ** soap_in_PointerTons1__LoggingSettings(struct soap*, const char*, ns1__LoggingSettings **, const char*);



 int soap_put_PointerTons1__LoggingSettings(struct soap*, ns1__LoggingSettings *const*, const char*, const char*);



 ns1__LoggingSettings ** soap_get_PointerTons1__LoggingSettings(struct soap*, ns1__LoggingSettings **, const char*, const char*);




 void soap_serialize_PointerTons1__Status(struct soap*, ns1__Status *const*);
 int soap_out_PointerTons1__Status(struct soap*, const char *, int, ns1__Status *const*, const char *);
 ns1__Status ** soap_in_PointerTons1__Status(struct soap*, const char*, ns1__Status **, const char*);



 int soap_put_PointerTons1__Status(struct soap*, ns1__Status *const*, const char*, const char*);



 ns1__Status ** soap_get_PointerTons1__Status(struct soap*, ns1__Status **, const char*, const char*);




 void soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
 int soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
 unsigned char ** soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);



 int soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);



 unsigned char ** soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
# 3142 "../../AmazonS3/eternusH.h"
 int soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);
 char * * soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);



 int soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);



 char ** soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);
# 3162 "../../AmazonS3/eternusH.h"
 int soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
 char * * soap_in__QName(struct soap*, const char*, char **, const char*);



 int soap_put__QName(struct soap*, char *const*, const char*, const char*);



 char ** soap_get__QName(struct soap*, char **, const char*, const char*);




 void soap_default_string(struct soap*, char **);
 void soap_serialize_string(struct soap*, char *const*);
 int soap_out_string(struct soap*, const char*, int, char*const*, const char*);
 char * * soap_in_string(struct soap*, const char*, char **, const char*);



 int soap_put_string(struct soap*, char *const*, const char*, const char*);



 char ** soap_get_string(struct soap*, char **, const char*, const char*);
# 14 "../../AmazonS3/eternusC.cpp" 2




# 141 "../../AmazonS3/eternusC.cpp"
 int soap_getindependent(struct soap *soap)
{
 int t;
 if (soap->version == 1)
 { for (;;)
  { if (!soap_getelement(soap, &t))
    if (soap->error || soap_ignore_element(soap))
     break;
  }
 }
 if (soap->error == 6 || soap->error == (-1))
  soap->error = 0;
 return soap->error;
}



 void * soap_getelement(struct soap *soap, int *type)
{
 if (soap_peek_element(soap))
  return __null;
 if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
  *type = soap_lookup_type(soap, soap->href);
 switch (*type)
 {
 case (3):
  return soap_in_byte(soap, __null, __null, "xsd:byte");
 case (1):
  return soap_in_int(soap, __null, __null, "xsd:int");
 case (85):
  return soap_in_LONG64(soap, __null, __null, "xsd:long");
 case (10):
  return soap_in_unsignedByte(soap, __null, __null, "xsd:unsignedByte");
 case (9):
  return soap_in_unsignedInt(soap, __null, __null, "xsd:unsignedInt");
 case (84):
  return soap_in_time(soap, __null, __null, "xsd:dateTime");
 case (88):
  return soap_in_bool(soap, __null, __null, "xsd:boolean");
 case (75):
  return soap_in_ns1__Payer(soap, __null, __null, "ns1:Payer");
 case (74):
  return soap_in_ns1__MetadataDirective(soap, __null, __null, "ns1:MetadataDirective");
 case (73):
  return soap_in_ns1__StorageClass(soap, __null, __null, "ns1:StorageClass");
 case (72):
  return soap_in_ns1__Permission(soap, __null, __null, "ns1:Permission");
 case (38):
  return soap_in_ns1__RequestPaymentConfiguration(soap, __null, __null, "ns1:RequestPaymentConfiguration");
 case (37):
  return soap_in_ns1__CopyObjectResult(soap, __null, __null, "ns1:CopyObjectResult");
 case (36):
  return soap_in_ns1__ListAllMyBucketsList(soap, __null, __null, "ns1:ListAllMyBucketsList");
 case (35):
  return soap_in_ns1__ListAllMyBucketsResult(soap, __null, __null, "ns1:ListAllMyBucketsResult");
 case (34):
  return soap_in_ns1__ListAllMyBucketsEntry(soap, __null, __null, "ns1:ListAllMyBucketsEntry");
 case (33):
  return soap_in_ns1__ListBucketResult(soap, __null, __null, "ns1:ListBucketResult");
 case (32):
  return soap_in_ns1__PrefixEntry(soap, __null, __null, "ns1:PrefixEntry");
 case (31):
  return soap_in_ns1__ListEntry(soap, __null, __null, "ns1:ListEntry");
 case (30):
  return soap_in_ns1__PutObjectResult(soap, __null, __null, "ns1:PutObjectResult");
 case (29):
  return soap_in_ns1__GetObjectResult(soap, __null, __null, "ns1:GetObjectResult");
 case (28):
  return soap_in_ns1__AccessControlPolicy(soap, __null, __null, "ns1:AccessControlPolicy");
 case (27):
  return soap_in_ns1__LocationConstraint(soap, __null, __null, "ns1:LocationConstraint");
 case (26):
  return soap_in_ns1__CreateBucketConfiguration(soap, __null, __null, "ns1:CreateBucketConfiguration");
 case (25):
  return soap_in_ns1__AccessControlList(soap, __null, __null, "ns1:AccessControlList");
 case (24):
  return soap_in_ns1__Grant(soap, __null, __null, "ns1:Grant");
 case (23):
  return soap_in_ns1__Group(soap, __null, __null, "ns1:Group");
 case (22):
  return soap_in_ns1__CanonicalUser(soap, __null, __null, "ns1:CanonicalUser");
 case (21):
  return soap_in_ns1__AmazonCustomerByEmail(soap, __null, __null, "ns1:AmazonCustomerByEmail");
 case (20):
  return soap_in_ns1__User(soap, __null, __null, "ns1:User");
 case (19):
  return soap_in_ns1__Grantee(soap, __null, __null, "ns1:Grantee");
 case (18):
  return soap_in_ns1__LoggingSettings(soap, __null, __null, "ns1:LoggingSettings");
 case (17):
  return soap_in_ns1__BucketLoggingStatus(soap, __null, __null, "ns1:BucketLoggingStatus");
 case (16):
  return soap_in_ns1__CreateBucketResult(soap, __null, __null, "ns1:CreateBucketResult");
 case (15):
  return soap_in_ns1__Result(soap, __null, __null, "ns1:Result");
 case (14):
  return soap_in_ns1__Status(soap, __null, __null, "ns1:Status");
 case (13):
  return soap_in_ns1__MetadataEntry(soap, __null, __null, "ns1:MetadataEntry");
 case (8):
  return soap_in_xsd__base64Binary(soap, __null, __null, "xsd:base64Binary");
 case (173):
  return soap_in_PointerTo_ns1__CopyObjectResponse(soap, __null, __null, "ns1:CopyObjectResponse");
 case (172):
  return soap_in_PointerTo_ns1__CopyObject(soap, __null, __null, "ns1:CopyObject");
 case (169):
  return soap_in_PointerTo_ns1__GetBucketLoggingStatusResponse(soap, __null, __null, "ns1:GetBucketLoggingStatusResponse");
 case (168):
  return soap_in_PointerTo_ns1__GetBucketLoggingStatus(soap, __null, __null, "ns1:GetBucketLoggingStatus");
 case (165):
  return soap_in_PointerTo_ns1__SetBucketLoggingStatusResponse(soap, __null, __null, "ns1:SetBucketLoggingStatusResponse");
 case (164):
  return soap_in_PointerTo_ns1__SetBucketLoggingStatus(soap, __null, __null, "ns1:SetBucketLoggingStatus");
 case (161):
  return soap_in_PointerTo_ns1__ListAllMyBucketsResponse(soap, __null, __null, "ns1:ListAllMyBucketsResponse");
 case (160):
  return soap_in_PointerTo_ns1__ListAllMyBuckets(soap, __null, __null, "ns1:ListAllMyBuckets");
 case (157):
  return soap_in_PointerTo_ns1__ListBucketResponse(soap, __null, __null, "ns1:ListBucketResponse");
 case (156):
  return soap_in_PointerTo_ns1__ListBucket(soap, __null, __null, "ns1:ListBucket");
 case (153):
  return soap_in_PointerTo_ns1__DeleteObjectResponse(soap, __null, __null, "ns1:DeleteObjectResponse");
 case (152):
  return soap_in_PointerTo_ns1__DeleteObject(soap, __null, __null, "ns1:DeleteObject");
 case (149):
  return soap_in_PointerTo_ns1__PutObjectInlineResponse(soap, __null, __null, "ns1:PutObjectInlineResponse");
 case (148):
  return soap_in_PointerTo_ns1__PutObjectInline(soap, __null, __null, "ns1:PutObjectInline");
 case (145):
  return soap_in_PointerTo_ns1__PutObjectResponse(soap, __null, __null, "ns1:PutObjectResponse");
 case (144):
  return soap_in_PointerTo_ns1__PutObject(soap, __null, __null, "ns1:PutObject");
 case (141):
  return soap_in_PointerTo_ns1__GetObjectExtendedResponse(soap, __null, __null, "ns1:GetObjectExtendedResponse");
 case (140):
  return soap_in_PointerTo_ns1__GetObjectExtended(soap, __null, __null, "ns1:GetObjectExtended");
 case (137):
  return soap_in_PointerTo_ns1__GetObjectResponse(soap, __null, __null, "ns1:GetObjectResponse");
 case (136):
  return soap_in_PointerTo_ns1__GetObject(soap, __null, __null, "ns1:GetObject");
 case (133):
  return soap_in_PointerTo_ns1__SetBucketAccessControlPolicyResponse(soap, __null, __null, "ns1:SetBucketAccessControlPolicyResponse");
 case (132):
  return soap_in_PointerTo_ns1__SetBucketAccessControlPolicy(soap, __null, __null, "ns1:SetBucketAccessControlPolicy");
 case (129):
  return soap_in_PointerTo_ns1__SetObjectAccessControlPolicyResponse(soap, __null, __null, "ns1:SetObjectAccessControlPolicyResponse");
 case (128):
  return soap_in_PointerTo_ns1__SetObjectAccessControlPolicy(soap, __null, __null, "ns1:SetObjectAccessControlPolicy");
 case (125):
  return soap_in_PointerTo_ns1__GetBucketAccessControlPolicyResponse(soap, __null, __null, "ns1:GetBucketAccessControlPolicyResponse");
 case (124):
  return soap_in_PointerTo_ns1__GetBucketAccessControlPolicy(soap, __null, __null, "ns1:GetBucketAccessControlPolicy");
 case (121):
  return soap_in_PointerTo_ns1__GetObjectAccessControlPolicyResponse(soap, __null, __null, "ns1:GetObjectAccessControlPolicyResponse");
 case (120):
  return soap_in_PointerTo_ns1__GetObjectAccessControlPolicy(soap, __null, __null, "ns1:GetObjectAccessControlPolicy");
 case (117):
  return soap_in_PointerTo_ns1__DeleteBucketResponse(soap, __null, __null, "ns1:DeleteBucketResponse");
 case (116):
  return soap_in_PointerTo_ns1__DeleteBucket(soap, __null, __null, "ns1:DeleteBucket");
 case (113):
  return soap_in_PointerTo_ns1__CreateBucketResponse(soap, __null, __null, "ns1:CreateBucketResponse");
 case (112):
  return soap_in_PointerTo_ns1__CreateBucket(soap, __null, __null, "ns1:CreateBucket");
 case (111):
  return soap_in_PointerToxsd__base64Binary(soap, __null, __null, "xsd:base64Binary");
 case (110):
  return soap_in_PointerTons1__CopyObjectResult(soap, __null, __null, "ns1:CopyObjectResult");
 case (109):
  return soap_in_PointerTons1__MetadataDirective(soap, __null, __null, "ns1:MetadataDirective");
 case (108):
  return soap_in_PointerTons1__ListAllMyBucketsResult(soap, __null, __null, "ns1:ListAllMyBucketsResult");
 case (107):
  return soap_in_PointerTons1__ListBucketResult(soap, __null, __null, "ns1:ListBucketResult");
 case (106):
  return soap_in_PointerToint(soap, __null, __null, "xsd:int");
 case (105):
  return soap_in_PointerTons1__PutObjectResult(soap, __null, __null, "ns1:PutObjectResult");
 case (104):
  return soap_in_PointerTons1__StorageClass(soap, __null, __null, "ns1:StorageClass");
 case (103):
  return soap_in_PointerTobool(soap, __null, __null, "xsd:boolean");
 case (102):
  return soap_in_PointerTostring(soap, __null, __null, "xsd:string");
 case (101):
  return soap_in_PointerToLONG64(soap, __null, __null, "xsd:long");
 case (100):
  return soap_in_PointerTons1__GetObjectResult(soap, __null, __null, "ns1:GetObjectResult");
 case (99):
  return soap_in_PointerTons1__AccessControlPolicy(soap, __null, __null, "ns1:AccessControlPolicy");
 case (98):
  return soap_in_PointerTons1__BucketLoggingStatus(soap, __null, __null, "ns1:BucketLoggingStatus");
 case (97):
  return soap_in_PointerTons1__CreateBucketResult(soap, __null, __null, "ns1:CreateBucketResult");
 case (96):
  return soap_in_PointerTotime(soap, __null, __null, "xsd:dateTime");
 case (95):
  return soap_in_PointerToPointerTons1__ListAllMyBucketsEntry(soap, __null, __null, "ns1:ListAllMyBucketsEntry");
 case (94):
  return soap_in_PointerTons1__ListAllMyBucketsEntry(soap, __null, __null, "ns1:ListAllMyBucketsEntry");
 case (93):
  return soap_in_PointerTons1__ListAllMyBucketsList(soap, __null, __null, "ns1:ListAllMyBucketsList");
 case (92):
  return soap_in_PointerToPointerTons1__PrefixEntry(soap, __null, __null, "ns1:PrefixEntry");
 case (91):
  return soap_in_PointerTons1__PrefixEntry(soap, __null, __null, "ns1:PrefixEntry");
 case (90):
  return soap_in_PointerToPointerTons1__ListEntry(soap, __null, __null, "ns1:ListEntry");
 case (89):
  return soap_in_PointerTons1__ListEntry(soap, __null, __null, "ns1:ListEntry");
 case (87):
  return soap_in_PointerToPointerTons1__MetadataEntry(soap, __null, __null, "ns1:MetadataEntry");
 case (86):
  return soap_in_PointerTons1__MetadataEntry(soap, __null, __null, "ns1:MetadataEntry");
 case (83):
  return soap_in_PointerTons1__CanonicalUser(soap, __null, __null, "ns1:CanonicalUser");
 case (82):
  return soap_in_PointerTons1__LocationConstraint(soap, __null, __null, "ns1:LocationConstraint");
 case (81):
  return soap_in_PointerToPointerTons1__Grant(soap, __null, __null, "ns1:Grant");
 case (80):
  return soap_in_PointerTons1__Grant(soap, __null, __null, "ns1:Grant");
 case (79):
  return soap_in_PointerTons1__Grantee(soap, __null, __null, "ns1:Grantee");
 case (78):
  return soap_in_PointerTons1__AccessControlList(soap, __null, __null, "ns1:AccessControlList");
 case (77):
  return soap_in_PointerTons1__LoggingSettings(soap, __null, __null, "ns1:LoggingSettings");
 case (76):
  return soap_in_PointerTons1__Status(soap, __null, __null, "ns1:Status");
 case (11):
  return soap_in_PointerTounsignedByte(soap, __null, __null, "xsd:unsignedByte");
 case (7):
 { char **s;
  s = soap_in_xsd__anyURI(soap, __null, __null, "xsd:anyURI");
  return s ? *s : __null;
 }
 case (5):
 { char **s;
  s = soap_in__QName(soap, __null, __null, "xsd:QName");
  return s ? *s : __null;
 }
 case (4):
 { char **s;
  s = soap_in_string(soap, __null, __null, "xsd:string");
  return s ? *s : __null;
 }
 default:
 { const char *t = soap->type;
  if (!*t)
   t = soap->tag;
  if (!soap_match_tag(soap, t, "ns1:RequestPaymentConfiguration"))
  { *type = (38);
   return soap_in_ns1__RequestPaymentConfiguration(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CopyObjectResult"))
  { *type = (37);
   return soap_in_ns1__CopyObjectResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListAllMyBucketsList"))
  { *type = (36);
   return soap_in_ns1__ListAllMyBucketsList(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListAllMyBucketsResult"))
  { *type = (35);
   return soap_in_ns1__ListAllMyBucketsResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListAllMyBucketsEntry"))
  { *type = (34);
   return soap_in_ns1__ListAllMyBucketsEntry(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListBucketResult"))
  { *type = (33);
   return soap_in_ns1__ListBucketResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PrefixEntry"))
  { *type = (32);
   return soap_in_ns1__PrefixEntry(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListEntry"))
  { *type = (31);
   return soap_in_ns1__ListEntry(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PutObjectResult"))
  { *type = (30);
   return soap_in_ns1__PutObjectResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectResult"))
  { *type = (29);
   return soap_in_ns1__GetObjectResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:AccessControlPolicy"))
  { *type = (28);
   return soap_in_ns1__AccessControlPolicy(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:LocationConstraint"))
  { *type = (27);
   return soap_in_ns1__LocationConstraint(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CreateBucketConfiguration"))
  { *type = (26);
   return soap_in_ns1__CreateBucketConfiguration(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:AccessControlList"))
  { *type = (25);
   return soap_in_ns1__AccessControlList(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Grant"))
  { *type = (24);
   return soap_in_ns1__Grant(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Group"))
  { *type = (23);
   return soap_in_ns1__Group(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CanonicalUser"))
  { *type = (22);
   return soap_in_ns1__CanonicalUser(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:AmazonCustomerByEmail"))
  { *type = (21);
   return soap_in_ns1__AmazonCustomerByEmail(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:User"))
  { *type = (20);
   return soap_in_ns1__User(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Grantee"))
  { *type = (19);
   return soap_in_ns1__Grantee(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:LoggingSettings"))
  { *type = (18);
   return soap_in_ns1__LoggingSettings(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:BucketLoggingStatus"))
  { *type = (17);
   return soap_in_ns1__BucketLoggingStatus(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CreateBucketResult"))
  { *type = (16);
   return soap_in_ns1__CreateBucketResult(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Result"))
  { *type = (15);
   return soap_in_ns1__Result(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Status"))
  { *type = (14);
   return soap_in_ns1__Status(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:MetadataEntry"))
  { *type = (13);
   return soap_in_ns1__MetadataEntry(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:base64Binary"))
  { *type = (8);
   return soap_in_xsd__base64Binary(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:byte"))
  { *type = (3);
   return soap_in_byte(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:int"))
  { *type = (1);
   return soap_in_int(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:long"))
  { *type = (85);
   return soap_in_LONG64(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
  { *type = (10);
   return soap_in_unsignedByte(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
  { *type = (9);
   return soap_in_unsignedInt(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:dateTime"))
  { *type = (84);
   return soap_in_time(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:boolean"))
  { *type = (88);
   return soap_in_bool(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Payer"))
  { *type = (75);
   return soap_in_ns1__Payer(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:MetadataDirective"))
  { *type = (74);
   return soap_in_ns1__MetadataDirective(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:StorageClass"))
  { *type = (73);
   return soap_in_ns1__StorageClass(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:Permission"))
  { *type = (72);
   return soap_in_ns1__Permission(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "xsd:anyURI"))
  { char **s;
   *type = (7);
   s = soap_in_xsd__anyURI(soap, __null, __null, __null);
   return s ? *s : __null;
  }
  if (!soap_match_tag(soap, t, "xsd:QName"))
  { char **s;
   *type = (5);
   s = soap_in__QName(soap, __null, __null, __null);
   return s ? *s : __null;
  }
  if (!soap_match_tag(soap, t, "xsd:string"))
  { char **s;
   *type = (4);
   s = soap_in_string(soap, __null, __null, __null);
   return s ? *s : __null;
  }
  t = soap->tag;
  if (!soap_match_tag(soap, t, "ns1:CopyObjectResponse"))
  { *type = (71);
   return soap_in__ns1__CopyObjectResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CopyObject"))
  { *type = (70);
   return soap_in__ns1__CopyObject(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PostResponse"))
  { *type = (69);
   return soap_in__ns1__PostResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListAllMyBucketsResponse"))
  { *type = (68);
   return soap_in__ns1__ListAllMyBucketsResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListAllMyBuckets"))
  { *type = (67);
   return soap_in__ns1__ListAllMyBuckets(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListBucketResponse"))
  { *type = (66);
   return soap_in__ns1__ListBucketResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:ListBucket"))
  { *type = (65);
   return soap_in__ns1__ListBucket(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:DeleteObjectResponse"))
  { *type = (64);
   return soap_in__ns1__DeleteObjectResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:DeleteObject"))
  { *type = (63);
   return soap_in__ns1__DeleteObject(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PutObjectInlineResponse"))
  { *type = (62);
   return soap_in__ns1__PutObjectInlineResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PutObjectInline"))
  { *type = (61);
   return soap_in__ns1__PutObjectInline(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PutObjectResponse"))
  { *type = (60);
   return soap_in__ns1__PutObjectResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:PutObject"))
  { *type = (59);
   return soap_in__ns1__PutObject(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectExtendedResponse"))
  { *type = (58);
   return soap_in__ns1__GetObjectExtendedResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectExtended"))
  { *type = (57);
   return soap_in__ns1__GetObjectExtended(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectResponse"))
  { *type = (56);
   return soap_in__ns1__GetObjectResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObject"))
  { *type = (55);
   return soap_in__ns1__GetObject(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetBucketAccessControlPolicyResponse"))
  { *type = (54);
   return soap_in__ns1__SetBucketAccessControlPolicyResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetBucketAccessControlPolicy"))
  { *type = (53);
   return soap_in__ns1__SetBucketAccessControlPolicy(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetObjectAccessControlPolicyResponse"))
  { *type = (52);
   return soap_in__ns1__SetObjectAccessControlPolicyResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetObjectAccessControlPolicy"))
  { *type = (51);
   return soap_in__ns1__SetObjectAccessControlPolicy(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetBucketAccessControlPolicyResponse"))
  { *type = (50);
   return soap_in__ns1__GetBucketAccessControlPolicyResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetBucketAccessControlPolicy"))
  { *type = (49);
   return soap_in__ns1__GetBucketAccessControlPolicy(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectAccessControlPolicyResponse"))
  { *type = (48);
   return soap_in__ns1__GetObjectAccessControlPolicyResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetObjectAccessControlPolicy"))
  { *type = (47);
   return soap_in__ns1__GetObjectAccessControlPolicy(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetBucketLoggingStatusResponse"))
  { *type = (46);
   return soap_in__ns1__SetBucketLoggingStatusResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:SetBucketLoggingStatus"))
  { *type = (45);
   return soap_in__ns1__SetBucketLoggingStatus(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetBucketLoggingStatusResponse"))
  { *type = (44);
   return soap_in__ns1__GetBucketLoggingStatusResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:GetBucketLoggingStatus"))
  { *type = (43);
   return soap_in__ns1__GetBucketLoggingStatus(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:DeleteBucketResponse"))
  { *type = (42);
   return soap_in__ns1__DeleteBucketResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:DeleteBucket"))
  { *type = (41);
   return soap_in__ns1__DeleteBucket(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CreateBucketResponse"))
  { *type = (40);
   return soap_in__ns1__CreateBucketResponse(soap, __null, __null, __null);
  }
  if (!soap_match_tag(soap, t, "ns1:CreateBucket"))
  { *type = (39);
   return soap_in__ns1__CreateBucket(soap, __null, __null, __null);
  }
 }
 }
 soap->error = 3;
 return __null;
}


 int soap_ignore_element(struct soap *soap)
{
 if (!soap_peek_element(soap))
 { int t;
  ;
  if (soap->mustUnderstand && !soap->other)
   return soap->error = 8;
  if (((soap->mode & 0x00001000) && soap->part != 3) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
  { ;
   return soap->error = 3;
  }
  if (!*soap->id || !soap_getelement(soap, &t))
  { soap->peeked = 0;
   if (soap->fignore)
    soap->error = soap->fignore(soap, soap->tag);
   else
    soap->error = 0;
   ;
   if (!soap->error && soap->body)
   { soap->level++;
    while (!soap_ignore_element(soap))
     ;
    if (soap->error == 6)
     soap->error = soap_element_end_in(soap, __null);
   }
  }
 }
 return soap->error;
}


 int soap_putindependent(struct soap *soap)
{
 int i;
 struct soap_plist *pp;
 if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (0x00020000 | 0x20000000)))
  for (i = 0; i < (4096); i++)
   for (pp = soap->pht[i]; pp; pp = pp->next)
    if (pp->mark1 == 2 || pp->mark2 == 2)
     if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
      return soap->error;
 return 0;
}



 int soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
 switch (type)
 {
 case (3):
  return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
 case (1):
  return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
 case (85):
  return soap_out_LONG64(soap, tag, id, (const long long *)ptr, "xsd:long");
 case (10):
  return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
 case (9):
  return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
 case (84):
  return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
 case (88):
  return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
 case (75):
  return soap_out_ns1__Payer(soap, tag, id, (const enum ns1__Payer *)ptr, "ns1:Payer");
 case (74):
  return soap_out_ns1__MetadataDirective(soap, tag, id, (const enum ns1__MetadataDirective *)ptr, "ns1:MetadataDirective");
 case (73):
  return soap_out_ns1__StorageClass(soap, tag, id, (const enum ns1__StorageClass *)ptr, "ns1:StorageClass");
 case (72):
  return soap_out_ns1__Permission(soap, tag, id, (const enum ns1__Permission *)ptr, "ns1:Permission");
 case (71):
  return ((_ns1__CopyObjectResponse *)ptr)->soap_out(soap, "ns1:CopyObjectResponse", id, __null);
 case (70):
  return ((_ns1__CopyObject *)ptr)->soap_out(soap, "ns1:CopyObject", id, __null);
 case (69):
  return ((_ns1__PostResponse *)ptr)->soap_out(soap, "ns1:PostResponse", id, __null);
 case (68):
  return ((_ns1__ListAllMyBucketsResponse *)ptr)->soap_out(soap, "ns1:ListAllMyBucketsResponse", id, __null);
 case (67):
  return ((_ns1__ListAllMyBuckets *)ptr)->soap_out(soap, "ns1:ListAllMyBuckets", id, __null);
 case (66):
  return ((_ns1__ListBucketResponse *)ptr)->soap_out(soap, "ns1:ListBucketResponse", id, __null);
 case (65):
  return ((_ns1__ListBucket *)ptr)->soap_out(soap, "ns1:ListBucket", id, __null);
 case (64):
  return ((_ns1__DeleteObjectResponse *)ptr)->soap_out(soap, "ns1:DeleteObjectResponse", id, __null);
 case (63):
  return ((_ns1__DeleteObject *)ptr)->soap_out(soap, "ns1:DeleteObject", id, __null);
 case (62):
  return ((_ns1__PutObjectInlineResponse *)ptr)->soap_out(soap, "ns1:PutObjectInlineResponse", id, __null);
 case (61):
  return ((_ns1__PutObjectInline *)ptr)->soap_out(soap, "ns1:PutObjectInline", id, __null);
 case (60):
  return ((_ns1__PutObjectResponse *)ptr)->soap_out(soap, "ns1:PutObjectResponse", id, __null);
 case (59):
  return ((_ns1__PutObject *)ptr)->soap_out(soap, "ns1:PutObject", id, __null);
 case (58):
  return ((_ns1__GetObjectExtendedResponse *)ptr)->soap_out(soap, "ns1:GetObjectExtendedResponse", id, __null);
 case (57):
  return ((_ns1__GetObjectExtended *)ptr)->soap_out(soap, "ns1:GetObjectExtended", id, __null);
 case (56):
  return ((_ns1__GetObjectResponse *)ptr)->soap_out(soap, "ns1:GetObjectResponse", id, __null);
 case (55):
  return ((_ns1__GetObject *)ptr)->soap_out(soap, "ns1:GetObject", id, __null);
 case (54):
  return ((_ns1__SetBucketAccessControlPolicyResponse *)ptr)->soap_out(soap, "ns1:SetBucketAccessControlPolicyResponse", id, __null);
 case (53):
  return ((_ns1__SetBucketAccessControlPolicy *)ptr)->soap_out(soap, "ns1:SetBucketAccessControlPolicy", id, __null);
 case (52):
  return ((_ns1__SetObjectAccessControlPolicyResponse *)ptr)->soap_out(soap, "ns1:SetObjectAccessControlPolicyResponse", id, __null);
 case (51):
  return ((_ns1__SetObjectAccessControlPolicy *)ptr)->soap_out(soap, "ns1:SetObjectAccessControlPolicy", id, __null);
 case (50):
  return ((_ns1__GetBucketAccessControlPolicyResponse *)ptr)->soap_out(soap, "ns1:GetBucketAccessControlPolicyResponse", id, __null);
 case (49):
  return ((_ns1__GetBucketAccessControlPolicy *)ptr)->soap_out(soap, "ns1:GetBucketAccessControlPolicy", id, __null);
 case (48):
  return ((_ns1__GetObjectAccessControlPolicyResponse *)ptr)->soap_out(soap, "ns1:GetObjectAccessControlPolicyResponse", id, __null);
 case (47):
  return ((_ns1__GetObjectAccessControlPolicy *)ptr)->soap_out(soap, "ns1:GetObjectAccessControlPolicy", id, __null);
 case (46):
  return ((_ns1__SetBucketLoggingStatusResponse *)ptr)->soap_out(soap, "ns1:SetBucketLoggingStatusResponse", id, __null);
 case (45):
  return ((_ns1__SetBucketLoggingStatus *)ptr)->soap_out(soap, "ns1:SetBucketLoggingStatus", id, __null);
 case (44):
  return ((_ns1__GetBucketLoggingStatusResponse *)ptr)->soap_out(soap, "ns1:GetBucketLoggingStatusResponse", id, __null);
 case (43):
  return ((_ns1__GetBucketLoggingStatus *)ptr)->soap_out(soap, "ns1:GetBucketLoggingStatus", id, __null);
 case (42):
  return ((_ns1__DeleteBucketResponse *)ptr)->soap_out(soap, "ns1:DeleteBucketResponse", id, __null);
 case (41):
  return ((_ns1__DeleteBucket *)ptr)->soap_out(soap, "ns1:DeleteBucket", id, __null);
 case (40):
  return ((_ns1__CreateBucketResponse *)ptr)->soap_out(soap, "ns1:CreateBucketResponse", id, __null);
 case (39):
  return ((_ns1__CreateBucket *)ptr)->soap_out(soap, "ns1:CreateBucket", id, __null);
 case (38):
  return ((ns1__RequestPaymentConfiguration *)ptr)->soap_out(soap, tag, id, "ns1:RequestPaymentConfiguration");
 case (37):
  return ((ns1__CopyObjectResult *)ptr)->soap_out(soap, tag, id, "ns1:CopyObjectResult");
 case (36):
  return ((ns1__ListAllMyBucketsList *)ptr)->soap_out(soap, tag, id, "ns1:ListAllMyBucketsList");
 case (35):
  return ((ns1__ListAllMyBucketsResult *)ptr)->soap_out(soap, tag, id, "ns1:ListAllMyBucketsResult");
 case (34):
  return ((ns1__ListAllMyBucketsEntry *)ptr)->soap_out(soap, tag, id, "ns1:ListAllMyBucketsEntry");
 case (33):
  return ((ns1__ListBucketResult *)ptr)->soap_out(soap, tag, id, "ns1:ListBucketResult");
 case (32):
  return ((ns1__PrefixEntry *)ptr)->soap_out(soap, tag, id, "ns1:PrefixEntry");
 case (31):
  return ((ns1__ListEntry *)ptr)->soap_out(soap, tag, id, "ns1:ListEntry");
 case (30):
  return ((ns1__PutObjectResult *)ptr)->soap_out(soap, tag, id, "ns1:PutObjectResult");
 case (29):
  return ((ns1__GetObjectResult *)ptr)->soap_out(soap, tag, id, "ns1:GetObjectResult");
 case (28):
  return ((ns1__AccessControlPolicy *)ptr)->soap_out(soap, tag, id, "ns1:AccessControlPolicy");
 case (27):
  return ((ns1__LocationConstraint *)ptr)->soap_out(soap, tag, id, "ns1:LocationConstraint");
 case (26):
  return ((ns1__CreateBucketConfiguration *)ptr)->soap_out(soap, tag, id, "ns1:CreateBucketConfiguration");
 case (25):
  return ((ns1__AccessControlList *)ptr)->soap_out(soap, tag, id, "ns1:AccessControlList");
 case (24):
  return ((ns1__Grant *)ptr)->soap_out(soap, tag, id, "ns1:Grant");
 case (23):
  return ((ns1__Group *)ptr)->soap_out(soap, tag, id, "ns1:Group");
 case (22):
  return ((ns1__CanonicalUser *)ptr)->soap_out(soap, tag, id, "ns1:CanonicalUser");
 case (21):
  return ((ns1__AmazonCustomerByEmail *)ptr)->soap_out(soap, tag, id, "ns1:AmazonCustomerByEmail");
 case (20):
  return ((ns1__User *)ptr)->soap_out(soap, tag, id, "ns1:User");
 case (19):
  return ((ns1__Grantee *)ptr)->soap_out(soap, tag, id, "ns1:Grantee");
 case (18):
  return ((ns1__LoggingSettings *)ptr)->soap_out(soap, tag, id, "ns1:LoggingSettings");
 case (17):
  return ((ns1__BucketLoggingStatus *)ptr)->soap_out(soap, tag, id, "ns1:BucketLoggingStatus");
 case (16):
  return ((ns1__CreateBucketResult *)ptr)->soap_out(soap, tag, id, "ns1:CreateBucketResult");
 case (15):
  return ((ns1__Result *)ptr)->soap_out(soap, tag, id, "ns1:Result");
 case (14):
  return ((ns1__Status *)ptr)->soap_out(soap, tag, id, "ns1:Status");
 case (13):
  return ((ns1__MetadataEntry *)ptr)->soap_out(soap, tag, id, "ns1:MetadataEntry");
 case (8):
  return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
 case (173):
  return soap_out_PointerTo_ns1__CopyObjectResponse(soap, tag, id, (_ns1__CopyObjectResponse *const*)ptr, "ns1:CopyObjectResponse");
 case (172):
  return soap_out_PointerTo_ns1__CopyObject(soap, tag, id, (_ns1__CopyObject *const*)ptr, "ns1:CopyObject");
 case (169):
  return soap_out_PointerTo_ns1__GetBucketLoggingStatusResponse(soap, tag, id, (_ns1__GetBucketLoggingStatusResponse *const*)ptr, "ns1:GetBucketLoggingStatusResponse");
 case (168):
  return soap_out_PointerTo_ns1__GetBucketLoggingStatus(soap, tag, id, (_ns1__GetBucketLoggingStatus *const*)ptr, "ns1:GetBucketLoggingStatus");
 case (165):
  return soap_out_PointerTo_ns1__SetBucketLoggingStatusResponse(soap, tag, id, (_ns1__SetBucketLoggingStatusResponse *const*)ptr, "ns1:SetBucketLoggingStatusResponse");
 case (164):
  return soap_out_PointerTo_ns1__SetBucketLoggingStatus(soap, tag, id, (_ns1__SetBucketLoggingStatus *const*)ptr, "ns1:SetBucketLoggingStatus");
 case (161):
  return soap_out_PointerTo_ns1__ListAllMyBucketsResponse(soap, tag, id, (_ns1__ListAllMyBucketsResponse *const*)ptr, "ns1:ListAllMyBucketsResponse");
 case (160):
  return soap_out_PointerTo_ns1__ListAllMyBuckets(soap, tag, id, (_ns1__ListAllMyBuckets *const*)ptr, "ns1:ListAllMyBuckets");
 case (157):
  return soap_out_PointerTo_ns1__ListBucketResponse(soap, tag, id, (_ns1__ListBucketResponse *const*)ptr, "ns1:ListBucketResponse");
 case (156):
  return soap_out_PointerTo_ns1__ListBucket(soap, tag, id, (_ns1__ListBucket *const*)ptr, "ns1:ListBucket");
 case (153):
  return soap_out_PointerTo_ns1__DeleteObjectResponse(soap, tag, id, (_ns1__DeleteObjectResponse *const*)ptr, "ns1:DeleteObjectResponse");
 case (152):
  return soap_out_PointerTo_ns1__DeleteObject(soap, tag, id, (_ns1__DeleteObject *const*)ptr, "ns1:DeleteObject");
 case (149):
  return soap_out_PointerTo_ns1__PutObjectInlineResponse(soap, tag, id, (_ns1__PutObjectInlineResponse *const*)ptr, "ns1:PutObjectInlineResponse");
 case (148):
  return soap_out_PointerTo_ns1__PutObjectInline(soap, tag, id, (_ns1__PutObjectInline *const*)ptr, "ns1:PutObjectInline");
 case (145):
  return soap_out_PointerTo_ns1__PutObjectResponse(soap, tag, id, (_ns1__PutObjectResponse *const*)ptr, "ns1:PutObjectResponse");
 case (144):
  return soap_out_PointerTo_ns1__PutObject(soap, tag, id, (_ns1__PutObject *const*)ptr, "ns1:PutObject");
 case (141):
  return soap_out_PointerTo_ns1__GetObjectExtendedResponse(soap, tag, id, (_ns1__GetObjectExtendedResponse *const*)ptr, "ns1:GetObjectExtendedResponse");
 case (140):
  return soap_out_PointerTo_ns1__GetObjectExtended(soap, tag, id, (_ns1__GetObjectExtended *const*)ptr, "ns1:GetObjectExtended");
 case (137):
  return soap_out_PointerTo_ns1__GetObjectResponse(soap, tag, id, (_ns1__GetObjectResponse *const*)ptr, "ns1:GetObjectResponse");
 case (136):
  return soap_out_PointerTo_ns1__GetObject(soap, tag, id, (_ns1__GetObject *const*)ptr, "ns1:GetObject");
 case (133):
  return soap_out_PointerTo_ns1__SetBucketAccessControlPolicyResponse(soap, tag, id, (_ns1__SetBucketAccessControlPolicyResponse *const*)ptr, "ns1:SetBucketAccessControlPolicyResponse");
 case (132):
  return soap_out_PointerTo_ns1__SetBucketAccessControlPolicy(soap, tag, id, (_ns1__SetBucketAccessControlPolicy *const*)ptr, "ns1:SetBucketAccessControlPolicy");
 case (129):
  return soap_out_PointerTo_ns1__SetObjectAccessControlPolicyResponse(soap, tag, id, (_ns1__SetObjectAccessControlPolicyResponse *const*)ptr, "ns1:SetObjectAccessControlPolicyResponse");
 case (128):
  return soap_out_PointerTo_ns1__SetObjectAccessControlPolicy(soap, tag, id, (_ns1__SetObjectAccessControlPolicy *const*)ptr, "ns1:SetObjectAccessControlPolicy");
 case (125):
  return soap_out_PointerTo_ns1__GetBucketAccessControlPolicyResponse(soap, tag, id, (_ns1__GetBucketAccessControlPolicyResponse *const*)ptr, "ns1:GetBucketAccessControlPolicyResponse");
 case (124):
  return soap_out_PointerTo_ns1__GetBucketAccessControlPolicy(soap, tag, id, (_ns1__GetBucketAccessControlPolicy *const*)ptr, "ns1:GetBucketAccessControlPolicy");
 case (121):
  return soap_out_PointerTo_ns1__GetObjectAccessControlPolicyResponse(soap, tag, id, (_ns1__GetObjectAccessControlPolicyResponse *const*)ptr, "ns1:GetObjectAccessControlPolicyResponse");
 case (120):
  return soap_out_PointerTo_ns1__GetObjectAccessControlPolicy(soap, tag, id, (_ns1__GetObjectAccessControlPolicy *const*)ptr, "ns1:GetObjectAccessControlPolicy");
 case (117):
  return soap_out_PointerTo_ns1__DeleteBucketResponse(soap, tag, id, (_ns1__DeleteBucketResponse *const*)ptr, "ns1:DeleteBucketResponse");
 case (116):
  return soap_out_PointerTo_ns1__DeleteBucket(soap, tag, id, (_ns1__DeleteBucket *const*)ptr, "ns1:DeleteBucket");
 case (113):
  return soap_out_PointerTo_ns1__CreateBucketResponse(soap, tag, id, (_ns1__CreateBucketResponse *const*)ptr, "ns1:CreateBucketResponse");
 case (112):
  return soap_out_PointerTo_ns1__CreateBucket(soap, tag, id, (_ns1__CreateBucket *const*)ptr, "ns1:CreateBucket");
 case (111):
  return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
 case (110):
  return soap_out_PointerTons1__CopyObjectResult(soap, tag, id, (ns1__CopyObjectResult *const*)ptr, "ns1:CopyObjectResult");
 case (109):
  return soap_out_PointerTons1__MetadataDirective(soap, tag, id, (enum ns1__MetadataDirective *const*)ptr, "ns1:MetadataDirective");
 case (108):
  return soap_out_PointerTons1__ListAllMyBucketsResult(soap, tag, id, (ns1__ListAllMyBucketsResult *const*)ptr, "ns1:ListAllMyBucketsResult");
 case (107):
  return soap_out_PointerTons1__ListBucketResult(soap, tag, id, (ns1__ListBucketResult *const*)ptr, "ns1:ListBucketResult");
 case (106):
  return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
 case (105):
  return soap_out_PointerTons1__PutObjectResult(soap, tag, id, (ns1__PutObjectResult *const*)ptr, "ns1:PutObjectResult");
 case (104):
  return soap_out_PointerTons1__StorageClass(soap, tag, id, (enum ns1__StorageClass *const*)ptr, "ns1:StorageClass");
 case (103):
  return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
 case (102):
  return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
 case (101):
  return soap_out_PointerToLONG64(soap, tag, id, (long long *const*)ptr, "xsd:long");
 case (100):
  return soap_out_PointerTons1__GetObjectResult(soap, tag, id, (ns1__GetObjectResult *const*)ptr, "ns1:GetObjectResult");
 case (99):
  return soap_out_PointerTons1__AccessControlPolicy(soap, tag, id, (ns1__AccessControlPolicy *const*)ptr, "ns1:AccessControlPolicy");
 case (98):
  return soap_out_PointerTons1__BucketLoggingStatus(soap, tag, id, (ns1__BucketLoggingStatus *const*)ptr, "ns1:BucketLoggingStatus");
 case (97):
  return soap_out_PointerTons1__CreateBucketResult(soap, tag, id, (ns1__CreateBucketResult *const*)ptr, "ns1:CreateBucketResult");
 case (96):
  return soap_out_PointerTotime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
 case (95):
  return soap_out_PointerToPointerTons1__ListAllMyBucketsEntry(soap, tag, id, (ns1__ListAllMyBucketsEntry **const*)ptr, "ns1:ListAllMyBucketsEntry");
 case (94):
  return soap_out_PointerTons1__ListAllMyBucketsEntry(soap, tag, id, (ns1__ListAllMyBucketsEntry *const*)ptr, "ns1:ListAllMyBucketsEntry");
 case (93):
  return soap_out_PointerTons1__ListAllMyBucketsList(soap, tag, id, (ns1__ListAllMyBucketsList *const*)ptr, "ns1:ListAllMyBucketsList");
 case (92):
  return soap_out_PointerToPointerTons1__PrefixEntry(soap, tag, id, (ns1__PrefixEntry **const*)ptr, "ns1:PrefixEntry");
 case (91):
  return soap_out_PointerTons1__PrefixEntry(soap, tag, id, (ns1__PrefixEntry *const*)ptr, "ns1:PrefixEntry");
 case (90):
  return soap_out_PointerToPointerTons1__ListEntry(soap, tag, id, (ns1__ListEntry **const*)ptr, "ns1:ListEntry");
 case (89):
  return soap_out_PointerTons1__ListEntry(soap, tag, id, (ns1__ListEntry *const*)ptr, "ns1:ListEntry");
 case (87):
  return soap_out_PointerToPointerTons1__MetadataEntry(soap, tag, id, (ns1__MetadataEntry **const*)ptr, "ns1:MetadataEntry");
 case (86):
  return soap_out_PointerTons1__MetadataEntry(soap, tag, id, (ns1__MetadataEntry *const*)ptr, "ns1:MetadataEntry");
 case (83):
  return soap_out_PointerTons1__CanonicalUser(soap, tag, id, (ns1__CanonicalUser *const*)ptr, "ns1:CanonicalUser");
 case (82):
  return soap_out_PointerTons1__LocationConstraint(soap, tag, id, (ns1__LocationConstraint *const*)ptr, "ns1:LocationConstraint");
 case (81):
  return soap_out_PointerToPointerTons1__Grant(soap, tag, id, (ns1__Grant **const*)ptr, "ns1:Grant");
 case (80):
  return soap_out_PointerTons1__Grant(soap, tag, id, (ns1__Grant *const*)ptr, "ns1:Grant");
 case (79):
  return soap_out_PointerTons1__Grantee(soap, tag, id, (ns1__Grantee *const*)ptr, "ns1:Grantee");
 case (78):
  return soap_out_PointerTons1__AccessControlList(soap, tag, id, (ns1__AccessControlList *const*)ptr, "ns1:AccessControlList");
 case (77):
  return soap_out_PointerTons1__LoggingSettings(soap, tag, id, (ns1__LoggingSettings *const*)ptr, "ns1:LoggingSettings");
 case (76):
  return soap_out_PointerTons1__Status(soap, tag, id, (ns1__Status *const*)ptr, "ns1:Status");
 case (11):
  return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
 case (7):
  return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:anyURI");
 case (5):
  return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
 case (4):
  return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
 }
 return 0;
}



 void soap_markelement(struct soap *soap, const void *ptr, int type)
{
 (void)soap; (void)ptr; (void)type;
 switch (type)
 {
 case (71):
  ((_ns1__CopyObjectResponse *)ptr)->soap_serialize(soap);
  break;
 case (70):
  ((_ns1__CopyObject *)ptr)->soap_serialize(soap);
  break;
 case (69):
  ((_ns1__PostResponse *)ptr)->soap_serialize(soap);
  break;
 case (68):
  ((_ns1__ListAllMyBucketsResponse *)ptr)->soap_serialize(soap);
  break;
 case (67):
  ((_ns1__ListAllMyBuckets *)ptr)->soap_serialize(soap);
  break;
 case (66):
  ((_ns1__ListBucketResponse *)ptr)->soap_serialize(soap);
  break;
 case (65):
  ((_ns1__ListBucket *)ptr)->soap_serialize(soap);
  break;
 case (64):
  ((_ns1__DeleteObjectResponse *)ptr)->soap_serialize(soap);
  break;
 case (63):
  ((_ns1__DeleteObject *)ptr)->soap_serialize(soap);
  break;
 case (62):
  ((_ns1__PutObjectInlineResponse *)ptr)->soap_serialize(soap);
  break;
 case (61):
  ((_ns1__PutObjectInline *)ptr)->soap_serialize(soap);
  break;
 case (60):
  ((_ns1__PutObjectResponse *)ptr)->soap_serialize(soap);
  break;
 case (59):
  ((_ns1__PutObject *)ptr)->soap_serialize(soap);
  break;
 case (58):
  ((_ns1__GetObjectExtendedResponse *)ptr)->soap_serialize(soap);
  break;
 case (57):
  ((_ns1__GetObjectExtended *)ptr)->soap_serialize(soap);
  break;
 case (56):
  ((_ns1__GetObjectResponse *)ptr)->soap_serialize(soap);
  break;
 case (55):
  ((_ns1__GetObject *)ptr)->soap_serialize(soap);
  break;
 case (54):
  ((_ns1__SetBucketAccessControlPolicyResponse *)ptr)->soap_serialize(soap);
  break;
 case (53):
  ((_ns1__SetBucketAccessControlPolicy *)ptr)->soap_serialize(soap);
  break;
 case (52):
  ((_ns1__SetObjectAccessControlPolicyResponse *)ptr)->soap_serialize(soap);
  break;
 case (51):
  ((_ns1__SetObjectAccessControlPolicy *)ptr)->soap_serialize(soap);
  break;
 case (50):
  ((_ns1__GetBucketAccessControlPolicyResponse *)ptr)->soap_serialize(soap);
  break;
 case (49):
  ((_ns1__GetBucketAccessControlPolicy *)ptr)->soap_serialize(soap);
  break;
 case (48):
  ((_ns1__GetObjectAccessControlPolicyResponse *)ptr)->soap_serialize(soap);
  break;
 case (47):
  ((_ns1__GetObjectAccessControlPolicy *)ptr)->soap_serialize(soap);
  break;
 case (46):
  ((_ns1__SetBucketLoggingStatusResponse *)ptr)->soap_serialize(soap);
  break;
 case (45):
  ((_ns1__SetBucketLoggingStatus *)ptr)->soap_serialize(soap);
  break;
 case (44):
  ((_ns1__GetBucketLoggingStatusResponse *)ptr)->soap_serialize(soap);
  break;
 case (43):
  ((_ns1__GetBucketLoggingStatus *)ptr)->soap_serialize(soap);
  break;
 case (42):
  ((_ns1__DeleteBucketResponse *)ptr)->soap_serialize(soap);
  break;
 case (41):
  ((_ns1__DeleteBucket *)ptr)->soap_serialize(soap);
  break;
 case (40):
  ((_ns1__CreateBucketResponse *)ptr)->soap_serialize(soap);
  break;
 case (39):
  ((_ns1__CreateBucket *)ptr)->soap_serialize(soap);
  break;
 case (38):
  ((ns1__RequestPaymentConfiguration *)ptr)->soap_serialize(soap);
  break;
 case (37):
  ((ns1__CopyObjectResult *)ptr)->soap_serialize(soap);
  break;
 case (36):
  ((ns1__ListAllMyBucketsList *)ptr)->soap_serialize(soap);
  break;
 case (35):
  ((ns1__ListAllMyBucketsResult *)ptr)->soap_serialize(soap);
  break;
 case (34):
  ((ns1__ListAllMyBucketsEntry *)ptr)->soap_serialize(soap);
  break;
 case (33):
  ((ns1__ListBucketResult *)ptr)->soap_serialize(soap);
  break;
 case (32):
  ((ns1__PrefixEntry *)ptr)->soap_serialize(soap);
  break;
 case (31):
  ((ns1__ListEntry *)ptr)->soap_serialize(soap);
  break;
 case (30):
  ((ns1__PutObjectResult *)ptr)->soap_serialize(soap);
  break;
 case (29):
  ((ns1__GetObjectResult *)ptr)->soap_serialize(soap);
  break;
 case (28):
  ((ns1__AccessControlPolicy *)ptr)->soap_serialize(soap);
  break;
 case (27):
  ((ns1__LocationConstraint *)ptr)->soap_serialize(soap);
  break;
 case (26):
  ((ns1__CreateBucketConfiguration *)ptr)->soap_serialize(soap);
  break;
 case (25):
  ((ns1__AccessControlList *)ptr)->soap_serialize(soap);
  break;
 case (24):
  ((ns1__Grant *)ptr)->soap_serialize(soap);
  break;
 case (23):
  ((ns1__Group *)ptr)->soap_serialize(soap);
  break;
 case (22):
  ((ns1__CanonicalUser *)ptr)->soap_serialize(soap);
  break;
 case (21):
  ((ns1__AmazonCustomerByEmail *)ptr)->soap_serialize(soap);
  break;
 case (20):
  ((ns1__User *)ptr)->soap_serialize(soap);
  break;
 case (19):
  ((ns1__Grantee *)ptr)->soap_serialize(soap);
  break;
 case (18):
  ((ns1__LoggingSettings *)ptr)->soap_serialize(soap);
  break;
 case (17):
  ((ns1__BucketLoggingStatus *)ptr)->soap_serialize(soap);
  break;
 case (16):
  ((ns1__CreateBucketResult *)ptr)->soap_serialize(soap);
  break;
 case (15):
  ((ns1__Result *)ptr)->soap_serialize(soap);
  break;
 case (14):
  ((ns1__Status *)ptr)->soap_serialize(soap);
  break;
 case (13):
  ((ns1__MetadataEntry *)ptr)->soap_serialize(soap);
  break;
 case (8):
  ((xsd__base64Binary *)ptr)->soap_serialize(soap);
  break;
 case (175):
  soap_serialize___ns1__CopyObject(soap, (const struct __ns1__CopyObject *)ptr);
  break;
 case (171):
  soap_serialize___ns1__GetBucketLoggingStatus(soap, (const struct __ns1__GetBucketLoggingStatus *)ptr);
  break;
 case (167):
  soap_serialize___ns1__SetBucketLoggingStatus(soap, (const struct __ns1__SetBucketLoggingStatus *)ptr);
  break;
 case (163):
  soap_serialize___ns1__ListAllMyBuckets(soap, (const struct __ns1__ListAllMyBuckets *)ptr);
  break;
 case (159):
  soap_serialize___ns1__ListBucket(soap, (const struct __ns1__ListBucket *)ptr);
  break;
 case (155):
  soap_serialize___ns1__DeleteObject(soap, (const struct __ns1__DeleteObject *)ptr);
  break;
 case (151):
  soap_serialize___ns1__PutObjectInline(soap, (const struct __ns1__PutObjectInline *)ptr);
  break;
 case (147):
  soap_serialize___ns1__PutObject(soap, (const struct __ns1__PutObject *)ptr);
  break;
 case (143):
  soap_serialize___ns1__GetObjectExtended(soap, (const struct __ns1__GetObjectExtended *)ptr);
  break;
 case (139):
  soap_serialize___ns1__GetObject(soap, (const struct __ns1__GetObject *)ptr);
  break;
 case (135):
  soap_serialize___ns1__SetBucketAccessControlPolicy(soap, (const struct __ns1__SetBucketAccessControlPolicy *)ptr);
  break;
 case (131):
  soap_serialize___ns1__SetObjectAccessControlPolicy(soap, (const struct __ns1__SetObjectAccessControlPolicy *)ptr);
  break;
 case (127):
  soap_serialize___ns1__GetBucketAccessControlPolicy(soap, (const struct __ns1__GetBucketAccessControlPolicy *)ptr);
  break;
 case (123):
  soap_serialize___ns1__GetObjectAccessControlPolicy(soap, (const struct __ns1__GetObjectAccessControlPolicy *)ptr);
  break;
 case (119):
  soap_serialize___ns1__DeleteBucket(soap, (const struct __ns1__DeleteBucket *)ptr);
  break;
 case (115):
  soap_serialize___ns1__CreateBucket(soap, (const struct __ns1__CreateBucket *)ptr);
  break;
 case (173):
  soap_serialize_PointerTo_ns1__CopyObjectResponse(soap, (_ns1__CopyObjectResponse *const*)ptr);
  break;
 case (172):
  soap_serialize_PointerTo_ns1__CopyObject(soap, (_ns1__CopyObject *const*)ptr);
  break;
 case (169):
  soap_serialize_PointerTo_ns1__GetBucketLoggingStatusResponse(soap, (_ns1__GetBucketLoggingStatusResponse *const*)ptr);
  break;
 case (168):
  soap_serialize_PointerTo_ns1__GetBucketLoggingStatus(soap, (_ns1__GetBucketLoggingStatus *const*)ptr);
  break;
 case (165):
  soap_serialize_PointerTo_ns1__SetBucketLoggingStatusResponse(soap, (_ns1__SetBucketLoggingStatusResponse *const*)ptr);
  break;
 case (164):
  soap_serialize_PointerTo_ns1__SetBucketLoggingStatus(soap, (_ns1__SetBucketLoggingStatus *const*)ptr);
  break;
 case (161):
  soap_serialize_PointerTo_ns1__ListAllMyBucketsResponse(soap, (_ns1__ListAllMyBucketsResponse *const*)ptr);
  break;
 case (160):
  soap_serialize_PointerTo_ns1__ListAllMyBuckets(soap, (_ns1__ListAllMyBuckets *const*)ptr);
  break;
 case (157):
  soap_serialize_PointerTo_ns1__ListBucketResponse(soap, (_ns1__ListBucketResponse *const*)ptr);
  break;
 case (156):
  soap_serialize_PointerTo_ns1__ListBucket(soap, (_ns1__ListBucket *const*)ptr);
  break;
 case (153):
  soap_serialize_PointerTo_ns1__DeleteObjectResponse(soap, (_ns1__DeleteObjectResponse *const*)ptr);
  break;
 case (152):
  soap_serialize_PointerTo_ns1__DeleteObject(soap, (_ns1__DeleteObject *const*)ptr);
  break;
 case (149):
  soap_serialize_PointerTo_ns1__PutObjectInlineResponse(soap, (_ns1__PutObjectInlineResponse *const*)ptr);
  break;
 case (148):
  soap_serialize_PointerTo_ns1__PutObjectInline(soap, (_ns1__PutObjectInline *const*)ptr);
  break;
 case (145):
  soap_serialize_PointerTo_ns1__PutObjectResponse(soap, (_ns1__PutObjectResponse *const*)ptr);
  break;
 case (144):
  soap_serialize_PointerTo_ns1__PutObject(soap, (_ns1__PutObject *const*)ptr);
  break;
 case (141):
  soap_serialize_PointerTo_ns1__GetObjectExtendedResponse(soap, (_ns1__GetObjectExtendedResponse *const*)ptr);
  break;
 case (140):
  soap_serialize_PointerTo_ns1__GetObjectExtended(soap, (_ns1__GetObjectExtended *const*)ptr);
  break;
 case (137):
  soap_serialize_PointerTo_ns1__GetObjectResponse(soap, (_ns1__GetObjectResponse *const*)ptr);
  break;
 case (136):
  soap_serialize_PointerTo_ns1__GetObject(soap, (_ns1__GetObject *const*)ptr);
  break;
 case (133):
  soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicyResponse(soap, (_ns1__SetBucketAccessControlPolicyResponse *const*)ptr);
  break;
 case (132):
  soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicy(soap, (_ns1__SetBucketAccessControlPolicy *const*)ptr);
  break;
 case (129):
  soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicyResponse(soap, (_ns1__SetObjectAccessControlPolicyResponse *const*)ptr);
  break;
 case (128):
  soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicy(soap, (_ns1__SetObjectAccessControlPolicy *const*)ptr);
  break;
 case (125):
  soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicyResponse(soap, (_ns1__GetBucketAccessControlPolicyResponse *const*)ptr);
  break;
 case (124):
  soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicy(soap, (_ns1__GetBucketAccessControlPolicy *const*)ptr);
  break;
 case (121):
  soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicyResponse(soap, (_ns1__GetObjectAccessControlPolicyResponse *const*)ptr);
  break;
 case (120):
  soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicy(soap, (_ns1__GetObjectAccessControlPolicy *const*)ptr);
  break;
 case (117):
  soap_serialize_PointerTo_ns1__DeleteBucketResponse(soap, (_ns1__DeleteBucketResponse *const*)ptr);
  break;
 case (116):
  soap_serialize_PointerTo_ns1__DeleteBucket(soap, (_ns1__DeleteBucket *const*)ptr);
  break;
 case (113):
  soap_serialize_PointerTo_ns1__CreateBucketResponse(soap, (_ns1__CreateBucketResponse *const*)ptr);
  break;
 case (112):
  soap_serialize_PointerTo_ns1__CreateBucket(soap, (_ns1__CreateBucket *const*)ptr);
  break;
 case (111):
  soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
  break;
 case (110):
  soap_serialize_PointerTons1__CopyObjectResult(soap, (ns1__CopyObjectResult *const*)ptr);
  break;
 case (109):
  soap_serialize_PointerTons1__MetadataDirective(soap, (enum ns1__MetadataDirective *const*)ptr);
  break;
 case (108):
  soap_serialize_PointerTons1__ListAllMyBucketsResult(soap, (ns1__ListAllMyBucketsResult *const*)ptr);
  break;
 case (107):
  soap_serialize_PointerTons1__ListBucketResult(soap, (ns1__ListBucketResult *const*)ptr);
  break;
 case (106):
  soap_serialize_PointerToint(soap, (int *const*)ptr);
  break;
 case (105):
  soap_serialize_PointerTons1__PutObjectResult(soap, (ns1__PutObjectResult *const*)ptr);
  break;
 case (104):
  soap_serialize_PointerTons1__StorageClass(soap, (enum ns1__StorageClass *const*)ptr);
  break;
 case (103):
  soap_serialize_PointerTobool(soap, (bool *const*)ptr);
  break;
 case (102):
  soap_serialize_PointerTostring(soap, (char **const*)ptr);
  break;
 case (101):
  soap_serialize_PointerToLONG64(soap, (long long *const*)ptr);
  break;
 case (100):
  soap_serialize_PointerTons1__GetObjectResult(soap, (ns1__GetObjectResult *const*)ptr);
  break;
 case (99):
  soap_serialize_PointerTons1__AccessControlPolicy(soap, (ns1__AccessControlPolicy *const*)ptr);
  break;
 case (98):
  soap_serialize_PointerTons1__BucketLoggingStatus(soap, (ns1__BucketLoggingStatus *const*)ptr);
  break;
 case (97):
  soap_serialize_PointerTons1__CreateBucketResult(soap, (ns1__CreateBucketResult *const*)ptr);
  break;
 case (96):
  soap_serialize_PointerTotime(soap, (time_t *const*)ptr);
  break;
 case (95):
  soap_serialize_PointerToPointerTons1__ListAllMyBucketsEntry(soap, (ns1__ListAllMyBucketsEntry **const*)ptr);
  break;
 case (94):
  soap_serialize_PointerTons1__ListAllMyBucketsEntry(soap, (ns1__ListAllMyBucketsEntry *const*)ptr);
  break;
 case (93):
  soap_serialize_PointerTons1__ListAllMyBucketsList(soap, (ns1__ListAllMyBucketsList *const*)ptr);
  break;
 case (92):
  soap_serialize_PointerToPointerTons1__PrefixEntry(soap, (ns1__PrefixEntry **const*)ptr);
  break;
 case (91):
  soap_serialize_PointerTons1__PrefixEntry(soap, (ns1__PrefixEntry *const*)ptr);
  break;
 case (90):
  soap_serialize_PointerToPointerTons1__ListEntry(soap, (ns1__ListEntry **const*)ptr);
  break;
 case (89):
  soap_serialize_PointerTons1__ListEntry(soap, (ns1__ListEntry *const*)ptr);
  break;
 case (87):
  soap_serialize_PointerToPointerTons1__MetadataEntry(soap, (ns1__MetadataEntry **const*)ptr);
  break;
 case (86):
  soap_serialize_PointerTons1__MetadataEntry(soap, (ns1__MetadataEntry *const*)ptr);
  break;
 case (83):
  soap_serialize_PointerTons1__CanonicalUser(soap, (ns1__CanonicalUser *const*)ptr);
  break;
 case (82):
  soap_serialize_PointerTons1__LocationConstraint(soap, (ns1__LocationConstraint *const*)ptr);
  break;
 case (81):
  soap_serialize_PointerToPointerTons1__Grant(soap, (ns1__Grant **const*)ptr);
  break;
 case (80):
  soap_serialize_PointerTons1__Grant(soap, (ns1__Grant *const*)ptr);
  break;
 case (79):
  soap_serialize_PointerTons1__Grantee(soap, (ns1__Grantee *const*)ptr);
  break;
 case (78):
  soap_serialize_PointerTons1__AccessControlList(soap, (ns1__AccessControlList *const*)ptr);
  break;
 case (77):
  soap_serialize_PointerTons1__LoggingSettings(soap, (ns1__LoggingSettings *const*)ptr);
  break;
 case (76):
  soap_serialize_PointerTons1__Status(soap, (ns1__Status *const*)ptr);
  break;
 case (11):
  soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
  break;
 case (7):
  soap_serialize_string(soap, (char*const*)&ptr);
  break;
 case (5):
  soap_serialize_string(soap, (char*const*)&ptr);
  break;
 case (4):
  soap_serialize_string(soap, (char*const*)&ptr);
  break;
 }
}


 void * soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
 switch (t)
 {
 case (8):
  return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
 case (13):
  return (void*)soap_instantiate_ns1__MetadataEntry(soap, -1, type, arrayType, n);
 case (14):
  return (void*)soap_instantiate_ns1__Status(soap, -1, type, arrayType, n);
 case (15):
  return (void*)soap_instantiate_ns1__Result(soap, -1, type, arrayType, n);
 case (16):
  return (void*)soap_instantiate_ns1__CreateBucketResult(soap, -1, type, arrayType, n);
 case (17):
  return (void*)soap_instantiate_ns1__BucketLoggingStatus(soap, -1, type, arrayType, n);
 case (18):
  return (void*)soap_instantiate_ns1__LoggingSettings(soap, -1, type, arrayType, n);
 case (19):
  return (void*)soap_instantiate_ns1__Grantee(soap, -1, type, arrayType, n);
 case (24):
  return (void*)soap_instantiate_ns1__Grant(soap, -1, type, arrayType, n);
 case (25):
  return (void*)soap_instantiate_ns1__AccessControlList(soap, -1, type, arrayType, n);
 case (26):
  return (void*)soap_instantiate_ns1__CreateBucketConfiguration(soap, -1, type, arrayType, n);
 case (28):
  return (void*)soap_instantiate_ns1__AccessControlPolicy(soap, -1, type, arrayType, n);
 case (30):
  return (void*)soap_instantiate_ns1__PutObjectResult(soap, -1, type, arrayType, n);
 case (31):
  return (void*)soap_instantiate_ns1__ListEntry(soap, -1, type, arrayType, n);
 case (32):
  return (void*)soap_instantiate_ns1__PrefixEntry(soap, -1, type, arrayType, n);
 case (33):
  return (void*)soap_instantiate_ns1__ListBucketResult(soap, -1, type, arrayType, n);
 case (34):
  return (void*)soap_instantiate_ns1__ListAllMyBucketsEntry(soap, -1, type, arrayType, n);
 case (35):
  return (void*)soap_instantiate_ns1__ListAllMyBucketsResult(soap, -1, type, arrayType, n);
 case (36):
  return (void*)soap_instantiate_ns1__ListAllMyBucketsList(soap, -1, type, arrayType, n);
 case (37):
  return (void*)soap_instantiate_ns1__CopyObjectResult(soap, -1, type, arrayType, n);
 case (38):
  return (void*)soap_instantiate_ns1__RequestPaymentConfiguration(soap, -1, type, arrayType, n);
 case (39):
  return (void*)soap_instantiate__ns1__CreateBucket(soap, -1, type, arrayType, n);
 case (40):
  return (void*)soap_instantiate__ns1__CreateBucketResponse(soap, -1, type, arrayType, n);
 case (41):
  return (void*)soap_instantiate__ns1__DeleteBucket(soap, -1, type, arrayType, n);
 case (42):
  return (void*)soap_instantiate__ns1__DeleteBucketResponse(soap, -1, type, arrayType, n);
 case (43):
  return (void*)soap_instantiate__ns1__GetBucketLoggingStatus(soap, -1, type, arrayType, n);
 case (44):
  return (void*)soap_instantiate__ns1__GetBucketLoggingStatusResponse(soap, -1, type, arrayType, n);
 case (45):
  return (void*)soap_instantiate__ns1__SetBucketLoggingStatus(soap, -1, type, arrayType, n);
 case (46):
  return (void*)soap_instantiate__ns1__SetBucketLoggingStatusResponse(soap, -1, type, arrayType, n);
 case (47):
  return (void*)soap_instantiate__ns1__GetObjectAccessControlPolicy(soap, -1, type, arrayType, n);
 case (48):
  return (void*)soap_instantiate__ns1__GetObjectAccessControlPolicyResponse(soap, -1, type, arrayType, n);
 case (49):
  return (void*)soap_instantiate__ns1__GetBucketAccessControlPolicy(soap, -1, type, arrayType, n);
 case (50):
  return (void*)soap_instantiate__ns1__GetBucketAccessControlPolicyResponse(soap, -1, type, arrayType, n);
 case (51):
  return (void*)soap_instantiate__ns1__SetObjectAccessControlPolicy(soap, -1, type, arrayType, n);
 case (52):
  return (void*)soap_instantiate__ns1__SetObjectAccessControlPolicyResponse(soap, -1, type, arrayType, n);
 case (53):
  return (void*)soap_instantiate__ns1__SetBucketAccessControlPolicy(soap, -1, type, arrayType, n);
 case (54):
  return (void*)soap_instantiate__ns1__SetBucketAccessControlPolicyResponse(soap, -1, type, arrayType, n);
 case (55):
  return (void*)soap_instantiate__ns1__GetObject(soap, -1, type, arrayType, n);
 case (56):
  return (void*)soap_instantiate__ns1__GetObjectResponse(soap, -1, type, arrayType, n);
 case (57):
  return (void*)soap_instantiate__ns1__GetObjectExtended(soap, -1, type, arrayType, n);
 case (58):
  return (void*)soap_instantiate__ns1__GetObjectExtendedResponse(soap, -1, type, arrayType, n);
 case (59):
  return (void*)soap_instantiate__ns1__PutObject(soap, -1, type, arrayType, n);
 case (60):
  return (void*)soap_instantiate__ns1__PutObjectResponse(soap, -1, type, arrayType, n);
 case (61):
  return (void*)soap_instantiate__ns1__PutObjectInline(soap, -1, type, arrayType, n);
 case (62):
  return (void*)soap_instantiate__ns1__PutObjectInlineResponse(soap, -1, type, arrayType, n);
 case (63):
  return (void*)soap_instantiate__ns1__DeleteObject(soap, -1, type, arrayType, n);
 case (64):
  return (void*)soap_instantiate__ns1__DeleteObjectResponse(soap, -1, type, arrayType, n);
 case (65):
  return (void*)soap_instantiate__ns1__ListBucket(soap, -1, type, arrayType, n);
 case (66):
  return (void*)soap_instantiate__ns1__ListBucketResponse(soap, -1, type, arrayType, n);
 case (67):
  return (void*)soap_instantiate__ns1__ListAllMyBuckets(soap, -1, type, arrayType, n);
 case (68):
  return (void*)soap_instantiate__ns1__ListAllMyBucketsResponse(soap, -1, type, arrayType, n);
 case (69):
  return (void*)soap_instantiate__ns1__PostResponse(soap, -1, type, arrayType, n);
 case (70):
  return (void*)soap_instantiate__ns1__CopyObject(soap, -1, type, arrayType, n);
 case (71):
  return (void*)soap_instantiate__ns1__CopyObjectResponse(soap, -1, type, arrayType, n);
 case (20):
  return (void*)soap_instantiate_ns1__User(soap, -1, type, arrayType, n);
 case (23):
  return (void*)soap_instantiate_ns1__Group(soap, -1, type, arrayType, n);
 case (27):
  return (void*)soap_instantiate_ns1__LocationConstraint(soap, -1, type, arrayType, n);
 case (29):
  return (void*)soap_instantiate_ns1__GetObjectResult(soap, -1, type, arrayType, n);
 case (21):
  return (void*)soap_instantiate_ns1__AmazonCustomerByEmail(soap, -1, type, arrayType, n);
 case (22):
  return (void*)soap_instantiate_ns1__CanonicalUser(soap, -1, type, arrayType, n);
 case (115):
  return (void*)soap_instantiate___ns1__CreateBucket(soap, -1, type, arrayType, n);
 case (119):
  return (void*)soap_instantiate___ns1__DeleteBucket(soap, -1, type, arrayType, n);
 case (123):
  return (void*)soap_instantiate___ns1__GetObjectAccessControlPolicy(soap, -1, type, arrayType, n);
 case (127):
  return (void*)soap_instantiate___ns1__GetBucketAccessControlPolicy(soap, -1, type, arrayType, n);
 case (131):
  return (void*)soap_instantiate___ns1__SetObjectAccessControlPolicy(soap, -1, type, arrayType, n);
 case (135):
  return (void*)soap_instantiate___ns1__SetBucketAccessControlPolicy(soap, -1, type, arrayType, n);
 case (139):
  return (void*)soap_instantiate___ns1__GetObject(soap, -1, type, arrayType, n);
 case (143):
  return (void*)soap_instantiate___ns1__GetObjectExtended(soap, -1, type, arrayType, n);
 case (147):
  return (void*)soap_instantiate___ns1__PutObject(soap, -1, type, arrayType, n);
 case (151):
  return (void*)soap_instantiate___ns1__PutObjectInline(soap, -1, type, arrayType, n);
 case (155):
  return (void*)soap_instantiate___ns1__DeleteObject(soap, -1, type, arrayType, n);
 case (159):
  return (void*)soap_instantiate___ns1__ListBucket(soap, -1, type, arrayType, n);
 case (163):
  return (void*)soap_instantiate___ns1__ListAllMyBuckets(soap, -1, type, arrayType, n);
 case (167):
  return (void*)soap_instantiate___ns1__SetBucketLoggingStatus(soap, -1, type, arrayType, n);
 case (171):
  return (void*)soap_instantiate___ns1__GetBucketLoggingStatus(soap, -1, type, arrayType, n);
 case (175):
  return (void*)soap_instantiate___ns1__CopyObject(soap, -1, type, arrayType, n);
# 1659 "../../AmazonS3/eternusC.cpp"
 }
 return __null;
}

 int soap_fdelete(struct soap_clist *p)
{ switch (p->type)
 {
 case (8):
  if (p->size < 0)
   delete (xsd__base64Binary*)p->ptr;
  else
   delete[] (xsd__base64Binary*)p->ptr;
  break;
 case (13):
  if (p->size < 0)
   delete (ns1__MetadataEntry*)p->ptr;
  else
   delete[] (ns1__MetadataEntry*)p->ptr;
  break;
 case (14):
  if (p->size < 0)
   delete (ns1__Status*)p->ptr;
  else
   delete[] (ns1__Status*)p->ptr;
  break;
 case (15):
  if (p->size < 0)
   delete (ns1__Result*)p->ptr;
  else
   delete[] (ns1__Result*)p->ptr;
  break;
 case (16):
  if (p->size < 0)
   delete (ns1__CreateBucketResult*)p->ptr;
  else
   delete[] (ns1__CreateBucketResult*)p->ptr;
  break;
 case (17):
  if (p->size < 0)
   delete (ns1__BucketLoggingStatus*)p->ptr;
  else
   delete[] (ns1__BucketLoggingStatus*)p->ptr;
  break;
 case (18):
  if (p->size < 0)
   delete (ns1__LoggingSettings*)p->ptr;
  else
   delete[] (ns1__LoggingSettings*)p->ptr;
  break;
 case (19):
  if (p->size < 0)
   delete (ns1__Grantee*)p->ptr;
  else
   delete[] (ns1__Grantee*)p->ptr;
  break;
 case (24):
  if (p->size < 0)
   delete (ns1__Grant*)p->ptr;
  else
   delete[] (ns1__Grant*)p->ptr;
  break;
 case (25):
  if (p->size < 0)
   delete (ns1__AccessControlList*)p->ptr;
  else
   delete[] (ns1__AccessControlList*)p->ptr;
  break;
 case (26):
  if (p->size < 0)
   delete (ns1__CreateBucketConfiguration*)p->ptr;
  else
   delete[] (ns1__CreateBucketConfiguration*)p->ptr;
  break;
 case (28):
  if (p->size < 0)
   delete (ns1__AccessControlPolicy*)p->ptr;
  else
   delete[] (ns1__AccessControlPolicy*)p->ptr;
  break;
 case (30):
  if (p->size < 0)
   delete (ns1__PutObjectResult*)p->ptr;
  else
   delete[] (ns1__PutObjectResult*)p->ptr;
  break;
 case (31):
  if (p->size < 0)
   delete (ns1__ListEntry*)p->ptr;
  else
   delete[] (ns1__ListEntry*)p->ptr;
  break;
 case (32):
  if (p->size < 0)
   delete (ns1__PrefixEntry*)p->ptr;
  else
   delete[] (ns1__PrefixEntry*)p->ptr;
  break;
 case (33):
  if (p->size < 0)
   delete (ns1__ListBucketResult*)p->ptr;
  else
   delete[] (ns1__ListBucketResult*)p->ptr;
  break;
 case (34):
  if (p->size < 0)
   delete (ns1__ListAllMyBucketsEntry*)p->ptr;
  else
   delete[] (ns1__ListAllMyBucketsEntry*)p->ptr;
  break;
 case (35):
  if (p->size < 0)
   delete (ns1__ListAllMyBucketsResult*)p->ptr;
  else
   delete[] (ns1__ListAllMyBucketsResult*)p->ptr;
  break;
 case (36):
  if (p->size < 0)
   delete (ns1__ListAllMyBucketsList*)p->ptr;
  else
   delete[] (ns1__ListAllMyBucketsList*)p->ptr;
  break;
 case (37):
  if (p->size < 0)
   delete (ns1__CopyObjectResult*)p->ptr;
  else
   delete[] (ns1__CopyObjectResult*)p->ptr;
  break;
 case (38):
  if (p->size < 0)
   delete (ns1__RequestPaymentConfiguration*)p->ptr;
  else
   delete[] (ns1__RequestPaymentConfiguration*)p->ptr;
  break;
 case (39):
  if (p->size < 0)
   delete (_ns1__CreateBucket*)p->ptr;
  else
   delete[] (_ns1__CreateBucket*)p->ptr;
  break;
 case (40):
  if (p->size < 0)
   delete (_ns1__CreateBucketResponse*)p->ptr;
  else
   delete[] (_ns1__CreateBucketResponse*)p->ptr;
  break;
 case (41):
  if (p->size < 0)
   delete (_ns1__DeleteBucket*)p->ptr;
  else
   delete[] (_ns1__DeleteBucket*)p->ptr;
  break;
 case (42):
  if (p->size < 0)
   delete (_ns1__DeleteBucketResponse*)p->ptr;
  else
   delete[] (_ns1__DeleteBucketResponse*)p->ptr;
  break;
 case (43):
  if (p->size < 0)
   delete (_ns1__GetBucketLoggingStatus*)p->ptr;
  else
   delete[] (_ns1__GetBucketLoggingStatus*)p->ptr;
  break;
 case (44):
  if (p->size < 0)
   delete (_ns1__GetBucketLoggingStatusResponse*)p->ptr;
  else
   delete[] (_ns1__GetBucketLoggingStatusResponse*)p->ptr;
  break;
 case (45):
  if (p->size < 0)
   delete (_ns1__SetBucketLoggingStatus*)p->ptr;
  else
   delete[] (_ns1__SetBucketLoggingStatus*)p->ptr;
  break;
 case (46):
  if (p->size < 0)
   delete (_ns1__SetBucketLoggingStatusResponse*)p->ptr;
  else
   delete[] (_ns1__SetBucketLoggingStatusResponse*)p->ptr;
  break;
 case (47):
  if (p->size < 0)
   delete (_ns1__GetObjectAccessControlPolicy*)p->ptr;
  else
   delete[] (_ns1__GetObjectAccessControlPolicy*)p->ptr;
  break;
 case (48):
  if (p->size < 0)
   delete (_ns1__GetObjectAccessControlPolicyResponse*)p->ptr;
  else
   delete[] (_ns1__GetObjectAccessControlPolicyResponse*)p->ptr;
  break;
 case (49):
  if (p->size < 0)
   delete (_ns1__GetBucketAccessControlPolicy*)p->ptr;
  else
   delete[] (_ns1__GetBucketAccessControlPolicy*)p->ptr;
  break;
 case (50):
  if (p->size < 0)
   delete (_ns1__GetBucketAccessControlPolicyResponse*)p->ptr;
  else
   delete[] (_ns1__GetBucketAccessControlPolicyResponse*)p->ptr;
  break;
 case (51):
  if (p->size < 0)
   delete (_ns1__SetObjectAccessControlPolicy*)p->ptr;
  else
   delete[] (_ns1__SetObjectAccessControlPolicy*)p->ptr;
  break;
 case (52):
  if (p->size < 0)
   delete (_ns1__SetObjectAccessControlPolicyResponse*)p->ptr;
  else
   delete[] (_ns1__SetObjectAccessControlPolicyResponse*)p->ptr;
  break;
 case (53):
  if (p->size < 0)
   delete (_ns1__SetBucketAccessControlPolicy*)p->ptr;
  else
   delete[] (_ns1__SetBucketAccessControlPolicy*)p->ptr;
  break;
 case (54):
  if (p->size < 0)
   delete (_ns1__SetBucketAccessControlPolicyResponse*)p->ptr;
  else
   delete[] (_ns1__SetBucketAccessControlPolicyResponse*)p->ptr;
  break;
 case (55):
  if (p->size < 0)
   delete (_ns1__GetObject*)p->ptr;
  else
   delete[] (_ns1__GetObject*)p->ptr;
  break;
 case (56):
  if (p->size < 0)
   delete (_ns1__GetObjectResponse*)p->ptr;
  else
   delete[] (_ns1__GetObjectResponse*)p->ptr;
  break;
 case (57):
  if (p->size < 0)
   delete (_ns1__GetObjectExtended*)p->ptr;
  else
   delete[] (_ns1__GetObjectExtended*)p->ptr;
  break;
 case (58):
  if (p->size < 0)
   delete (_ns1__GetObjectExtendedResponse*)p->ptr;
  else
   delete[] (_ns1__GetObjectExtendedResponse*)p->ptr;
  break;
 case (59):
  if (p->size < 0)
   delete (_ns1__PutObject*)p->ptr;
  else
   delete[] (_ns1__PutObject*)p->ptr;
  break;
 case (60):
  if (p->size < 0)
   delete (_ns1__PutObjectResponse*)p->ptr;
  else
   delete[] (_ns1__PutObjectResponse*)p->ptr;
  break;
 case (61):
  if (p->size < 0)
   delete (_ns1__PutObjectInline*)p->ptr;
  else
   delete[] (_ns1__PutObjectInline*)p->ptr;
  break;
 case (62):
  if (p->size < 0)
   delete (_ns1__PutObjectInlineResponse*)p->ptr;
  else
   delete[] (_ns1__PutObjectInlineResponse*)p->ptr;
  break;
 case (63):
  if (p->size < 0)
   delete (_ns1__DeleteObject*)p->ptr;
  else
   delete[] (_ns1__DeleteObject*)p->ptr;
  break;
 case (64):
  if (p->size < 0)
   delete (_ns1__DeleteObjectResponse*)p->ptr;
  else
   delete[] (_ns1__DeleteObjectResponse*)p->ptr;
  break;
 case (65):
  if (p->size < 0)
   delete (_ns1__ListBucket*)p->ptr;
  else
   delete[] (_ns1__ListBucket*)p->ptr;
  break;
 case (66):
  if (p->size < 0)
   delete (_ns1__ListBucketResponse*)p->ptr;
  else
   delete[] (_ns1__ListBucketResponse*)p->ptr;
  break;
 case (67):
  if (p->size < 0)
   delete (_ns1__ListAllMyBuckets*)p->ptr;
  else
   delete[] (_ns1__ListAllMyBuckets*)p->ptr;
  break;
 case (68):
  if (p->size < 0)
   delete (_ns1__ListAllMyBucketsResponse*)p->ptr;
  else
   delete[] (_ns1__ListAllMyBucketsResponse*)p->ptr;
  break;
 case (69):
  if (p->size < 0)
   delete (_ns1__PostResponse*)p->ptr;
  else
   delete[] (_ns1__PostResponse*)p->ptr;
  break;
 case (70):
  if (p->size < 0)
   delete (_ns1__CopyObject*)p->ptr;
  else
   delete[] (_ns1__CopyObject*)p->ptr;
  break;
 case (71):
  if (p->size < 0)
   delete (_ns1__CopyObjectResponse*)p->ptr;
  else
   delete[] (_ns1__CopyObjectResponse*)p->ptr;
  break;
 case (20):
  if (p->size < 0)
   delete (ns1__User*)p->ptr;
  else
   delete[] (ns1__User*)p->ptr;
  break;
 case (23):
  if (p->size < 0)
   delete (ns1__Group*)p->ptr;
  else
   delete[] (ns1__Group*)p->ptr;
  break;
 case (27):
  if (p->size < 0)
   delete (ns1__LocationConstraint*)p->ptr;
  else
   delete[] (ns1__LocationConstraint*)p->ptr;
  break;
 case (29):
  if (p->size < 0)
   delete (ns1__GetObjectResult*)p->ptr;
  else
   delete[] (ns1__GetObjectResult*)p->ptr;
  break;
 case (21):
  if (p->size < 0)
   delete (ns1__AmazonCustomerByEmail*)p->ptr;
  else
   delete[] (ns1__AmazonCustomerByEmail*)p->ptr;
  break;
 case (22):
  if (p->size < 0)
   delete (ns1__CanonicalUser*)p->ptr;
  else
   delete[] (ns1__CanonicalUser*)p->ptr;
  break;
 case (115):
  if (p->size < 0)
   delete (struct __ns1__CreateBucket*)p->ptr;
  else
   delete[] (struct __ns1__CreateBucket*)p->ptr;
  break;
 case (119):
  if (p->size < 0)
   delete (struct __ns1__DeleteBucket*)p->ptr;
  else
   delete[] (struct __ns1__DeleteBucket*)p->ptr;
  break;
 case (123):
  if (p->size < 0)
   delete (struct __ns1__GetObjectAccessControlPolicy*)p->ptr;
  else
   delete[] (struct __ns1__GetObjectAccessControlPolicy*)p->ptr;
  break;
 case (127):
  if (p->size < 0)
   delete (struct __ns1__GetBucketAccessControlPolicy*)p->ptr;
  else
   delete[] (struct __ns1__GetBucketAccessControlPolicy*)p->ptr;
  break;
 case (131):
  if (p->size < 0)
   delete (struct __ns1__SetObjectAccessControlPolicy*)p->ptr;
  else
   delete[] (struct __ns1__SetObjectAccessControlPolicy*)p->ptr;
  break;
 case (135):
  if (p->size < 0)
   delete (struct __ns1__SetBucketAccessControlPolicy*)p->ptr;
  else
   delete[] (struct __ns1__SetBucketAccessControlPolicy*)p->ptr;
  break;
 case (139):
  if (p->size < 0)
   delete (struct __ns1__GetObject*)p->ptr;
  else
   delete[] (struct __ns1__GetObject*)p->ptr;
  break;
 case (143):
  if (p->size < 0)
   delete (struct __ns1__GetObjectExtended*)p->ptr;
  else
   delete[] (struct __ns1__GetObjectExtended*)p->ptr;
  break;
 case (147):
  if (p->size < 0)
   delete (struct __ns1__PutObject*)p->ptr;
  else
   delete[] (struct __ns1__PutObject*)p->ptr;
  break;
 case (151):
  if (p->size < 0)
   delete (struct __ns1__PutObjectInline*)p->ptr;
  else
   delete[] (struct __ns1__PutObjectInline*)p->ptr;
  break;
 case (155):
  if (p->size < 0)
   delete (struct __ns1__DeleteObject*)p->ptr;
  else
   delete[] (struct __ns1__DeleteObject*)p->ptr;
  break;
 case (159):
  if (p->size < 0)
   delete (struct __ns1__ListBucket*)p->ptr;
  else
   delete[] (struct __ns1__ListBucket*)p->ptr;
  break;
 case (163):
  if (p->size < 0)
   delete (struct __ns1__ListAllMyBuckets*)p->ptr;
  else
   delete[] (struct __ns1__ListAllMyBuckets*)p->ptr;
  break;
 case (167):
  if (p->size < 0)
   delete (struct __ns1__SetBucketLoggingStatus*)p->ptr;
  else
   delete[] (struct __ns1__SetBucketLoggingStatus*)p->ptr;
  break;
 case (171):
  if (p->size < 0)
   delete (struct __ns1__GetBucketLoggingStatus*)p->ptr;
  else
   delete[] (struct __ns1__GetBucketLoggingStatus*)p->ptr;
  break;
 case (175):
  if (p->size < 0)
   delete (struct __ns1__CopyObject*)p->ptr;
  else
   delete[] (struct __ns1__CopyObject*)p->ptr;
  break;
 case (176):
  if (p->size < 0)
   delete (struct SOAP_ENV__Header*)p->ptr;
  else
   delete[] (struct SOAP_ENV__Header*)p->ptr;
  break;
 case (177):
  if (p->size < 0)
   delete (struct SOAP_ENV__Code*)p->ptr;
  else
   delete[] (struct SOAP_ENV__Code*)p->ptr;
  break;
 case (179):
  if (p->size < 0)
   delete (struct SOAP_ENV__Detail*)p->ptr;
  else
   delete[] (struct SOAP_ENV__Detail*)p->ptr;
  break;
 case (182):
  if (p->size < 0)
   delete (struct SOAP_ENV__Reason*)p->ptr;
  else
   delete[] (struct SOAP_ENV__Reason*)p->ptr;
  break;
 case (183):
  if (p->size < 0)
   delete (struct SOAP_ENV__Fault*)p->ptr;
  else
   delete[] (struct SOAP_ENV__Fault*)p->ptr;
  break;
 default: return (-1);
 }
 return 0;
}

 void* soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{ return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

 void soap_default_byte(struct soap *soap, char *a)
{
 (void)soap;



 *a = (char)0;

}

 int soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
 return soap_outbyte(soap, tag, id, a, type, (3));
}

 char * soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{ char *p;
 p = soap_inbyte(soap, tag, a, type, (3));
 return p;
}

 int soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (3));
 if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 char * soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
 if ((p = soap_in_byte(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_int(struct soap *soap, int *a)
{
 (void)soap;



 *a = (int)0;

}

 int soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
 return soap_outint(soap, tag, id, a, type, (1));
}

 int * soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{ int *p;
 p = soap_inint(soap, tag, a, type, (1));
 return p;
}

 int soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (1));
 if (soap_out_int(soap, tag?tag:"int", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 int * soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
 if ((p = soap_in_int(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_LONG64(struct soap *soap, long long *a)
{
 (void)soap;



 *a = (long long)0;

}

 int soap_out_LONG64(struct soap *soap, const char *tag, int id, const long long *a, const char *type)
{
 return soap_outLONG64(soap, tag, id, a, type, (85));
}

 long long * soap_in_LONG64(struct soap *soap, const char *tag, long long *a, const char *type)
{ long long *p;
 p = soap_inLONG64(soap, tag, a, type, (85));
 return p;
}

 int soap_put_LONG64(struct soap *soap, const long long *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (85));
 if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 long long * soap_get_LONG64(struct soap *soap, long long *p, const char *tag, const char *type)
{
 if ((p = soap_in_LONG64(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
 (void)soap;



 *a = (unsigned char)0;

}

 int soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
 return soap_outunsignedByte(soap, tag, id, a, type, (10));
}

 unsigned char * soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{ unsigned char *p;
 p = soap_inunsignedByte(soap, tag, a, type, (10));
 return p;
}

 int soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (10));
 if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 unsigned char * soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
 if ((p = soap_in_unsignedByte(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
 (void)soap;



 *a = (unsigned int)0;

}

 int soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
 return soap_outunsignedInt(soap, tag, id, a, type, (9));
}

 unsigned int * soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{ unsigned int *p;
 p = soap_inunsignedInt(soap, tag, a, type, (9));
 return p;
}

 int soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (9));
 if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 unsigned int * soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
 if ((p = soap_in_unsignedInt(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_time(struct soap *soap, time_t *a)
{
 (void)soap;



 *a = (time_t)0;

}

 int soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
 return soap_outdateTime(soap, tag, id, a, type, (84));
}

 time_t * soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{ time_t *p;
 p = soap_indateTime(soap, tag, a, type, (84));
 return p;
}

 int soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (84));
 if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 time_t * soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
 if ((p = soap_in_time(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_bool(struct soap *soap, bool *a)
{
 (void)soap;



 *a = (bool)0;

}

static const struct soap_code_map soap_codes_bool[] =
{ { (long)false, "false" },
 { (long)true, "true" },
 { 0, __null }
};

 const char* soap_bool2s(struct soap *soap, bool n)
{
 (void)soap;
return soap_code_str(soap_codes_bool, n!=0);
}

 int soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{ if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (88)), type) || soap_send(soap, soap_bool2s(soap, *a)))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

 int soap_s2bool(struct soap *soap, const char *s, bool *a)
{
 const struct soap_code_map *map;
 if (!s)
  return soap->error;
 map = soap_code(soap_codes_bool, s);
 if (map)
  *a = (bool)(map->code != 0);
 else
 { long n;
  if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
   return soap->error = 4;
  *a = (bool)(n != 0);
 }
 return 0;
}

 bool * soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
 { soap->error = 4;
  return __null;
 }
 a = (bool *)soap_id_enter(soap, soap->id, a, (88), sizeof(bool), 0, __null, __null, __null);
 if (!a)
  return __null;
 if (soap->body && !*soap->href)
 { if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, (88), 0, sizeof(bool), 0, __null);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (88));
 if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 bool * soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
 if ((p = soap_in_bool(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_ns1__Payer(struct soap *soap, enum ns1__Payer *a)
{
 (void)soap;



 *a = (enum ns1__Payer)0;

}

static const struct soap_code_map soap_codes_ns1__Payer[] =
{ { (long)ns1__Payer__BucketOwner, "BucketOwner" },
 { (long)ns1__Payer__Requester, "Requester" },
 { 0, __null }
};

 const char* soap_ns1__Payer2s(struct soap *soap, enum ns1__Payer n)
{ const char *s = soap_code_str(soap_codes_ns1__Payer, (long)n);
 if (s)
  return s;
 return soap_long2s(soap, (long)n);
}

 int soap_out_ns1__Payer(struct soap *soap, const char *tag, int id, const enum ns1__Payer *a, const char *type)
{ if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (75)), type) || soap_send(soap, soap_ns1__Payer2s(soap, *a)))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

 int soap_s2ns1__Payer(struct soap *soap, const char *s, enum ns1__Payer *a)
{
 const struct soap_code_map *map;
 if (!s)
  return soap->error;
 map = soap_code(soap_codes_ns1__Payer, s);
 if (map)
  *a = (enum ns1__Payer)map->code;
 else
 { long n;
  if (soap_s2long(soap, s, &n) || ((soap->mode & 0x00001000) && (n < 0 || n > 1)))
   return soap->error = 4;
  *a = (enum ns1__Payer)n;
 }
 return 0;
}

 enum ns1__Payer * soap_in_ns1__Payer(struct soap *soap, const char *tag, enum ns1__Payer *a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 0, type))
  return __null;
 a = (enum ns1__Payer *)soap_id_enter(soap, soap->id, a, (75), sizeof(enum ns1__Payer), 0, __null, __null, __null);
 if (!a)
  return __null;
 if (soap->body && !*soap->href)
 { if (!a || soap_s2ns1__Payer(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (enum ns1__Payer *)soap_id_forward(soap, soap->href, (void*)a, 0, (75), 0, sizeof(enum ns1__Payer), 0, __null);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_ns1__Payer(struct soap *soap, const enum ns1__Payer *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (75));
 if (soap_out_ns1__Payer(soap, tag?tag:"ns1:Payer", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__Payer * soap_get_ns1__Payer(struct soap *soap, enum ns1__Payer *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Payer(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_ns1__MetadataDirective(struct soap *soap, enum ns1__MetadataDirective *a)
{
 (void)soap;



 *a = (enum ns1__MetadataDirective)0;

}

static const struct soap_code_map soap_codes_ns1__MetadataDirective[] =
{ { (long)ns1__MetadataDirective__COPY, "COPY" },
 { (long)ns1__MetadataDirective__REPLACE, "REPLACE" },
 { 0, __null }
};

 const char* soap_ns1__MetadataDirective2s(struct soap *soap, enum ns1__MetadataDirective n)
{ const char *s = soap_code_str(soap_codes_ns1__MetadataDirective, (long)n);
 if (s)
  return s;
 return soap_long2s(soap, (long)n);
}

 int soap_out_ns1__MetadataDirective(struct soap *soap, const char *tag, int id, const enum ns1__MetadataDirective *a, const char *type)
{ if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (74)), type) || soap_send(soap, soap_ns1__MetadataDirective2s(soap, *a)))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

 int soap_s2ns1__MetadataDirective(struct soap *soap, const char *s, enum ns1__MetadataDirective *a)
{
 const struct soap_code_map *map;
 if (!s)
  return soap->error;
 map = soap_code(soap_codes_ns1__MetadataDirective, s);
 if (map)
  *a = (enum ns1__MetadataDirective)map->code;
 else
 { long n;
  if (soap_s2long(soap, s, &n) || ((soap->mode & 0x00001000) && (n < 0 || n > 1)))
   return soap->error = 4;
  *a = (enum ns1__MetadataDirective)n;
 }
 return 0;
}

 enum ns1__MetadataDirective * soap_in_ns1__MetadataDirective(struct soap *soap, const char *tag, enum ns1__MetadataDirective *a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 0, type))
  return __null;
 a = (enum ns1__MetadataDirective *)soap_id_enter(soap, soap->id, a, (74), sizeof(enum ns1__MetadataDirective), 0, __null, __null, __null);
 if (!a)
  return __null;
 if (soap->body && !*soap->href)
 { if (!a || soap_s2ns1__MetadataDirective(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (enum ns1__MetadataDirective *)soap_id_forward(soap, soap->href, (void*)a, 0, (74), 0, sizeof(enum ns1__MetadataDirective), 0, __null);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_ns1__MetadataDirective(struct soap *soap, const enum ns1__MetadataDirective *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (74));
 if (soap_out_ns1__MetadataDirective(soap, tag?tag:"ns1:MetadataDirective", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__MetadataDirective * soap_get_ns1__MetadataDirective(struct soap *soap, enum ns1__MetadataDirective *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__MetadataDirective(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_ns1__StorageClass(struct soap *soap, enum ns1__StorageClass *a)
{
 (void)soap;



 *a = (enum ns1__StorageClass)0;

}

static const struct soap_code_map soap_codes_ns1__StorageClass[] =
{ { (long)ns1__StorageClass__STANDARD, "STANDARD" },
 { (long)ns1__StorageClass__UNKNOWN, "UNKNOWN" },
 { 0, __null }
};

 const char* soap_ns1__StorageClass2s(struct soap *soap, enum ns1__StorageClass n)
{ const char *s = soap_code_str(soap_codes_ns1__StorageClass, (long)n);
 if (s)
  return s;
 return soap_long2s(soap, (long)n);
}

 int soap_out_ns1__StorageClass(struct soap *soap, const char *tag, int id, const enum ns1__StorageClass *a, const char *type)
{ if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (73)), type) || soap_send(soap, soap_ns1__StorageClass2s(soap, *a)))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

 int soap_s2ns1__StorageClass(struct soap *soap, const char *s, enum ns1__StorageClass *a)
{
 const struct soap_code_map *map;
 if (!s)
  return soap->error;
 map = soap_code(soap_codes_ns1__StorageClass, s);
 if (map)
  *a = (enum ns1__StorageClass)map->code;
 else
 { long n;
  if (soap_s2long(soap, s, &n) || ((soap->mode & 0x00001000) && (n < 0 || n > 1)))
   return soap->error = 4;
  *a = (enum ns1__StorageClass)n;
 }
 return 0;
}

 enum ns1__StorageClass * soap_in_ns1__StorageClass(struct soap *soap, const char *tag, enum ns1__StorageClass *a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 0, type))
  return __null;
 a = (enum ns1__StorageClass *)soap_id_enter(soap, soap->id, a, (73), sizeof(enum ns1__StorageClass), 0, __null, __null, __null);
 if (!a)
  return __null;
 if (soap->body && !*soap->href)
 { if (!a || soap_s2ns1__StorageClass(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (enum ns1__StorageClass *)soap_id_forward(soap, soap->href, (void*)a, 0, (73), 0, sizeof(enum ns1__StorageClass), 0, __null);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_ns1__StorageClass(struct soap *soap, const enum ns1__StorageClass *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (73));
 if (soap_out_ns1__StorageClass(soap, tag?tag:"ns1:StorageClass", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__StorageClass * soap_get_ns1__StorageClass(struct soap *soap, enum ns1__StorageClass *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__StorageClass(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_ns1__Permission(struct soap *soap, enum ns1__Permission *a)
{
 (void)soap;



 *a = (enum ns1__Permission)0;

}

static const struct soap_code_map soap_codes_ns1__Permission[] =
{ { (long)ns1__Permission__READ, "READ" },
 { (long)ns1__Permission__WRITE, "WRITE" },
 { (long)ns1__Permission__READ_USCOREACP, "READ_ACP" },
 { (long)ns1__Permission__WRITE_USCOREACP, "WRITE_ACP" },
 { (long)ns1__Permission__FULL_USCORECONTROL, "FULL_CONTROL" },
 { 0, __null }
};

 const char* soap_ns1__Permission2s(struct soap *soap, enum ns1__Permission n)
{ const char *s = soap_code_str(soap_codes_ns1__Permission, (long)n);
 if (s)
  return s;
 return soap_long2s(soap, (long)n);
}

 int soap_out_ns1__Permission(struct soap *soap, const char *tag, int id, const enum ns1__Permission *a, const char *type)
{ if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (72)), type) || soap_send(soap, soap_ns1__Permission2s(soap, *a)))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

 int soap_s2ns1__Permission(struct soap *soap, const char *s, enum ns1__Permission *a)
{
 const struct soap_code_map *map;
 if (!s)
  return soap->error;
 map = soap_code(soap_codes_ns1__Permission, s);
 if (map)
  *a = (enum ns1__Permission)map->code;
 else
 { long n;
  if (soap_s2long(soap, s, &n) || ((soap->mode & 0x00001000) && (n < 0 || n > 4)))
   return soap->error = 4;
  *a = (enum ns1__Permission)n;
 }
 return 0;
}

 enum ns1__Permission * soap_in_ns1__Permission(struct soap *soap, const char *tag, enum ns1__Permission *a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 0, type))
  return __null;
 a = (enum ns1__Permission *)soap_id_enter(soap, soap->id, a, (72), sizeof(enum ns1__Permission), 0, __null, __null, __null);
 if (!a)
  return __null;
 if (soap->body && !*soap->href)
 { if (!a || soap_s2ns1__Permission(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (enum ns1__Permission *)soap_id_forward(soap, soap->href, (void*)a, 0, (72), 0, sizeof(enum ns1__Permission), 0, __null);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_ns1__Permission(struct soap *soap, const enum ns1__Permission *a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (72));
 if (soap_out_ns1__Permission(soap, tag?tag:"ns1:Permission", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__Permission * soap_get_ns1__Permission(struct soap *soap, enum ns1__Permission *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Permission(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

void _ns1__CopyObjectResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__CopyObjectResponse::CopyObjectResult = __null;

}

void _ns1__CopyObjectResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__CopyObjectResult(soap, &this->_ns1__CopyObjectResponse::CopyObjectResult);

}

int _ns1__CopyObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__CopyObjectResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__CopyObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__CopyObjectResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (71)), type))
  return soap->error;
 if (a->CopyObjectResult)
  soap_element_result(soap, "ns1:CopyObjectResult");
 if (soap_out_PointerTons1__CopyObjectResult(soap, "ns1:CopyObjectResult", -1, &(a->_ns1__CopyObjectResponse::CopyObjectResult), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__CopyObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__CopyObjectResponse(soap, tag, this, type);
}

 _ns1__CopyObjectResponse * soap_in__ns1__CopyObjectResponse(struct soap *soap, const char *tag, _ns1__CopyObjectResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__CopyObjectResponse *)soap_class_id_enter(soap, soap->id, a, (71), sizeof(_ns1__CopyObjectResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (71))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__CopyObjectResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_CopyObjectResult1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_CopyObjectResult1 && soap->error == 3)
    if (soap_in_PointerTons1__CopyObjectResult(soap, "ns1:CopyObjectResult", &(a->_ns1__CopyObjectResponse::CopyObjectResult), "ns1:CopyObjectResult"))
    { soap_flag_CopyObjectResult1--;
     continue;
    }

   soap_check_result(soap, "ns1:CopyObjectResult");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__CopyObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (71), 0, sizeof(_ns1__CopyObjectResponse), 0, soap_copy__ns1__CopyObjectResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_CopyObjectResult1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__CopyObjectResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (71));
 if (this->soap_out(soap, tag?tag:"ns1:CopyObjectResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__CopyObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__CopyObjectResponse(soap, this, tag, type);
}

 _ns1__CopyObjectResponse * soap_get__ns1__CopyObjectResponse(struct soap *soap, _ns1__CopyObjectResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__CopyObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__CopyObjectResponse * soap_instantiate__ns1__CopyObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (71), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__CopyObjectResponse);
  if (size)
   *size = sizeof(_ns1__CopyObjectResponse);
  ((_ns1__CopyObjectResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__CopyObjectResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__CopyObjectResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__CopyObjectResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__CopyObjectResponse*)cp->ptr;
}

 void soap_copy__ns1__CopyObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__CopyObjectResponse*)p = *(_ns1__CopyObjectResponse*)q;
}

void _ns1__CopyObject::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__CopyObject::SourceBucket);
 soap_default_string(soap, &this->_ns1__CopyObject::SourceKey);
 soap_default_string(soap, &this->_ns1__CopyObject::DestinationBucket);
 soap_default_string(soap, &this->_ns1__CopyObject::DestinationKey);
 this->_ns1__CopyObject::MetadataDirective = __null;
 this->_ns1__CopyObject::__sizeMetadata = 0;
 this->_ns1__CopyObject::Metadata = __null;
 this->_ns1__CopyObject::AccessControlList = __null;
 this->_ns1__CopyObject::CopySourceIfModifiedSince = __null;
 this->_ns1__CopyObject::CopySourceIfUnmodifiedSince = __null;
 this->_ns1__CopyObject::__sizeCopySourceIfMatch = 0;
 this->_ns1__CopyObject::CopySourceIfMatch = __null;
 this->_ns1__CopyObject::__sizeCopySourceIfNoneMatch = 0;
 this->_ns1__CopyObject::CopySourceIfNoneMatch = __null;
 this->_ns1__CopyObject::StorageClass = __null;
 soap_default_string(soap, &this->_ns1__CopyObject::AWSAccessKeyId);
 this->_ns1__CopyObject::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__CopyObject::Signature);
 soap_default_string(soap, &this->_ns1__CopyObject::Credential);

}

void _ns1__CopyObject::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__CopyObject::SourceBucket);
 soap_serialize_string(soap, &this->_ns1__CopyObject::SourceKey);
 soap_serialize_string(soap, &this->_ns1__CopyObject::DestinationBucket);
 soap_serialize_string(soap, &this->_ns1__CopyObject::DestinationKey);
 soap_serialize_PointerTons1__MetadataDirective(soap, &this->_ns1__CopyObject::MetadataDirective);
 if (this->_ns1__CopyObject::Metadata)
 { int i;
  for (i = 0; i < this->_ns1__CopyObject::__sizeMetadata; i++)
  {
   soap_serialize_PointerTons1__MetadataEntry(soap, this->_ns1__CopyObject::Metadata + i);
  }
 }
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__CopyObject::AccessControlList);
 soap_serialize_PointerTotime(soap, &this->_ns1__CopyObject::CopySourceIfModifiedSince);
 soap_serialize_PointerTotime(soap, &this->_ns1__CopyObject::CopySourceIfUnmodifiedSince);
 if (this->_ns1__CopyObject::CopySourceIfMatch)
 { int i;
  for (i = 0; i < this->_ns1__CopyObject::__sizeCopySourceIfMatch; i++)
  {
   soap_serialize_string(soap, this->_ns1__CopyObject::CopySourceIfMatch + i);
  }
 }
 if (this->_ns1__CopyObject::CopySourceIfNoneMatch)
 { int i;
  for (i = 0; i < this->_ns1__CopyObject::__sizeCopySourceIfNoneMatch; i++)
  {
   soap_serialize_string(soap, this->_ns1__CopyObject::CopySourceIfNoneMatch + i);
  }
 }
 soap_serialize_PointerTons1__StorageClass(soap, &this->_ns1__CopyObject::StorageClass);
 soap_serialize_string(soap, &this->_ns1__CopyObject::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__CopyObject::Timestamp);
 soap_serialize_string(soap, &this->_ns1__CopyObject::Signature);
 soap_serialize_string(soap, &this->_ns1__CopyObject::Credential);

}

int _ns1__CopyObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__CopyObject(soap, tag, id, this, type);
}

 int soap_out__ns1__CopyObject(struct soap *soap, const char *tag, int id, const _ns1__CopyObject *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (70)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:SourceBucket", -1, &(a->_ns1__CopyObject::SourceBucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:SourceKey", -1, &(a->_ns1__CopyObject::SourceKey), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:DestinationBucket", -1, &(a->_ns1__CopyObject::DestinationBucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:DestinationKey", -1, &(a->_ns1__CopyObject::DestinationKey), ""))
  return soap->error;
 if (soap_out_PointerTons1__MetadataDirective(soap, "ns1:MetadataDirective", -1, &(a->_ns1__CopyObject::MetadataDirective), ""))
  return soap->error;
 if (a->_ns1__CopyObject::Metadata)
 { int i;
  for (i = 0; i < a->_ns1__CopyObject::__sizeMetadata; i++)
   if (soap_out_PointerTons1__MetadataEntry(soap, "ns1:Metadata", -1, a->_ns1__CopyObject::Metadata + i, ""))
    return soap->error;
 }
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__CopyObject::AccessControlList), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:CopySourceIfModifiedSince", -1, &(a->_ns1__CopyObject::CopySourceIfModifiedSince), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:CopySourceIfUnmodifiedSince", -1, &(a->_ns1__CopyObject::CopySourceIfUnmodifiedSince), ""))
  return soap->error;
 if (a->_ns1__CopyObject::CopySourceIfMatch)
 { int i;
  for (i = 0; i < a->_ns1__CopyObject::__sizeCopySourceIfMatch; i++)
   if (soap_out_string(soap, "ns1:CopySourceIfMatch", -1, a->_ns1__CopyObject::CopySourceIfMatch + i, ""))
    return soap->error;
 }
 if (a->_ns1__CopyObject::CopySourceIfNoneMatch)
 { int i;
  for (i = 0; i < a->_ns1__CopyObject::__sizeCopySourceIfNoneMatch; i++)
   if (soap_out_string(soap, "ns1:CopySourceIfNoneMatch", -1, a->_ns1__CopyObject::CopySourceIfNoneMatch + i, ""))
    return soap->error;
 }
 if (soap_out_PointerTons1__StorageClass(soap, "ns1:StorageClass", -1, &(a->_ns1__CopyObject::StorageClass), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__CopyObject::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__CopyObject::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__CopyObject::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__CopyObject::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__CopyObject::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__CopyObject(soap, tag, this, type);
}

 _ns1__CopyObject * soap_in__ns1__CopyObject(struct soap *soap, const char *tag, _ns1__CopyObject *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__CopyObject *)soap_class_id_enter(soap, soap->id, a, (70), sizeof(_ns1__CopyObject), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (70))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__CopyObject *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_SourceBucket1 = 1;
 size_t soap_flag_SourceKey1 = 1;
 size_t soap_flag_DestinationBucket1 = 1;
 size_t soap_flag_DestinationKey1 = 1;
 size_t soap_flag_MetadataDirective1 = 1;
 struct soap_blist *soap_blist_Metadata1 = __null;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_CopySourceIfModifiedSince1 = 1;
 size_t soap_flag_CopySourceIfUnmodifiedSince1 = 1;
 struct soap_blist *soap_blist_CopySourceIfMatch1 = __null;
 struct soap_blist *soap_blist_CopySourceIfNoneMatch1 = __null;
 size_t soap_flag_StorageClass1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_SourceBucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:SourceBucket", &(a->_ns1__CopyObject::SourceBucket), "xsd:string"))
    { soap_flag_SourceBucket1--;
     continue;
    }
   if (soap_flag_SourceKey1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:SourceKey", &(a->_ns1__CopyObject::SourceKey), "xsd:string"))
    { soap_flag_SourceKey1--;
     continue;
    }
   if (soap_flag_DestinationBucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:DestinationBucket", &(a->_ns1__CopyObject::DestinationBucket), "xsd:string"))
    { soap_flag_DestinationBucket1--;
     continue;
    }
   if (soap_flag_DestinationKey1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:DestinationKey", &(a->_ns1__CopyObject::DestinationKey), "xsd:string"))
    { soap_flag_DestinationKey1--;
     continue;
    }
   if (soap_flag_MetadataDirective1 && soap->error == 3)
    if (soap_in_PointerTons1__MetadataDirective(soap, "ns1:MetadataDirective", &(a->_ns1__CopyObject::MetadataDirective), "ns1:MetadataDirective"))
    { soap_flag_MetadataDirective1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Metadata", 1, __null))
   { if (a->_ns1__CopyObject::Metadata == __null)
    { if (soap_blist_Metadata1 == __null)
      soap_blist_Metadata1 = soap_new_block(soap);
     a->_ns1__CopyObject::Metadata = (ns1__MetadataEntry **)soap_push_block(soap, soap_blist_Metadata1, sizeof(ns1__MetadataEntry *));
     if (a->_ns1__CopyObject::Metadata == __null)
      return __null;
     *a->_ns1__CopyObject::Metadata = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__MetadataEntry(soap, "ns1:Metadata", a->_ns1__CopyObject::Metadata, "ns1:MetadataEntry"))
    { a->_ns1__CopyObject::__sizeMetadata++;
     a->_ns1__CopyObject::Metadata = __null;
     continue;
    }
   }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__CopyObject::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_CopySourceIfModifiedSince1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:CopySourceIfModifiedSince", &(a->_ns1__CopyObject::CopySourceIfModifiedSince), "xsd:dateTime"))
    { soap_flag_CopySourceIfModifiedSince1--;
     continue;
    }
   if (soap_flag_CopySourceIfUnmodifiedSince1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:CopySourceIfUnmodifiedSince", &(a->_ns1__CopyObject::CopySourceIfUnmodifiedSince), "xsd:dateTime"))
    { soap_flag_CopySourceIfUnmodifiedSince1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:CopySourceIfMatch", 1, __null))
   { if (a->_ns1__CopyObject::CopySourceIfMatch == __null)
    { if (soap_blist_CopySourceIfMatch1 == __null)
      soap_blist_CopySourceIfMatch1 = soap_new_block(soap);
     a->_ns1__CopyObject::CopySourceIfMatch = (char **)soap_push_block(soap, soap_blist_CopySourceIfMatch1, sizeof(char *));
     if (a->_ns1__CopyObject::CopySourceIfMatch == __null)
      return __null;
     *a->_ns1__CopyObject::CopySourceIfMatch = __null;
    }soap_revert(soap);
    if (soap_in_string(soap, "ns1:CopySourceIfMatch", a->_ns1__CopyObject::CopySourceIfMatch, "xsd:string"))
    { a->_ns1__CopyObject::__sizeCopySourceIfMatch++;
     a->_ns1__CopyObject::CopySourceIfMatch = __null;
     continue;
    }
   }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:CopySourceIfNoneMatch", 1, __null))
   { if (a->_ns1__CopyObject::CopySourceIfNoneMatch == __null)
    { if (soap_blist_CopySourceIfNoneMatch1 == __null)
      soap_blist_CopySourceIfNoneMatch1 = soap_new_block(soap);
     a->_ns1__CopyObject::CopySourceIfNoneMatch = (char **)soap_push_block(soap, soap_blist_CopySourceIfNoneMatch1, sizeof(char *));
     if (a->_ns1__CopyObject::CopySourceIfNoneMatch == __null)
      return __null;
     *a->_ns1__CopyObject::CopySourceIfNoneMatch = __null;
    }soap_revert(soap);
    if (soap_in_string(soap, "ns1:CopySourceIfNoneMatch", a->_ns1__CopyObject::CopySourceIfNoneMatch, "xsd:string"))
    { a->_ns1__CopyObject::__sizeCopySourceIfNoneMatch++;
     a->_ns1__CopyObject::CopySourceIfNoneMatch = __null;
     continue;
    }
   }
   if (soap_flag_StorageClass1 && soap->error == 3)
    if (soap_in_PointerTons1__StorageClass(soap, "ns1:StorageClass", &(a->_ns1__CopyObject::StorageClass), "ns1:StorageClass"))
    { soap_flag_StorageClass1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__CopyObject::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__CopyObject::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__CopyObject::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__CopyObject::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->_ns1__CopyObject::Metadata)
   soap_pop_block(soap, soap_blist_Metadata1);
  if (a->_ns1__CopyObject::__sizeMetadata)
   a->_ns1__CopyObject::Metadata = (ns1__MetadataEntry **)soap_save_block(soap, soap_blist_Metadata1, __null, 1);
  else
  { a->_ns1__CopyObject::Metadata = __null;
   if (soap_blist_Metadata1)
    soap_end_block(soap, soap_blist_Metadata1);
  }
  if (a->_ns1__CopyObject::CopySourceIfMatch)
   soap_pop_block(soap, soap_blist_CopySourceIfMatch1);
  if (a->_ns1__CopyObject::__sizeCopySourceIfMatch)
   a->_ns1__CopyObject::CopySourceIfMatch = (char **)soap_save_block(soap, soap_blist_CopySourceIfMatch1, __null, 1);
  else
  { a->_ns1__CopyObject::CopySourceIfMatch = __null;
   if (soap_blist_CopySourceIfMatch1)
    soap_end_block(soap, soap_blist_CopySourceIfMatch1);
  }
  if (a->_ns1__CopyObject::CopySourceIfNoneMatch)
   soap_pop_block(soap, soap_blist_CopySourceIfNoneMatch1);
  if (a->_ns1__CopyObject::__sizeCopySourceIfNoneMatch)
   a->_ns1__CopyObject::CopySourceIfNoneMatch = (char **)soap_save_block(soap, soap_blist_CopySourceIfNoneMatch1, __null, 1);
  else
  { a->_ns1__CopyObject::CopySourceIfNoneMatch = __null;
   if (soap_blist_CopySourceIfNoneMatch1)
    soap_end_block(soap, soap_blist_CopySourceIfNoneMatch1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__CopyObject *)soap_id_forward(soap, soap->href, (void*)a, 0, (70), 0, sizeof(_ns1__CopyObject), 0, soap_copy__ns1__CopyObject);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_SourceBucket1 > 0 || soap_flag_SourceKey1 > 0 || soap_flag_DestinationBucket1 > 0 || soap_flag_DestinationKey1 > 0 || a->_ns1__CopyObject::__sizeMetadata > 100 || a->_ns1__CopyObject::__sizeCopySourceIfMatch > 100 || a->_ns1__CopyObject::__sizeCopySourceIfNoneMatch > 100))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__CopyObject::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (70));
 if (this->soap_out(soap, tag?tag:"ns1:CopyObject", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__CopyObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__CopyObject(soap, this, tag, type);
}

 _ns1__CopyObject * soap_get__ns1__CopyObject(struct soap *soap, _ns1__CopyObject *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__CopyObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__CopyObject * soap_instantiate__ns1__CopyObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (70), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__CopyObject);
  if (size)
   *size = sizeof(_ns1__CopyObject);
  ((_ns1__CopyObject*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__CopyObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__CopyObject);
  for (int i = 0; i < n; i++)
   ((_ns1__CopyObject*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__CopyObject*)cp->ptr;
}

 void soap_copy__ns1__CopyObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__CopyObject*)p = *(_ns1__CopyObject*)q;
}

void _ns1__PostResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__PostResponse::Location);
 soap_default_string(soap, &this->_ns1__PostResponse::Bucket);
 soap_default_string(soap, &this->_ns1__PostResponse::Key);
 soap_default_string(soap, &this->_ns1__PostResponse::ETag);

}

void _ns1__PostResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__PostResponse::Location);
 soap_serialize_string(soap, &this->_ns1__PostResponse::Bucket);
 soap_serialize_string(soap, &this->_ns1__PostResponse::Key);
 soap_serialize_string(soap, &this->_ns1__PostResponse::ETag);

}

int _ns1__PostResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__PostResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__PostResponse(struct soap *soap, const char *tag, int id, const _ns1__PostResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (69)), type))
  return soap->error;
 if (soap_out_xsd__anyURI(soap, "ns1:Location", -1, &(a->_ns1__PostResponse::Location), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__PostResponse::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__PostResponse::Key), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:ETag", -1, &(a->_ns1__PostResponse::ETag), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__PostResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__PostResponse(soap, tag, this, type);
}

 _ns1__PostResponse * soap_in__ns1__PostResponse(struct soap *soap, const char *tag, _ns1__PostResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__PostResponse *)soap_class_id_enter(soap, soap->id, a, (69), sizeof(_ns1__PostResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (69))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__PostResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Location1 = 1;
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_ETag1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Location1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_xsd__anyURI(soap, "ns1:Location", &(a->_ns1__PostResponse::Location), "xsd:anyURI"))
    { soap_flag_Location1--;
     continue;
    }
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__PostResponse::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__PostResponse::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_ETag1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ETag", &(a->_ns1__PostResponse::ETag), "xsd:string"))
    { soap_flag_ETag1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__PostResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (69), 0, sizeof(_ns1__PostResponse), 0, soap_copy__ns1__PostResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Location1 > 0 || soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || soap_flag_ETag1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__PostResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (69));
 if (this->soap_out(soap, tag?tag:"ns1:PostResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__PostResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__PostResponse(soap, this, tag, type);
}

 _ns1__PostResponse * soap_get__ns1__PostResponse(struct soap *soap, _ns1__PostResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__PostResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__PostResponse * soap_instantiate__ns1__PostResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (69), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__PostResponse);
  if (size)
   *size = sizeof(_ns1__PostResponse);
  ((_ns1__PostResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__PostResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__PostResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__PostResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__PostResponse*)cp->ptr;
}

 void soap_copy__ns1__PostResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__PostResponse*)p = *(_ns1__PostResponse*)q;
}

void _ns1__ListAllMyBucketsResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__ListAllMyBucketsResponse::ListAllMyBucketsResponse = __null;

}

void _ns1__ListAllMyBucketsResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__ListAllMyBucketsResult(soap, &this->_ns1__ListAllMyBucketsResponse::ListAllMyBucketsResponse);

}

int _ns1__ListAllMyBucketsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__ListAllMyBucketsResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__ListAllMyBucketsResponse(struct soap *soap, const char *tag, int id, const _ns1__ListAllMyBucketsResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (68)), type))
  return soap->error;
 if (a->ListAllMyBucketsResponse)
  soap_element_result(soap, "ns1:ListAllMyBucketsResponse");
 if (soap_out_PointerTons1__ListAllMyBucketsResult(soap, "ns1:ListAllMyBucketsResponse", -1, &(a->_ns1__ListAllMyBucketsResponse::ListAllMyBucketsResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__ListAllMyBucketsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__ListAllMyBucketsResponse(soap, tag, this, type);
}

 _ns1__ListAllMyBucketsResponse * soap_in__ns1__ListAllMyBucketsResponse(struct soap *soap, const char *tag, _ns1__ListAllMyBucketsResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__ListAllMyBucketsResponse *)soap_class_id_enter(soap, soap->id, a, (68), sizeof(_ns1__ListAllMyBucketsResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (68))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__ListAllMyBucketsResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_ListAllMyBucketsResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_ListAllMyBucketsResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__ListAllMyBucketsResult(soap, "ns1:ListAllMyBucketsResponse", &(a->_ns1__ListAllMyBucketsResponse::ListAllMyBucketsResponse), "ns1:ListAllMyBucketsResult"))
    { soap_flag_ListAllMyBucketsResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:ListAllMyBucketsResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__ListAllMyBucketsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (68), 0, sizeof(_ns1__ListAllMyBucketsResponse), 0, soap_copy__ns1__ListAllMyBucketsResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_ListAllMyBucketsResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__ListAllMyBucketsResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (68));
 if (this->soap_out(soap, tag?tag:"ns1:ListAllMyBucketsResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__ListAllMyBucketsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__ListAllMyBucketsResponse(soap, this, tag, type);
}

 _ns1__ListAllMyBucketsResponse * soap_get__ns1__ListAllMyBucketsResponse(struct soap *soap, _ns1__ListAllMyBucketsResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__ListAllMyBucketsResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__ListAllMyBucketsResponse * soap_instantiate__ns1__ListAllMyBucketsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (68), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__ListAllMyBucketsResponse);
  if (size)
   *size = sizeof(_ns1__ListAllMyBucketsResponse);
  ((_ns1__ListAllMyBucketsResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__ListAllMyBucketsResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__ListAllMyBucketsResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__ListAllMyBucketsResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__ListAllMyBucketsResponse*)cp->ptr;
}

 void soap_copy__ns1__ListAllMyBucketsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__ListAllMyBucketsResponse*)p = *(_ns1__ListAllMyBucketsResponse*)q;
}

void _ns1__ListAllMyBuckets::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__ListAllMyBuckets::AWSAccessKeyId);
 this->_ns1__ListAllMyBuckets::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__ListAllMyBuckets::Signature);

}

void _ns1__ListAllMyBuckets::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__ListAllMyBuckets::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__ListAllMyBuckets::Timestamp);
 soap_serialize_string(soap, &this->_ns1__ListAllMyBuckets::Signature);

}

int _ns1__ListAllMyBuckets::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__ListAllMyBuckets(soap, tag, id, this, type);
}

 int soap_out__ns1__ListAllMyBuckets(struct soap *soap, const char *tag, int id, const _ns1__ListAllMyBuckets *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (67)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__ListAllMyBuckets::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__ListAllMyBuckets::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__ListAllMyBuckets::Signature), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__ListAllMyBuckets::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__ListAllMyBuckets(soap, tag, this, type);
}

 _ns1__ListAllMyBuckets * soap_in__ns1__ListAllMyBuckets(struct soap *soap, const char *tag, _ns1__ListAllMyBuckets *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__ListAllMyBuckets *)soap_class_id_enter(soap, soap->id, a, (67), sizeof(_ns1__ListAllMyBuckets), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (67))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__ListAllMyBuckets *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__ListAllMyBuckets::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__ListAllMyBuckets::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__ListAllMyBuckets::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__ListAllMyBuckets *)soap_id_forward(soap, soap->href, (void*)a, 0, (67), 0, sizeof(_ns1__ListAllMyBuckets), 0, soap_copy__ns1__ListAllMyBuckets);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int _ns1__ListAllMyBuckets::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (67));
 if (this->soap_out(soap, tag?tag:"ns1:ListAllMyBuckets", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__ListAllMyBuckets::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__ListAllMyBuckets(soap, this, tag, type);
}

 _ns1__ListAllMyBuckets * soap_get__ns1__ListAllMyBuckets(struct soap *soap, _ns1__ListAllMyBuckets *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__ListAllMyBuckets(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__ListAllMyBuckets * soap_instantiate__ns1__ListAllMyBuckets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (67), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__ListAllMyBuckets);
  if (size)
   *size = sizeof(_ns1__ListAllMyBuckets);
  ((_ns1__ListAllMyBuckets*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__ListAllMyBuckets[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__ListAllMyBuckets);
  for (int i = 0; i < n; i++)
   ((_ns1__ListAllMyBuckets*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__ListAllMyBuckets*)cp->ptr;
}

 void soap_copy__ns1__ListAllMyBuckets(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__ListAllMyBuckets*)p = *(_ns1__ListAllMyBuckets*)q;
}

void _ns1__ListBucketResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__ListBucketResponse::ListBucketResponse = __null;

}

void _ns1__ListBucketResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__ListBucketResult(soap, &this->_ns1__ListBucketResponse::ListBucketResponse);

}

int _ns1__ListBucketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__ListBucketResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__ListBucketResponse(struct soap *soap, const char *tag, int id, const _ns1__ListBucketResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (66)), type))
  return soap->error;
 if (a->ListBucketResponse)
  soap_element_result(soap, "ns1:ListBucketResponse");
 if (soap_out_PointerTons1__ListBucketResult(soap, "ns1:ListBucketResponse", -1, &(a->_ns1__ListBucketResponse::ListBucketResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__ListBucketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__ListBucketResponse(soap, tag, this, type);
}

 _ns1__ListBucketResponse * soap_in__ns1__ListBucketResponse(struct soap *soap, const char *tag, _ns1__ListBucketResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__ListBucketResponse *)soap_class_id_enter(soap, soap->id, a, (66), sizeof(_ns1__ListBucketResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (66))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__ListBucketResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_ListBucketResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_ListBucketResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__ListBucketResult(soap, "ns1:ListBucketResponse", &(a->_ns1__ListBucketResponse::ListBucketResponse), "ns1:ListBucketResult"))
    { soap_flag_ListBucketResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:ListBucketResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__ListBucketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (66), 0, sizeof(_ns1__ListBucketResponse), 0, soap_copy__ns1__ListBucketResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_ListBucketResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__ListBucketResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (66));
 if (this->soap_out(soap, tag?tag:"ns1:ListBucketResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__ListBucketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__ListBucketResponse(soap, this, tag, type);
}

 _ns1__ListBucketResponse * soap_get__ns1__ListBucketResponse(struct soap *soap, _ns1__ListBucketResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__ListBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__ListBucketResponse * soap_instantiate__ns1__ListBucketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (66), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__ListBucketResponse);
  if (size)
   *size = sizeof(_ns1__ListBucketResponse);
  ((_ns1__ListBucketResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__ListBucketResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__ListBucketResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__ListBucketResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__ListBucketResponse*)cp->ptr;
}

 void soap_copy__ns1__ListBucketResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__ListBucketResponse*)p = *(_ns1__ListBucketResponse*)q;
}

void _ns1__ListBucket::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__ListBucket::Bucket);
 soap_default_string(soap, &this->_ns1__ListBucket::Prefix);
 soap_default_string(soap, &this->_ns1__ListBucket::Marker);
 this->_ns1__ListBucket::MaxKeys = __null;
 soap_default_string(soap, &this->_ns1__ListBucket::Delimiter);
 soap_default_string(soap, &this->_ns1__ListBucket::AWSAccessKeyId);
 this->_ns1__ListBucket::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__ListBucket::Signature);
 soap_default_string(soap, &this->_ns1__ListBucket::Credential);

}

void _ns1__ListBucket::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__ListBucket::Bucket);
 soap_serialize_string(soap, &this->_ns1__ListBucket::Prefix);
 soap_serialize_string(soap, &this->_ns1__ListBucket::Marker);
 soap_serialize_PointerToint(soap, &this->_ns1__ListBucket::MaxKeys);
 soap_serialize_string(soap, &this->_ns1__ListBucket::Delimiter);
 soap_serialize_string(soap, &this->_ns1__ListBucket::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__ListBucket::Timestamp);
 soap_serialize_string(soap, &this->_ns1__ListBucket::Signature);
 soap_serialize_string(soap, &this->_ns1__ListBucket::Credential);

}

int _ns1__ListBucket::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__ListBucket(soap, tag, id, this, type);
}

 int soap_out__ns1__ListBucket(struct soap *soap, const char *tag, int id, const _ns1__ListBucket *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (65)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__ListBucket::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Prefix", -1, &(a->_ns1__ListBucket::Prefix), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Marker", -1, &(a->_ns1__ListBucket::Marker), ""))
  return soap->error;
 if (soap_out_PointerToint(soap, "ns1:MaxKeys", -1, &(a->_ns1__ListBucket::MaxKeys), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Delimiter", -1, &(a->_ns1__ListBucket::Delimiter), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__ListBucket::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__ListBucket::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__ListBucket::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__ListBucket::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__ListBucket::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__ListBucket(soap, tag, this, type);
}

 _ns1__ListBucket * soap_in__ns1__ListBucket(struct soap *soap, const char *tag, _ns1__ListBucket *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__ListBucket *)soap_class_id_enter(soap, soap->id, a, (65), sizeof(_ns1__ListBucket), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (65))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__ListBucket *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Prefix1 = 1;
 size_t soap_flag_Marker1 = 1;
 size_t soap_flag_MaxKeys1 = 1;
 size_t soap_flag_Delimiter1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__ListBucket::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Prefix1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Prefix", &(a->_ns1__ListBucket::Prefix), "xsd:string"))
    { soap_flag_Prefix1--;
     continue;
    }
   if (soap_flag_Marker1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Marker", &(a->_ns1__ListBucket::Marker), "xsd:string"))
    { soap_flag_Marker1--;
     continue;
    }
   if (soap_flag_MaxKeys1 && soap->error == 3)
    if (soap_in_PointerToint(soap, "ns1:MaxKeys", &(a->_ns1__ListBucket::MaxKeys), "xsd:int"))
    { soap_flag_MaxKeys1--;
     continue;
    }
   if (soap_flag_Delimiter1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Delimiter", &(a->_ns1__ListBucket::Delimiter), "xsd:string"))
    { soap_flag_Delimiter1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__ListBucket::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__ListBucket::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__ListBucket::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__ListBucket::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__ListBucket *)soap_id_forward(soap, soap->href, (void*)a, 0, (65), 0, sizeof(_ns1__ListBucket), 0, soap_copy__ns1__ListBucket);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__ListBucket::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (65));
 if (this->soap_out(soap, tag?tag:"ns1:ListBucket", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__ListBucket::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__ListBucket(soap, this, tag, type);
}

 _ns1__ListBucket * soap_get__ns1__ListBucket(struct soap *soap, _ns1__ListBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__ListBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__ListBucket * soap_instantiate__ns1__ListBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (65), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__ListBucket);
  if (size)
   *size = sizeof(_ns1__ListBucket);
  ((_ns1__ListBucket*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__ListBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__ListBucket);
  for (int i = 0; i < n; i++)
   ((_ns1__ListBucket*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__ListBucket*)cp->ptr;
}

 void soap_copy__ns1__ListBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__ListBucket*)p = *(_ns1__ListBucket*)q;
}

void _ns1__DeleteObjectResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__DeleteObjectResponse::DeleteObjectResponse = __null;

}

void _ns1__DeleteObjectResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__Status(soap, &this->_ns1__DeleteObjectResponse::DeleteObjectResponse);

}

int _ns1__DeleteObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__DeleteObjectResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__DeleteObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__DeleteObjectResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (64)), type))
  return soap->error;
 if (a->DeleteObjectResponse)
  soap_element_result(soap, "ns1:DeleteObjectResponse");
 if (soap_out_PointerTons1__Status(soap, "ns1:DeleteObjectResponse", -1, &(a->_ns1__DeleteObjectResponse::DeleteObjectResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__DeleteObjectResponse(soap, tag, this, type);
}

 _ns1__DeleteObjectResponse * soap_in__ns1__DeleteObjectResponse(struct soap *soap, const char *tag, _ns1__DeleteObjectResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__DeleteObjectResponse *)soap_class_id_enter(soap, soap->id, a, (64), sizeof(_ns1__DeleteObjectResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (64))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__DeleteObjectResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_DeleteObjectResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_DeleteObjectResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__Status(soap, "ns1:DeleteObjectResponse", &(a->_ns1__DeleteObjectResponse::DeleteObjectResponse), "ns1:Status"))
    { soap_flag_DeleteObjectResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:DeleteObjectResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__DeleteObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (64), 0, sizeof(_ns1__DeleteObjectResponse), 0, soap_copy__ns1__DeleteObjectResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_DeleteObjectResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__DeleteObjectResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (64));
 if (this->soap_out(soap, tag?tag:"ns1:DeleteObjectResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__DeleteObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__DeleteObjectResponse(soap, this, tag, type);
}

 _ns1__DeleteObjectResponse * soap_get__ns1__DeleteObjectResponse(struct soap *soap, _ns1__DeleteObjectResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__DeleteObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__DeleteObjectResponse * soap_instantiate__ns1__DeleteObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (64), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__DeleteObjectResponse);
  if (size)
   *size = sizeof(_ns1__DeleteObjectResponse);
  ((_ns1__DeleteObjectResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__DeleteObjectResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__DeleteObjectResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__DeleteObjectResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__DeleteObjectResponse*)cp->ptr;
}

 void soap_copy__ns1__DeleteObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__DeleteObjectResponse*)p = *(_ns1__DeleteObjectResponse*)q;
}

void _ns1__DeleteObject::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__DeleteObject::Bucket);
 soap_default_string(soap, &this->_ns1__DeleteObject::Key);
 soap_default_string(soap, &this->_ns1__DeleteObject::AWSAccessKeyId);
 this->_ns1__DeleteObject::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__DeleteObject::Signature);
 soap_default_string(soap, &this->_ns1__DeleteObject::Credential);

}

void _ns1__DeleteObject::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__DeleteObject::Bucket);
 soap_serialize_string(soap, &this->_ns1__DeleteObject::Key);
 soap_serialize_string(soap, &this->_ns1__DeleteObject::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__DeleteObject::Timestamp);
 soap_serialize_string(soap, &this->_ns1__DeleteObject::Signature);
 soap_serialize_string(soap, &this->_ns1__DeleteObject::Credential);

}

int _ns1__DeleteObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__DeleteObject(soap, tag, id, this, type);
}

 int soap_out__ns1__DeleteObject(struct soap *soap, const char *tag, int id, const _ns1__DeleteObject *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (63)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__DeleteObject::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__DeleteObject::Key), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__DeleteObject::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__DeleteObject::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__DeleteObject::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__DeleteObject::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteObject::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__DeleteObject(soap, tag, this, type);
}

 _ns1__DeleteObject * soap_in__ns1__DeleteObject(struct soap *soap, const char *tag, _ns1__DeleteObject *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__DeleteObject *)soap_class_id_enter(soap, soap->id, a, (63), sizeof(_ns1__DeleteObject), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (63))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__DeleteObject *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__DeleteObject::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__DeleteObject::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__DeleteObject::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__DeleteObject::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__DeleteObject::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__DeleteObject::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__DeleteObject *)soap_id_forward(soap, soap->href, (void*)a, 0, (63), 0, sizeof(_ns1__DeleteObject), 0, soap_copy__ns1__DeleteObject);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__DeleteObject::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (63));
 if (this->soap_out(soap, tag?tag:"ns1:DeleteObject", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__DeleteObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__DeleteObject(soap, this, tag, type);
}

 _ns1__DeleteObject * soap_get__ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__DeleteObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__DeleteObject * soap_instantiate__ns1__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (63), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__DeleteObject);
  if (size)
   *size = sizeof(_ns1__DeleteObject);
  ((_ns1__DeleteObject*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__DeleteObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__DeleteObject);
  for (int i = 0; i < n; i++)
   ((_ns1__DeleteObject*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__DeleteObject*)cp->ptr;
}

 void soap_copy__ns1__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__DeleteObject*)p = *(_ns1__DeleteObject*)q;
}

void _ns1__PutObjectInlineResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__PutObjectInlineResponse::PutObjectInlineResponse = __null;

}

void _ns1__PutObjectInlineResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__PutObjectResult(soap, &this->_ns1__PutObjectInlineResponse::PutObjectInlineResponse);

}

int _ns1__PutObjectInlineResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__PutObjectInlineResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__PutObjectInlineResponse(struct soap *soap, const char *tag, int id, const _ns1__PutObjectInlineResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (62)), type))
  return soap->error;
 if (a->PutObjectInlineResponse)
  soap_element_result(soap, "ns1:PutObjectInlineResponse");
 if (soap_out_PointerTons1__PutObjectResult(soap, "ns1:PutObjectInlineResponse", -1, &(a->_ns1__PutObjectInlineResponse::PutObjectInlineResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__PutObjectInlineResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__PutObjectInlineResponse(soap, tag, this, type);
}

 _ns1__PutObjectInlineResponse * soap_in__ns1__PutObjectInlineResponse(struct soap *soap, const char *tag, _ns1__PutObjectInlineResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__PutObjectInlineResponse *)soap_class_id_enter(soap, soap->id, a, (62), sizeof(_ns1__PutObjectInlineResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (62))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__PutObjectInlineResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_PutObjectInlineResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_PutObjectInlineResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__PutObjectResult(soap, "ns1:PutObjectInlineResponse", &(a->_ns1__PutObjectInlineResponse::PutObjectInlineResponse), "ns1:PutObjectResult"))
    { soap_flag_PutObjectInlineResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:PutObjectInlineResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__PutObjectInlineResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (62), 0, sizeof(_ns1__PutObjectInlineResponse), 0, soap_copy__ns1__PutObjectInlineResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_PutObjectInlineResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__PutObjectInlineResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (62));
 if (this->soap_out(soap, tag?tag:"ns1:PutObjectInlineResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__PutObjectInlineResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__PutObjectInlineResponse(soap, this, tag, type);
}

 _ns1__PutObjectInlineResponse * soap_get__ns1__PutObjectInlineResponse(struct soap *soap, _ns1__PutObjectInlineResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__PutObjectInlineResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__PutObjectInlineResponse * soap_instantiate__ns1__PutObjectInlineResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (62), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__PutObjectInlineResponse);
  if (size)
   *size = sizeof(_ns1__PutObjectInlineResponse);
  ((_ns1__PutObjectInlineResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__PutObjectInlineResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__PutObjectInlineResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__PutObjectInlineResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__PutObjectInlineResponse*)cp->ptr;
}

 void soap_copy__ns1__PutObjectInlineResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__PutObjectInlineResponse*)p = *(_ns1__PutObjectInlineResponse*)q;
}

void _ns1__PutObjectInline::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__PutObjectInline::Bucket);
 soap_default_string(soap, &this->_ns1__PutObjectInline::Key);
 this->_ns1__PutObjectInline::__sizeMetadata = 0;
 this->_ns1__PutObjectInline::Metadata = __null;
 this->_ns1__PutObjectInline::Data.xsd__base64Binary::soap_default(soap);
 soap_default_LONG64(soap, &this->_ns1__PutObjectInline::ContentLength);
 this->_ns1__PutObjectInline::AccessControlList = __null;
 this->_ns1__PutObjectInline::StorageClass = __null;
 soap_default_string(soap, &this->_ns1__PutObjectInline::AWSAccessKeyId);
 this->_ns1__PutObjectInline::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__PutObjectInline::Signature);
 soap_default_string(soap, &this->_ns1__PutObjectInline::Credential);

}

void _ns1__PutObjectInline::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__PutObjectInline::Bucket);
 soap_serialize_string(soap, &this->_ns1__PutObjectInline::Key);
 if (this->_ns1__PutObjectInline::Metadata)
 { int i;
  for (i = 0; i < this->_ns1__PutObjectInline::__sizeMetadata; i++)
  {
   soap_serialize_PointerTons1__MetadataEntry(soap, this->_ns1__PutObjectInline::Metadata + i);
  }
 }
 soap_embedded(soap, &this->_ns1__PutObjectInline::Data, (8));
 this->_ns1__PutObjectInline::Data.soap_serialize(soap);
 soap_embedded(soap, &this->_ns1__PutObjectInline::ContentLength, (85));
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__PutObjectInline::AccessControlList);
 soap_serialize_PointerTons1__StorageClass(soap, &this->_ns1__PutObjectInline::StorageClass);
 soap_serialize_string(soap, &this->_ns1__PutObjectInline::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__PutObjectInline::Timestamp);
 soap_serialize_string(soap, &this->_ns1__PutObjectInline::Signature);
 soap_serialize_string(soap, &this->_ns1__PutObjectInline::Credential);

}

int _ns1__PutObjectInline::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__PutObjectInline(soap, tag, id, this, type);
}

 int soap_out__ns1__PutObjectInline(struct soap *soap, const char *tag, int id, const _ns1__PutObjectInline *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (61)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__PutObjectInline::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__PutObjectInline::Key), ""))
  return soap->error;
 if (a->_ns1__PutObjectInline::Metadata)
 { int i;
  for (i = 0; i < a->_ns1__PutObjectInline::__sizeMetadata; i++)
   if (soap_out_PointerTons1__MetadataEntry(soap, "ns1:Metadata", -1, a->_ns1__PutObjectInline::Metadata + i, ""))
    return soap->error;
 }
 if ((a->_ns1__PutObjectInline::Data).soap_out(soap, "ns1:Data", -1, ""))
  return soap->error;
 if (soap_out_LONG64(soap, "ns1:ContentLength", -1, &(a->_ns1__PutObjectInline::ContentLength), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__PutObjectInline::AccessControlList), ""))
  return soap->error;
 if (soap_out_PointerTons1__StorageClass(soap, "ns1:StorageClass", -1, &(a->_ns1__PutObjectInline::StorageClass), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__PutObjectInline::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__PutObjectInline::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__PutObjectInline::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__PutObjectInline::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__PutObjectInline::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__PutObjectInline(soap, tag, this, type);
}

 _ns1__PutObjectInline * soap_in__ns1__PutObjectInline(struct soap *soap, const char *tag, _ns1__PutObjectInline *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__PutObjectInline *)soap_class_id_enter(soap, soap->id, a, (61), sizeof(_ns1__PutObjectInline), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (61))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__PutObjectInline *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 struct soap_blist *soap_blist_Metadata1 = __null;
 size_t soap_flag_Data1 = 1;
 size_t soap_flag_ContentLength1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_StorageClass1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__PutObjectInline::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__PutObjectInline::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Metadata", 1, __null))
   { if (a->_ns1__PutObjectInline::Metadata == __null)
    { if (soap_blist_Metadata1 == __null)
      soap_blist_Metadata1 = soap_new_block(soap);
     a->_ns1__PutObjectInline::Metadata = (ns1__MetadataEntry **)soap_push_block(soap, soap_blist_Metadata1, sizeof(ns1__MetadataEntry *));
     if (a->_ns1__PutObjectInline::Metadata == __null)
      return __null;
     *a->_ns1__PutObjectInline::Metadata = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__MetadataEntry(soap, "ns1:Metadata", a->_ns1__PutObjectInline::Metadata, "ns1:MetadataEntry"))
    { a->_ns1__PutObjectInline::__sizeMetadata++;
     a->_ns1__PutObjectInline::Metadata = __null;
     continue;
    }
   }
   if (soap_flag_Data1 && soap->error == 3)
    if ((a->_ns1__PutObjectInline::Data).soap_in(soap, "ns1:Data", "xsd:base64Binary"))
    { soap_flag_Data1--;
     continue;
    }
   if (soap_flag_ContentLength1 && soap->error == 3)
    if (soap_in_LONG64(soap, "ns1:ContentLength", &(a->_ns1__PutObjectInline::ContentLength), "xsd:long"))
    { soap_flag_ContentLength1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__PutObjectInline::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_StorageClass1 && soap->error == 3)
    if (soap_in_PointerTons1__StorageClass(soap, "ns1:StorageClass", &(a->_ns1__PutObjectInline::StorageClass), "ns1:StorageClass"))
    { soap_flag_StorageClass1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__PutObjectInline::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__PutObjectInline::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__PutObjectInline::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__PutObjectInline::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->_ns1__PutObjectInline::Metadata)
   soap_pop_block(soap, soap_blist_Metadata1);
  if (a->_ns1__PutObjectInline::__sizeMetadata)
   a->_ns1__PutObjectInline::Metadata = (ns1__MetadataEntry **)soap_save_block(soap, soap_blist_Metadata1, __null, 1);
  else
  { a->_ns1__PutObjectInline::Metadata = __null;
   if (soap_blist_Metadata1)
    soap_end_block(soap, soap_blist_Metadata1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__PutObjectInline *)soap_id_forward(soap, soap->href, (void*)a, 0, (61), 0, sizeof(_ns1__PutObjectInline), 0, soap_copy__ns1__PutObjectInline);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || a->_ns1__PutObjectInline::__sizeMetadata > 100 || soap_flag_Data1 > 0 || soap_flag_ContentLength1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__PutObjectInline::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (61));
 if (this->soap_out(soap, tag?tag:"ns1:PutObjectInline", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__PutObjectInline::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__PutObjectInline(soap, this, tag, type);
}

 _ns1__PutObjectInline * soap_get__ns1__PutObjectInline(struct soap *soap, _ns1__PutObjectInline *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__PutObjectInline(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__PutObjectInline * soap_instantiate__ns1__PutObjectInline(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (61), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__PutObjectInline);
  if (size)
   *size = sizeof(_ns1__PutObjectInline);
  ((_ns1__PutObjectInline*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__PutObjectInline[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__PutObjectInline);
  for (int i = 0; i < n; i++)
   ((_ns1__PutObjectInline*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__PutObjectInline*)cp->ptr;
}

 void soap_copy__ns1__PutObjectInline(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__PutObjectInline*)p = *(_ns1__PutObjectInline*)q;
}

void _ns1__PutObjectResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__PutObjectResponse::PutObjectResponse = __null;

}

void _ns1__PutObjectResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__PutObjectResult(soap, &this->_ns1__PutObjectResponse::PutObjectResponse);

}

int _ns1__PutObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__PutObjectResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__PutObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__PutObjectResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (60)), type))
  return soap->error;
 if (a->PutObjectResponse)
  soap_element_result(soap, "ns1:PutObjectResponse");
 if (soap_out_PointerTons1__PutObjectResult(soap, "ns1:PutObjectResponse", -1, &(a->_ns1__PutObjectResponse::PutObjectResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__PutObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__PutObjectResponse(soap, tag, this, type);
}

 _ns1__PutObjectResponse * soap_in__ns1__PutObjectResponse(struct soap *soap, const char *tag, _ns1__PutObjectResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__PutObjectResponse *)soap_class_id_enter(soap, soap->id, a, (60), sizeof(_ns1__PutObjectResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (60))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__PutObjectResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_PutObjectResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_PutObjectResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__PutObjectResult(soap, "ns1:PutObjectResponse", &(a->_ns1__PutObjectResponse::PutObjectResponse), "ns1:PutObjectResult"))
    { soap_flag_PutObjectResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:PutObjectResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__PutObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (60), 0, sizeof(_ns1__PutObjectResponse), 0, soap_copy__ns1__PutObjectResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_PutObjectResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__PutObjectResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (60));
 if (this->soap_out(soap, tag?tag:"ns1:PutObjectResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__PutObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__PutObjectResponse(soap, this, tag, type);
}

 _ns1__PutObjectResponse * soap_get__ns1__PutObjectResponse(struct soap *soap, _ns1__PutObjectResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__PutObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__PutObjectResponse * soap_instantiate__ns1__PutObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (60), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__PutObjectResponse);
  if (size)
   *size = sizeof(_ns1__PutObjectResponse);
  ((_ns1__PutObjectResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__PutObjectResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__PutObjectResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__PutObjectResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__PutObjectResponse*)cp->ptr;
}

 void soap_copy__ns1__PutObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__PutObjectResponse*)p = *(_ns1__PutObjectResponse*)q;
}

void _ns1__PutObject::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__PutObject::Bucket);
 soap_default_string(soap, &this->_ns1__PutObject::Key);
 this->_ns1__PutObject::__sizeMetadata = 0;
 this->_ns1__PutObject::Metadata = __null;
 soap_default_LONG64(soap, &this->_ns1__PutObject::ContentLength);
 this->_ns1__PutObject::AccessControlList = __null;
 this->_ns1__PutObject::StorageClass = __null;
 soap_default_string(soap, &this->_ns1__PutObject::AWSAccessKeyId);
 this->_ns1__PutObject::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__PutObject::Signature);
 soap_default_string(soap, &this->_ns1__PutObject::Credential);

}

void _ns1__PutObject::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__PutObject::Bucket);
 soap_serialize_string(soap, &this->_ns1__PutObject::Key);
 if (this->_ns1__PutObject::Metadata)
 { int i;
  for (i = 0; i < this->_ns1__PutObject::__sizeMetadata; i++)
  {
   soap_serialize_PointerTons1__MetadataEntry(soap, this->_ns1__PutObject::Metadata + i);
  }
 }
 soap_embedded(soap, &this->_ns1__PutObject::ContentLength, (85));
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__PutObject::AccessControlList);
 soap_serialize_PointerTons1__StorageClass(soap, &this->_ns1__PutObject::StorageClass);
 soap_serialize_string(soap, &this->_ns1__PutObject::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__PutObject::Timestamp);
 soap_serialize_string(soap, &this->_ns1__PutObject::Signature);
 soap_serialize_string(soap, &this->_ns1__PutObject::Credential);

}

int _ns1__PutObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__PutObject(soap, tag, id, this, type);
}

 int soap_out__ns1__PutObject(struct soap *soap, const char *tag, int id, const _ns1__PutObject *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (59)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__PutObject::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__PutObject::Key), ""))
  return soap->error;
 if (a->_ns1__PutObject::Metadata)
 { int i;
  for (i = 0; i < a->_ns1__PutObject::__sizeMetadata; i++)
   if (soap_out_PointerTons1__MetadataEntry(soap, "ns1:Metadata", -1, a->_ns1__PutObject::Metadata + i, ""))
    return soap->error;
 }
 if (soap_out_LONG64(soap, "ns1:ContentLength", -1, &(a->_ns1__PutObject::ContentLength), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__PutObject::AccessControlList), ""))
  return soap->error;
 if (soap_out_PointerTons1__StorageClass(soap, "ns1:StorageClass", -1, &(a->_ns1__PutObject::StorageClass), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__PutObject::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__PutObject::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__PutObject::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__PutObject::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__PutObject::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__PutObject(soap, tag, this, type);
}

 _ns1__PutObject * soap_in__ns1__PutObject(struct soap *soap, const char *tag, _ns1__PutObject *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__PutObject *)soap_class_id_enter(soap, soap->id, a, (59), sizeof(_ns1__PutObject), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (59))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__PutObject *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 struct soap_blist *soap_blist_Metadata1 = __null;
 size_t soap_flag_ContentLength1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_StorageClass1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__PutObject::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__PutObject::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Metadata", 1, __null))
   { if (a->_ns1__PutObject::Metadata == __null)
    { if (soap_blist_Metadata1 == __null)
      soap_blist_Metadata1 = soap_new_block(soap);
     a->_ns1__PutObject::Metadata = (ns1__MetadataEntry **)soap_push_block(soap, soap_blist_Metadata1, sizeof(ns1__MetadataEntry *));
     if (a->_ns1__PutObject::Metadata == __null)
      return __null;
     *a->_ns1__PutObject::Metadata = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__MetadataEntry(soap, "ns1:Metadata", a->_ns1__PutObject::Metadata, "ns1:MetadataEntry"))
    { a->_ns1__PutObject::__sizeMetadata++;
     a->_ns1__PutObject::Metadata = __null;
     continue;
    }
   }
   if (soap_flag_ContentLength1 && soap->error == 3)
    if (soap_in_LONG64(soap, "ns1:ContentLength", &(a->_ns1__PutObject::ContentLength), "xsd:long"))
    { soap_flag_ContentLength1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__PutObject::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_StorageClass1 && soap->error == 3)
    if (soap_in_PointerTons1__StorageClass(soap, "ns1:StorageClass", &(a->_ns1__PutObject::StorageClass), "ns1:StorageClass"))
    { soap_flag_StorageClass1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__PutObject::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__PutObject::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__PutObject::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__PutObject::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->_ns1__PutObject::Metadata)
   soap_pop_block(soap, soap_blist_Metadata1);
  if (a->_ns1__PutObject::__sizeMetadata)
   a->_ns1__PutObject::Metadata = (ns1__MetadataEntry **)soap_save_block(soap, soap_blist_Metadata1, __null, 1);
  else
  { a->_ns1__PutObject::Metadata = __null;
   if (soap_blist_Metadata1)
    soap_end_block(soap, soap_blist_Metadata1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__PutObject *)soap_id_forward(soap, soap->href, (void*)a, 0, (59), 0, sizeof(_ns1__PutObject), 0, soap_copy__ns1__PutObject);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || a->_ns1__PutObject::__sizeMetadata > 100 || soap_flag_ContentLength1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__PutObject::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (59));
 if (this->soap_out(soap, tag?tag:"ns1:PutObject", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__PutObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__PutObject(soap, this, tag, type);
}

 _ns1__PutObject * soap_get__ns1__PutObject(struct soap *soap, _ns1__PutObject *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__PutObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__PutObject * soap_instantiate__ns1__PutObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (59), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__PutObject);
  if (size)
   *size = sizeof(_ns1__PutObject);
  ((_ns1__PutObject*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__PutObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__PutObject);
  for (int i = 0; i < n; i++)
   ((_ns1__PutObject*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__PutObject*)cp->ptr;
}

 void soap_copy__ns1__PutObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__PutObject*)p = *(_ns1__PutObject*)q;
}

void _ns1__GetObjectExtendedResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__GetObjectExtendedResponse::GetObjectResponse = __null;

}

void _ns1__GetObjectExtendedResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__GetObjectResult(soap, &this->_ns1__GetObjectExtendedResponse::GetObjectResponse);

}

int _ns1__GetObjectExtendedResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObjectExtendedResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObjectExtendedResponse(struct soap *soap, const char *tag, int id, const _ns1__GetObjectExtendedResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (58)), type))
  return soap->error;
 if (a->GetObjectResponse)
  soap_element_result(soap, "ns1:GetObjectResponse");
 if (soap_out_PointerTons1__GetObjectResult(soap, "ns1:GetObjectResponse", -1, &(a->_ns1__GetObjectExtendedResponse::GetObjectResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectExtendedResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObjectExtendedResponse(soap, tag, this, type);
}

 _ns1__GetObjectExtendedResponse * soap_in__ns1__GetObjectExtendedResponse(struct soap *soap, const char *tag, _ns1__GetObjectExtendedResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObjectExtendedResponse *)soap_class_id_enter(soap, soap->id, a, (58), sizeof(_ns1__GetObjectExtendedResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (58))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObjectExtendedResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_GetObjectResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_GetObjectResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__GetObjectResult(soap, "ns1:GetObjectResponse", &(a->_ns1__GetObjectExtendedResponse::GetObjectResponse), "ns1:GetObjectResult"))
    { soap_flag_GetObjectResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:GetObjectResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObjectExtendedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (58), 0, sizeof(_ns1__GetObjectExtendedResponse), 0, soap_copy__ns1__GetObjectExtendedResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_GetObjectResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObjectExtendedResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (58));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectExtendedResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObjectExtendedResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObjectExtendedResponse(soap, this, tag, type);
}

 _ns1__GetObjectExtendedResponse * soap_get__ns1__GetObjectExtendedResponse(struct soap *soap, _ns1__GetObjectExtendedResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObjectExtendedResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObjectExtendedResponse * soap_instantiate__ns1__GetObjectExtendedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (58), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObjectExtendedResponse);
  if (size)
   *size = sizeof(_ns1__GetObjectExtendedResponse);
  ((_ns1__GetObjectExtendedResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObjectExtendedResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObjectExtendedResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObjectExtendedResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObjectExtendedResponse*)cp->ptr;
}

 void soap_copy__ns1__GetObjectExtendedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObjectExtendedResponse*)p = *(_ns1__GetObjectExtendedResponse*)q;
}

void _ns1__GetObjectExtended::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__GetObjectExtended::Bucket);
 soap_default_string(soap, &this->_ns1__GetObjectExtended::Key);
 soap_default_bool(soap, &this->_ns1__GetObjectExtended::GetMetadata);
 soap_default_bool(soap, &this->_ns1__GetObjectExtended::GetData);
 soap_default_bool(soap, &this->_ns1__GetObjectExtended::InlineData);
 this->_ns1__GetObjectExtended::ByteRangeStart = __null;
 this->_ns1__GetObjectExtended::ByteRangeEnd = __null;
 this->_ns1__GetObjectExtended::IfModifiedSince = __null;
 this->_ns1__GetObjectExtended::IfUnmodifiedSince = __null;
 this->_ns1__GetObjectExtended::__sizeIfMatch = 0;
 this->_ns1__GetObjectExtended::IfMatch = __null;
 this->_ns1__GetObjectExtended::__sizeIfNoneMatch = 0;
 this->_ns1__GetObjectExtended::IfNoneMatch = __null;
 this->_ns1__GetObjectExtended::ReturnCompleteObjectOnConditionFailure = __null;
 soap_default_string(soap, &this->_ns1__GetObjectExtended::AWSAccessKeyId);
 this->_ns1__GetObjectExtended::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__GetObjectExtended::Signature);
 soap_default_string(soap, &this->_ns1__GetObjectExtended::Credential);

}

void _ns1__GetObjectExtended::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__GetObjectExtended::Bucket);
 soap_serialize_string(soap, &this->_ns1__GetObjectExtended::Key);
 soap_embedded(soap, &this->_ns1__GetObjectExtended::GetMetadata, (88));
 soap_embedded(soap, &this->_ns1__GetObjectExtended::GetData, (88));
 soap_embedded(soap, &this->_ns1__GetObjectExtended::InlineData, (88));
 soap_serialize_PointerToLONG64(soap, &this->_ns1__GetObjectExtended::ByteRangeStart);
 soap_serialize_PointerToLONG64(soap, &this->_ns1__GetObjectExtended::ByteRangeEnd);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetObjectExtended::IfModifiedSince);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetObjectExtended::IfUnmodifiedSince);
 if (this->_ns1__GetObjectExtended::IfMatch)
 { int i;
  for (i = 0; i < this->_ns1__GetObjectExtended::__sizeIfMatch; i++)
  {
   soap_serialize_string(soap, this->_ns1__GetObjectExtended::IfMatch + i);
  }
 }
 if (this->_ns1__GetObjectExtended::IfNoneMatch)
 { int i;
  for (i = 0; i < this->_ns1__GetObjectExtended::__sizeIfNoneMatch; i++)
  {
   soap_serialize_string(soap, this->_ns1__GetObjectExtended::IfNoneMatch + i);
  }
 }
 soap_serialize_PointerTobool(soap, &this->_ns1__GetObjectExtended::ReturnCompleteObjectOnConditionFailure);
 soap_serialize_string(soap, &this->_ns1__GetObjectExtended::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetObjectExtended::Timestamp);
 soap_serialize_string(soap, &this->_ns1__GetObjectExtended::Signature);
 soap_serialize_string(soap, &this->_ns1__GetObjectExtended::Credential);

}

int _ns1__GetObjectExtended::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObjectExtended(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObjectExtended(struct soap *soap, const char *tag, int id, const _ns1__GetObjectExtended *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (57)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__GetObjectExtended::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__GetObjectExtended::Key), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:GetMetadata", -1, &(a->_ns1__GetObjectExtended::GetMetadata), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:GetData", -1, &(a->_ns1__GetObjectExtended::GetData), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:InlineData", -1, &(a->_ns1__GetObjectExtended::InlineData), ""))
  return soap->error;
 if (soap_out_PointerToLONG64(soap, "ns1:ByteRangeStart", -1, &(a->_ns1__GetObjectExtended::ByteRangeStart), ""))
  return soap->error;
 if (soap_out_PointerToLONG64(soap, "ns1:ByteRangeEnd", -1, &(a->_ns1__GetObjectExtended::ByteRangeEnd), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:IfModifiedSince", -1, &(a->_ns1__GetObjectExtended::IfModifiedSince), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:IfUnmodifiedSince", -1, &(a->_ns1__GetObjectExtended::IfUnmodifiedSince), ""))
  return soap->error;
 if (a->_ns1__GetObjectExtended::IfMatch)
 { int i;
  for (i = 0; i < a->_ns1__GetObjectExtended::__sizeIfMatch; i++)
   if (soap_out_string(soap, "ns1:IfMatch", -1, a->_ns1__GetObjectExtended::IfMatch + i, ""))
    return soap->error;
 }
 if (a->_ns1__GetObjectExtended::IfNoneMatch)
 { int i;
  for (i = 0; i < a->_ns1__GetObjectExtended::__sizeIfNoneMatch; i++)
   if (soap_out_string(soap, "ns1:IfNoneMatch", -1, a->_ns1__GetObjectExtended::IfNoneMatch + i, ""))
    return soap->error;
 }
 if (soap_out_PointerTobool(soap, "ns1:ReturnCompleteObjectOnConditionFailure", -1, &(a->_ns1__GetObjectExtended::ReturnCompleteObjectOnConditionFailure), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__GetObjectExtended::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__GetObjectExtended::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__GetObjectExtended::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__GetObjectExtended::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectExtended::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObjectExtended(soap, tag, this, type);
}

 _ns1__GetObjectExtended * soap_in__ns1__GetObjectExtended(struct soap *soap, const char *tag, _ns1__GetObjectExtended *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObjectExtended *)soap_class_id_enter(soap, soap->id, a, (57), sizeof(_ns1__GetObjectExtended), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (57))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObjectExtended *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_GetMetadata1 = 1;
 size_t soap_flag_GetData1 = 1;
 size_t soap_flag_InlineData1 = 1;
 size_t soap_flag_ByteRangeStart1 = 1;
 size_t soap_flag_ByteRangeEnd1 = 1;
 size_t soap_flag_IfModifiedSince1 = 1;
 size_t soap_flag_IfUnmodifiedSince1 = 1;
 struct soap_blist *soap_blist_IfMatch1 = __null;
 struct soap_blist *soap_blist_IfNoneMatch1 = __null;
 size_t soap_flag_ReturnCompleteObjectOnConditionFailure1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__GetObjectExtended::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__GetObjectExtended::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_GetMetadata1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:GetMetadata", &(a->_ns1__GetObjectExtended::GetMetadata), "xsd:boolean"))
    { soap_flag_GetMetadata1--;
     continue;
    }
   if (soap_flag_GetData1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:GetData", &(a->_ns1__GetObjectExtended::GetData), "xsd:boolean"))
    { soap_flag_GetData1--;
     continue;
    }
   if (soap_flag_InlineData1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:InlineData", &(a->_ns1__GetObjectExtended::InlineData), "xsd:boolean"))
    { soap_flag_InlineData1--;
     continue;
    }
   if (soap_flag_ByteRangeStart1 && soap->error == 3)
    if (soap_in_PointerToLONG64(soap, "ns1:ByteRangeStart", &(a->_ns1__GetObjectExtended::ByteRangeStart), "xsd:long"))
    { soap_flag_ByteRangeStart1--;
     continue;
    }
   if (soap_flag_ByteRangeEnd1 && soap->error == 3)
    if (soap_in_PointerToLONG64(soap, "ns1:ByteRangeEnd", &(a->_ns1__GetObjectExtended::ByteRangeEnd), "xsd:long"))
    { soap_flag_ByteRangeEnd1--;
     continue;
    }
   if (soap_flag_IfModifiedSince1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:IfModifiedSince", &(a->_ns1__GetObjectExtended::IfModifiedSince), "xsd:dateTime"))
    { soap_flag_IfModifiedSince1--;
     continue;
    }
   if (soap_flag_IfUnmodifiedSince1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:IfUnmodifiedSince", &(a->_ns1__GetObjectExtended::IfUnmodifiedSince), "xsd:dateTime"))
    { soap_flag_IfUnmodifiedSince1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:IfMatch", 1, __null))
   { if (a->_ns1__GetObjectExtended::IfMatch == __null)
    { if (soap_blist_IfMatch1 == __null)
      soap_blist_IfMatch1 = soap_new_block(soap);
     a->_ns1__GetObjectExtended::IfMatch = (char **)soap_push_block(soap, soap_blist_IfMatch1, sizeof(char *));
     if (a->_ns1__GetObjectExtended::IfMatch == __null)
      return __null;
     *a->_ns1__GetObjectExtended::IfMatch = __null;
    }soap_revert(soap);
    if (soap_in_string(soap, "ns1:IfMatch", a->_ns1__GetObjectExtended::IfMatch, "xsd:string"))
    { a->_ns1__GetObjectExtended::__sizeIfMatch++;
     a->_ns1__GetObjectExtended::IfMatch = __null;
     continue;
    }
   }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:IfNoneMatch", 1, __null))
   { if (a->_ns1__GetObjectExtended::IfNoneMatch == __null)
    { if (soap_blist_IfNoneMatch1 == __null)
      soap_blist_IfNoneMatch1 = soap_new_block(soap);
     a->_ns1__GetObjectExtended::IfNoneMatch = (char **)soap_push_block(soap, soap_blist_IfNoneMatch1, sizeof(char *));
     if (a->_ns1__GetObjectExtended::IfNoneMatch == __null)
      return __null;
     *a->_ns1__GetObjectExtended::IfNoneMatch = __null;
    }soap_revert(soap);
    if (soap_in_string(soap, "ns1:IfNoneMatch", a->_ns1__GetObjectExtended::IfNoneMatch, "xsd:string"))
    { a->_ns1__GetObjectExtended::__sizeIfNoneMatch++;
     a->_ns1__GetObjectExtended::IfNoneMatch = __null;
     continue;
    }
   }
   if (soap_flag_ReturnCompleteObjectOnConditionFailure1 && soap->error == 3)
    if (soap_in_PointerTobool(soap, "ns1:ReturnCompleteObjectOnConditionFailure", &(a->_ns1__GetObjectExtended::ReturnCompleteObjectOnConditionFailure), "xsd:boolean"))
    { soap_flag_ReturnCompleteObjectOnConditionFailure1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__GetObjectExtended::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__GetObjectExtended::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__GetObjectExtended::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__GetObjectExtended::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->_ns1__GetObjectExtended::IfMatch)
   soap_pop_block(soap, soap_blist_IfMatch1);
  if (a->_ns1__GetObjectExtended::__sizeIfMatch)
   a->_ns1__GetObjectExtended::IfMatch = (char **)soap_save_block(soap, soap_blist_IfMatch1, __null, 1);
  else
  { a->_ns1__GetObjectExtended::IfMatch = __null;
   if (soap_blist_IfMatch1)
    soap_end_block(soap, soap_blist_IfMatch1);
  }
  if (a->_ns1__GetObjectExtended::IfNoneMatch)
   soap_pop_block(soap, soap_blist_IfNoneMatch1);
  if (a->_ns1__GetObjectExtended::__sizeIfNoneMatch)
   a->_ns1__GetObjectExtended::IfNoneMatch = (char **)soap_save_block(soap, soap_blist_IfNoneMatch1, __null, 1);
  else
  { a->_ns1__GetObjectExtended::IfNoneMatch = __null;
   if (soap_blist_IfNoneMatch1)
    soap_end_block(soap, soap_blist_IfNoneMatch1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObjectExtended *)soap_id_forward(soap, soap->href, (void*)a, 0, (57), 0, sizeof(_ns1__GetObjectExtended), 0, soap_copy__ns1__GetObjectExtended);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || soap_flag_GetMetadata1 > 0 || soap_flag_GetData1 > 0 || soap_flag_InlineData1 > 0 || a->_ns1__GetObjectExtended::__sizeIfMatch > 100 || a->_ns1__GetObjectExtended::__sizeIfNoneMatch > 100))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObjectExtended::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (57));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectExtended", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObjectExtended::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObjectExtended(soap, this, tag, type);
}

 _ns1__GetObjectExtended * soap_get__ns1__GetObjectExtended(struct soap *soap, _ns1__GetObjectExtended *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObjectExtended(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObjectExtended * soap_instantiate__ns1__GetObjectExtended(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (57), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObjectExtended);
  if (size)
   *size = sizeof(_ns1__GetObjectExtended);
  ((_ns1__GetObjectExtended*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObjectExtended[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObjectExtended);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObjectExtended*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObjectExtended*)cp->ptr;
}

 void soap_copy__ns1__GetObjectExtended(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObjectExtended*)p = *(_ns1__GetObjectExtended*)q;
}

void _ns1__GetObjectResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__GetObjectResponse::GetObjectResponse = __null;

}

void _ns1__GetObjectResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__GetObjectResult(soap, &this->_ns1__GetObjectResponse::GetObjectResponse);

}

int _ns1__GetObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObjectResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObjectResponse(struct soap *soap, const char *tag, int id, const _ns1__GetObjectResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (56)), type))
  return soap->error;
 if (a->GetObjectResponse)
  soap_element_result(soap, "ns1:GetObjectResponse");
 if (soap_out_PointerTons1__GetObjectResult(soap, "ns1:GetObjectResponse", -1, &(a->_ns1__GetObjectResponse::GetObjectResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObjectResponse(soap, tag, this, type);
}

 _ns1__GetObjectResponse * soap_in__ns1__GetObjectResponse(struct soap *soap, const char *tag, _ns1__GetObjectResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObjectResponse *)soap_class_id_enter(soap, soap->id, a, (56), sizeof(_ns1__GetObjectResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (56))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObjectResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_GetObjectResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_GetObjectResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__GetObjectResult(soap, "ns1:GetObjectResponse", &(a->_ns1__GetObjectResponse::GetObjectResponse), "ns1:GetObjectResult"))
    { soap_flag_GetObjectResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:GetObjectResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (56), 0, sizeof(_ns1__GetObjectResponse), 0, soap_copy__ns1__GetObjectResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_GetObjectResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObjectResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (56));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObjectResponse(soap, this, tag, type);
}

 _ns1__GetObjectResponse * soap_get__ns1__GetObjectResponse(struct soap *soap, _ns1__GetObjectResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObjectResponse * soap_instantiate__ns1__GetObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (56), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObjectResponse);
  if (size)
   *size = sizeof(_ns1__GetObjectResponse);
  ((_ns1__GetObjectResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObjectResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObjectResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObjectResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObjectResponse*)cp->ptr;
}

 void soap_copy__ns1__GetObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObjectResponse*)p = *(_ns1__GetObjectResponse*)q;
}

void _ns1__GetObject::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__GetObject::Bucket);
 soap_default_string(soap, &this->_ns1__GetObject::Key);
 soap_default_bool(soap, &this->_ns1__GetObject::GetMetadata);
 soap_default_bool(soap, &this->_ns1__GetObject::GetData);
 soap_default_bool(soap, &this->_ns1__GetObject::InlineData);
 soap_default_string(soap, &this->_ns1__GetObject::AWSAccessKeyId);
 this->_ns1__GetObject::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__GetObject::Signature);
 soap_default_string(soap, &this->_ns1__GetObject::Credential);

}

void _ns1__GetObject::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__GetObject::Bucket);
 soap_serialize_string(soap, &this->_ns1__GetObject::Key);
 soap_embedded(soap, &this->_ns1__GetObject::GetMetadata, (88));
 soap_embedded(soap, &this->_ns1__GetObject::GetData, (88));
 soap_embedded(soap, &this->_ns1__GetObject::InlineData, (88));
 soap_serialize_string(soap, &this->_ns1__GetObject::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetObject::Timestamp);
 soap_serialize_string(soap, &this->_ns1__GetObject::Signature);
 soap_serialize_string(soap, &this->_ns1__GetObject::Credential);

}

int _ns1__GetObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObject(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObject(struct soap *soap, const char *tag, int id, const _ns1__GetObject *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (55)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__GetObject::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__GetObject::Key), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:GetMetadata", -1, &(a->_ns1__GetObject::GetMetadata), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:GetData", -1, &(a->_ns1__GetObject::GetData), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:InlineData", -1, &(a->_ns1__GetObject::InlineData), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__GetObject::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__GetObject::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__GetObject::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__GetObject::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObject::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObject(soap, tag, this, type);
}

 _ns1__GetObject * soap_in__ns1__GetObject(struct soap *soap, const char *tag, _ns1__GetObject *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObject *)soap_class_id_enter(soap, soap->id, a, (55), sizeof(_ns1__GetObject), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (55))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObject *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_GetMetadata1 = 1;
 size_t soap_flag_GetData1 = 1;
 size_t soap_flag_InlineData1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__GetObject::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__GetObject::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_GetMetadata1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:GetMetadata", &(a->_ns1__GetObject::GetMetadata), "xsd:boolean"))
    { soap_flag_GetMetadata1--;
     continue;
    }
   if (soap_flag_GetData1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:GetData", &(a->_ns1__GetObject::GetData), "xsd:boolean"))
    { soap_flag_GetData1--;
     continue;
    }
   if (soap_flag_InlineData1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:InlineData", &(a->_ns1__GetObject::InlineData), "xsd:boolean"))
    { soap_flag_InlineData1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__GetObject::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__GetObject::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__GetObject::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__GetObject::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObject *)soap_id_forward(soap, soap->href, (void*)a, 0, (55), 0, sizeof(_ns1__GetObject), 0, soap_copy__ns1__GetObject);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || soap_flag_GetMetadata1 > 0 || soap_flag_GetData1 > 0 || soap_flag_InlineData1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObject::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (55));
 if (this->soap_out(soap, tag?tag:"ns1:GetObject", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObject(soap, this, tag, type);
}

 _ns1__GetObject * soap_get__ns1__GetObject(struct soap *soap, _ns1__GetObject *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObject * soap_instantiate__ns1__GetObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (55), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObject);
  if (size)
   *size = sizeof(_ns1__GetObject);
  ((_ns1__GetObject*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObject);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObject*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObject*)cp->ptr;
}

 void soap_copy__ns1__GetObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObject*)p = *(_ns1__GetObject*)q;
}

void _ns1__SetBucketAccessControlPolicyResponse::soap_default(struct soap *soap)
{
 this->soap = soap;

}

void _ns1__SetBucketAccessControlPolicyResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int _ns1__SetBucketAccessControlPolicyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetBucketAccessControlPolicyResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, const _ns1__SetBucketAccessControlPolicyResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (54)), type))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetBucketAccessControlPolicyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetBucketAccessControlPolicyResponse(soap, tag, this, type);
}

 _ns1__SetBucketAccessControlPolicyResponse * soap_in__ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__SetBucketAccessControlPolicyResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetBucketAccessControlPolicyResponse *)soap_class_id_enter(soap, soap->id, a, (54), sizeof(_ns1__SetBucketAccessControlPolicyResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (54))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetBucketAccessControlPolicyResponse *)a->soap_in(soap, tag, type);
  }
 }
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetBucketAccessControlPolicyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (54), 0, sizeof(_ns1__SetBucketAccessControlPolicyResponse), 0, soap_copy__ns1__SetBucketAccessControlPolicyResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int _ns1__SetBucketAccessControlPolicyResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (54));
 if (this->soap_out(soap, tag?tag:"ns1:SetBucketAccessControlPolicyResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetBucketAccessControlPolicyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetBucketAccessControlPolicyResponse(soap, this, tag, type);
}

 _ns1__SetBucketAccessControlPolicyResponse * soap_get__ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__SetBucketAccessControlPolicyResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetBucketAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetBucketAccessControlPolicyResponse * soap_instantiate__ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (54), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetBucketAccessControlPolicyResponse);
  if (size)
   *size = sizeof(_ns1__SetBucketAccessControlPolicyResponse);
  ((_ns1__SetBucketAccessControlPolicyResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetBucketAccessControlPolicyResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetBucketAccessControlPolicyResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__SetBucketAccessControlPolicyResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetBucketAccessControlPolicyResponse*)cp->ptr;
}

 void soap_copy__ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetBucketAccessControlPolicyResponse*)p = *(_ns1__SetBucketAccessControlPolicyResponse*)q;
}

void _ns1__SetBucketAccessControlPolicy::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Bucket);
 this->_ns1__SetBucketAccessControlPolicy::AccessControlList = __null;
 soap_default_string(soap, &this->_ns1__SetBucketAccessControlPolicy::AWSAccessKeyId);
 this->_ns1__SetBucketAccessControlPolicy::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Signature);
 soap_default_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Credential);

}

void _ns1__SetBucketAccessControlPolicy::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Bucket);
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__SetBucketAccessControlPolicy::AccessControlList);
 soap_serialize_string(soap, &this->_ns1__SetBucketAccessControlPolicy::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__SetBucketAccessControlPolicy::Timestamp);
 soap_serialize_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Signature);
 soap_serialize_string(soap, &this->_ns1__SetBucketAccessControlPolicy::Credential);

}

int _ns1__SetBucketAccessControlPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetBucketAccessControlPolicy(soap, tag, id, this, type);
}

 int soap_out__ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, const _ns1__SetBucketAccessControlPolicy *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (53)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__SetBucketAccessControlPolicy::Bucket), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__SetBucketAccessControlPolicy::AccessControlList), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__SetBucketAccessControlPolicy::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__SetBucketAccessControlPolicy::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__SetBucketAccessControlPolicy::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__SetBucketAccessControlPolicy::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetBucketAccessControlPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetBucketAccessControlPolicy(soap, tag, this, type);
}

 _ns1__SetBucketAccessControlPolicy * soap_in__ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, _ns1__SetBucketAccessControlPolicy *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetBucketAccessControlPolicy *)soap_class_id_enter(soap, soap->id, a, (53), sizeof(_ns1__SetBucketAccessControlPolicy), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (53))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetBucketAccessControlPolicy *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__SetBucketAccessControlPolicy::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__SetBucketAccessControlPolicy::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__SetBucketAccessControlPolicy::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__SetBucketAccessControlPolicy::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__SetBucketAccessControlPolicy::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__SetBucketAccessControlPolicy::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetBucketAccessControlPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, (53), 0, sizeof(_ns1__SetBucketAccessControlPolicy), 0, soap_copy__ns1__SetBucketAccessControlPolicy);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__SetBucketAccessControlPolicy::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (53));
 if (this->soap_out(soap, tag?tag:"ns1:SetBucketAccessControlPolicy", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetBucketAccessControlPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetBucketAccessControlPolicy(soap, this, tag, type);
}

 _ns1__SetBucketAccessControlPolicy * soap_get__ns1__SetBucketAccessControlPolicy(struct soap *soap, _ns1__SetBucketAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetBucketAccessControlPolicy * soap_instantiate__ns1__SetBucketAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (53), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetBucketAccessControlPolicy);
  if (size)
   *size = sizeof(_ns1__SetBucketAccessControlPolicy);
  ((_ns1__SetBucketAccessControlPolicy*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetBucketAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetBucketAccessControlPolicy);
  for (int i = 0; i < n; i++)
   ((_ns1__SetBucketAccessControlPolicy*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetBucketAccessControlPolicy*)cp->ptr;
}

 void soap_copy__ns1__SetBucketAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetBucketAccessControlPolicy*)p = *(_ns1__SetBucketAccessControlPolicy*)q;
}

void _ns1__SetObjectAccessControlPolicyResponse::soap_default(struct soap *soap)
{
 this->soap = soap;

}

void _ns1__SetObjectAccessControlPolicyResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int _ns1__SetObjectAccessControlPolicyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetObjectAccessControlPolicyResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, const _ns1__SetObjectAccessControlPolicyResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (52)), type))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetObjectAccessControlPolicyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetObjectAccessControlPolicyResponse(soap, tag, this, type);
}

 _ns1__SetObjectAccessControlPolicyResponse * soap_in__ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__SetObjectAccessControlPolicyResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetObjectAccessControlPolicyResponse *)soap_class_id_enter(soap, soap->id, a, (52), sizeof(_ns1__SetObjectAccessControlPolicyResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (52))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetObjectAccessControlPolicyResponse *)a->soap_in(soap, tag, type);
  }
 }
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetObjectAccessControlPolicyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (52), 0, sizeof(_ns1__SetObjectAccessControlPolicyResponse), 0, soap_copy__ns1__SetObjectAccessControlPolicyResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int _ns1__SetObjectAccessControlPolicyResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (52));
 if (this->soap_out(soap, tag?tag:"ns1:SetObjectAccessControlPolicyResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetObjectAccessControlPolicyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetObjectAccessControlPolicyResponse(soap, this, tag, type);
}

 _ns1__SetObjectAccessControlPolicyResponse * soap_get__ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__SetObjectAccessControlPolicyResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetObjectAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetObjectAccessControlPolicyResponse * soap_instantiate__ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (52), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetObjectAccessControlPolicyResponse);
  if (size)
   *size = sizeof(_ns1__SetObjectAccessControlPolicyResponse);
  ((_ns1__SetObjectAccessControlPolicyResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetObjectAccessControlPolicyResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetObjectAccessControlPolicyResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__SetObjectAccessControlPolicyResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetObjectAccessControlPolicyResponse*)cp->ptr;
}

 void soap_copy__ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetObjectAccessControlPolicyResponse*)p = *(_ns1__SetObjectAccessControlPolicyResponse*)q;
}

void _ns1__SetObjectAccessControlPolicy::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Bucket);
 soap_default_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Key);
 this->_ns1__SetObjectAccessControlPolicy::AccessControlList = __null;
 soap_default_string(soap, &this->_ns1__SetObjectAccessControlPolicy::AWSAccessKeyId);
 this->_ns1__SetObjectAccessControlPolicy::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Signature);
 soap_default_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Credential);

}

void _ns1__SetObjectAccessControlPolicy::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Bucket);
 soap_serialize_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Key);
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__SetObjectAccessControlPolicy::AccessControlList);
 soap_serialize_string(soap, &this->_ns1__SetObjectAccessControlPolicy::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__SetObjectAccessControlPolicy::Timestamp);
 soap_serialize_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Signature);
 soap_serialize_string(soap, &this->_ns1__SetObjectAccessControlPolicy::Credential);

}

int _ns1__SetObjectAccessControlPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetObjectAccessControlPolicy(soap, tag, id, this, type);
}

 int soap_out__ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, const _ns1__SetObjectAccessControlPolicy *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (51)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__SetObjectAccessControlPolicy::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__SetObjectAccessControlPolicy::Key), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__SetObjectAccessControlPolicy::AccessControlList), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__SetObjectAccessControlPolicy::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__SetObjectAccessControlPolicy::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__SetObjectAccessControlPolicy::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__SetObjectAccessControlPolicy::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetObjectAccessControlPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetObjectAccessControlPolicy(soap, tag, this, type);
}

 _ns1__SetObjectAccessControlPolicy * soap_in__ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, _ns1__SetObjectAccessControlPolicy *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetObjectAccessControlPolicy *)soap_class_id_enter(soap, soap->id, a, (51), sizeof(_ns1__SetObjectAccessControlPolicy), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (51))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetObjectAccessControlPolicy *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__SetObjectAccessControlPolicy::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__SetObjectAccessControlPolicy::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__SetObjectAccessControlPolicy::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__SetObjectAccessControlPolicy::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__SetObjectAccessControlPolicy::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__SetObjectAccessControlPolicy::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__SetObjectAccessControlPolicy::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetObjectAccessControlPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, (51), 0, sizeof(_ns1__SetObjectAccessControlPolicy), 0, soap_copy__ns1__SetObjectAccessControlPolicy);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0 || soap_flag_AccessControlList1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__SetObjectAccessControlPolicy::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (51));
 if (this->soap_out(soap, tag?tag:"ns1:SetObjectAccessControlPolicy", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetObjectAccessControlPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetObjectAccessControlPolicy(soap, this, tag, type);
}

 _ns1__SetObjectAccessControlPolicy * soap_get__ns1__SetObjectAccessControlPolicy(struct soap *soap, _ns1__SetObjectAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetObjectAccessControlPolicy * soap_instantiate__ns1__SetObjectAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (51), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetObjectAccessControlPolicy);
  if (size)
   *size = sizeof(_ns1__SetObjectAccessControlPolicy);
  ((_ns1__SetObjectAccessControlPolicy*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetObjectAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetObjectAccessControlPolicy);
  for (int i = 0; i < n; i++)
   ((_ns1__SetObjectAccessControlPolicy*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetObjectAccessControlPolicy*)cp->ptr;
}

 void soap_copy__ns1__SetObjectAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetObjectAccessControlPolicy*)p = *(_ns1__SetObjectAccessControlPolicy*)q;
}

void _ns1__GetBucketAccessControlPolicyResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__GetBucketAccessControlPolicyResponse::GetBucketAccessControlPolicyResponse = __null;

}

void _ns1__GetBucketAccessControlPolicyResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__AccessControlPolicy(soap, &this->_ns1__GetBucketAccessControlPolicyResponse::GetBucketAccessControlPolicyResponse);

}

int _ns1__GetBucketAccessControlPolicyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetBucketAccessControlPolicyResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, const _ns1__GetBucketAccessControlPolicyResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (50)), type))
  return soap->error;
 if (a->GetBucketAccessControlPolicyResponse)
  soap_element_result(soap, "ns1:GetBucketAccessControlPolicyResponse");
 if (soap_out_PointerTons1__AccessControlPolicy(soap, "ns1:GetBucketAccessControlPolicyResponse", -1, &(a->_ns1__GetBucketAccessControlPolicyResponse::GetBucketAccessControlPolicyResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetBucketAccessControlPolicyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetBucketAccessControlPolicyResponse(soap, tag, this, type);
}

 _ns1__GetBucketAccessControlPolicyResponse * soap_in__ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__GetBucketAccessControlPolicyResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetBucketAccessControlPolicyResponse *)soap_class_id_enter(soap, soap->id, a, (50), sizeof(_ns1__GetBucketAccessControlPolicyResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (50))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetBucketAccessControlPolicyResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_GetBucketAccessControlPolicyResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_GetBucketAccessControlPolicyResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlPolicy(soap, "ns1:GetBucketAccessControlPolicyResponse", &(a->_ns1__GetBucketAccessControlPolicyResponse::GetBucketAccessControlPolicyResponse), "ns1:AccessControlPolicy"))
    { soap_flag_GetBucketAccessControlPolicyResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:GetBucketAccessControlPolicyResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetBucketAccessControlPolicyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (50), 0, sizeof(_ns1__GetBucketAccessControlPolicyResponse), 0, soap_copy__ns1__GetBucketAccessControlPolicyResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_GetBucketAccessControlPolicyResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetBucketAccessControlPolicyResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (50));
 if (this->soap_out(soap, tag?tag:"ns1:GetBucketAccessControlPolicyResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetBucketAccessControlPolicyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetBucketAccessControlPolicyResponse(soap, this, tag, type);
}

 _ns1__GetBucketAccessControlPolicyResponse * soap_get__ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__GetBucketAccessControlPolicyResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetBucketAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetBucketAccessControlPolicyResponse * soap_instantiate__ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (50), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetBucketAccessControlPolicyResponse);
  if (size)
   *size = sizeof(_ns1__GetBucketAccessControlPolicyResponse);
  ((_ns1__GetBucketAccessControlPolicyResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetBucketAccessControlPolicyResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetBucketAccessControlPolicyResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__GetBucketAccessControlPolicyResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetBucketAccessControlPolicyResponse*)cp->ptr;
}

 void soap_copy__ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetBucketAccessControlPolicyResponse*)p = *(_ns1__GetBucketAccessControlPolicyResponse*)q;
}

void _ns1__GetBucketAccessControlPolicy::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Bucket);
 soap_default_string(soap, &this->_ns1__GetBucketAccessControlPolicy::AWSAccessKeyId);
 this->_ns1__GetBucketAccessControlPolicy::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Signature);
 soap_default_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Credential);

}

void _ns1__GetBucketAccessControlPolicy::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Bucket);
 soap_serialize_string(soap, &this->_ns1__GetBucketAccessControlPolicy::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetBucketAccessControlPolicy::Timestamp);
 soap_serialize_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Signature);
 soap_serialize_string(soap, &this->_ns1__GetBucketAccessControlPolicy::Credential);

}

int _ns1__GetBucketAccessControlPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetBucketAccessControlPolicy(soap, tag, id, this, type);
}

 int soap_out__ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, const _ns1__GetBucketAccessControlPolicy *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (49)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__GetBucketAccessControlPolicy::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__GetBucketAccessControlPolicy::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__GetBucketAccessControlPolicy::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__GetBucketAccessControlPolicy::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__GetBucketAccessControlPolicy::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetBucketAccessControlPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetBucketAccessControlPolicy(soap, tag, this, type);
}

 _ns1__GetBucketAccessControlPolicy * soap_in__ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, _ns1__GetBucketAccessControlPolicy *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetBucketAccessControlPolicy *)soap_class_id_enter(soap, soap->id, a, (49), sizeof(_ns1__GetBucketAccessControlPolicy), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (49))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetBucketAccessControlPolicy *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__GetBucketAccessControlPolicy::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__GetBucketAccessControlPolicy::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__GetBucketAccessControlPolicy::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__GetBucketAccessControlPolicy::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__GetBucketAccessControlPolicy::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetBucketAccessControlPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, (49), 0, sizeof(_ns1__GetBucketAccessControlPolicy), 0, soap_copy__ns1__GetBucketAccessControlPolicy);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetBucketAccessControlPolicy::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (49));
 if (this->soap_out(soap, tag?tag:"ns1:GetBucketAccessControlPolicy", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetBucketAccessControlPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetBucketAccessControlPolicy(soap, this, tag, type);
}

 _ns1__GetBucketAccessControlPolicy * soap_get__ns1__GetBucketAccessControlPolicy(struct soap *soap, _ns1__GetBucketAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetBucketAccessControlPolicy * soap_instantiate__ns1__GetBucketAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (49), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetBucketAccessControlPolicy);
  if (size)
   *size = sizeof(_ns1__GetBucketAccessControlPolicy);
  ((_ns1__GetBucketAccessControlPolicy*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetBucketAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetBucketAccessControlPolicy);
  for (int i = 0; i < n; i++)
   ((_ns1__GetBucketAccessControlPolicy*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetBucketAccessControlPolicy*)cp->ptr;
}

 void soap_copy__ns1__GetBucketAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetBucketAccessControlPolicy*)p = *(_ns1__GetBucketAccessControlPolicy*)q;
}

void _ns1__GetObjectAccessControlPolicyResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__GetObjectAccessControlPolicyResponse::GetObjectAccessControlPolicyResponse = __null;

}

void _ns1__GetObjectAccessControlPolicyResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__AccessControlPolicy(soap, &this->_ns1__GetObjectAccessControlPolicyResponse::GetObjectAccessControlPolicyResponse);

}

int _ns1__GetObjectAccessControlPolicyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObjectAccessControlPolicyResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, const _ns1__GetObjectAccessControlPolicyResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (48)), type))
  return soap->error;
 if (a->GetObjectAccessControlPolicyResponse)
  soap_element_result(soap, "ns1:GetObjectAccessControlPolicyResponse");
 if (soap_out_PointerTons1__AccessControlPolicy(soap, "ns1:GetObjectAccessControlPolicyResponse", -1, &(a->_ns1__GetObjectAccessControlPolicyResponse::GetObjectAccessControlPolicyResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectAccessControlPolicyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObjectAccessControlPolicyResponse(soap, tag, this, type);
}

 _ns1__GetObjectAccessControlPolicyResponse * soap_in__ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__GetObjectAccessControlPolicyResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObjectAccessControlPolicyResponse *)soap_class_id_enter(soap, soap->id, a, (48), sizeof(_ns1__GetObjectAccessControlPolicyResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (48))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObjectAccessControlPolicyResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_GetObjectAccessControlPolicyResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_GetObjectAccessControlPolicyResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlPolicy(soap, "ns1:GetObjectAccessControlPolicyResponse", &(a->_ns1__GetObjectAccessControlPolicyResponse::GetObjectAccessControlPolicyResponse), "ns1:AccessControlPolicy"))
    { soap_flag_GetObjectAccessControlPolicyResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:GetObjectAccessControlPolicyResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObjectAccessControlPolicyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (48), 0, sizeof(_ns1__GetObjectAccessControlPolicyResponse), 0, soap_copy__ns1__GetObjectAccessControlPolicyResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_GetObjectAccessControlPolicyResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObjectAccessControlPolicyResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (48));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectAccessControlPolicyResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObjectAccessControlPolicyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObjectAccessControlPolicyResponse(soap, this, tag, type);
}

 _ns1__GetObjectAccessControlPolicyResponse * soap_get__ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__GetObjectAccessControlPolicyResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObjectAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObjectAccessControlPolicyResponse * soap_instantiate__ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (48), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObjectAccessControlPolicyResponse);
  if (size)
   *size = sizeof(_ns1__GetObjectAccessControlPolicyResponse);
  ((_ns1__GetObjectAccessControlPolicyResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObjectAccessControlPolicyResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObjectAccessControlPolicyResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObjectAccessControlPolicyResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObjectAccessControlPolicyResponse*)cp->ptr;
}

 void soap_copy__ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObjectAccessControlPolicyResponse*)p = *(_ns1__GetObjectAccessControlPolicyResponse*)q;
}

void _ns1__GetObjectAccessControlPolicy::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Bucket);
 soap_default_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Key);
 soap_default_string(soap, &this->_ns1__GetObjectAccessControlPolicy::AWSAccessKeyId);
 this->_ns1__GetObjectAccessControlPolicy::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Signature);
 soap_default_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Credential);

}

void _ns1__GetObjectAccessControlPolicy::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Bucket);
 soap_serialize_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Key);
 soap_serialize_string(soap, &this->_ns1__GetObjectAccessControlPolicy::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetObjectAccessControlPolicy::Timestamp);
 soap_serialize_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Signature);
 soap_serialize_string(soap, &this->_ns1__GetObjectAccessControlPolicy::Credential);

}

int _ns1__GetObjectAccessControlPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetObjectAccessControlPolicy(soap, tag, id, this, type);
}

 int soap_out__ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, const _ns1__GetObjectAccessControlPolicy *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (47)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__GetObjectAccessControlPolicy::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->_ns1__GetObjectAccessControlPolicy::Key), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__GetObjectAccessControlPolicy::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__GetObjectAccessControlPolicy::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__GetObjectAccessControlPolicy::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__GetObjectAccessControlPolicy::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetObjectAccessControlPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetObjectAccessControlPolicy(soap, tag, this, type);
}

 _ns1__GetObjectAccessControlPolicy * soap_in__ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, _ns1__GetObjectAccessControlPolicy *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetObjectAccessControlPolicy *)soap_class_id_enter(soap, soap->id, a, (47), sizeof(_ns1__GetObjectAccessControlPolicy), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (47))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetObjectAccessControlPolicy *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__GetObjectAccessControlPolicy::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->_ns1__GetObjectAccessControlPolicy::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__GetObjectAccessControlPolicy::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__GetObjectAccessControlPolicy::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__GetObjectAccessControlPolicy::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__GetObjectAccessControlPolicy::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetObjectAccessControlPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, (47), 0, sizeof(_ns1__GetObjectAccessControlPolicy), 0, soap_copy__ns1__GetObjectAccessControlPolicy);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_Key1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetObjectAccessControlPolicy::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (47));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectAccessControlPolicy", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetObjectAccessControlPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetObjectAccessControlPolicy(soap, this, tag, type);
}

 _ns1__GetObjectAccessControlPolicy * soap_get__ns1__GetObjectAccessControlPolicy(struct soap *soap, _ns1__GetObjectAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetObjectAccessControlPolicy * soap_instantiate__ns1__GetObjectAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (47), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetObjectAccessControlPolicy);
  if (size)
   *size = sizeof(_ns1__GetObjectAccessControlPolicy);
  ((_ns1__GetObjectAccessControlPolicy*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetObjectAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetObjectAccessControlPolicy);
  for (int i = 0; i < n; i++)
   ((_ns1__GetObjectAccessControlPolicy*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetObjectAccessControlPolicy*)cp->ptr;
}

 void soap_copy__ns1__GetObjectAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetObjectAccessControlPolicy*)p = *(_ns1__GetObjectAccessControlPolicy*)q;
}

void _ns1__SetBucketLoggingStatusResponse::soap_default(struct soap *soap)
{
 this->soap = soap;

}

void _ns1__SetBucketLoggingStatusResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int _ns1__SetBucketLoggingStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetBucketLoggingStatusResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__SetBucketLoggingStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__SetBucketLoggingStatusResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (46)), type))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetBucketLoggingStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetBucketLoggingStatusResponse(soap, tag, this, type);
}

 _ns1__SetBucketLoggingStatusResponse * soap_in__ns1__SetBucketLoggingStatusResponse(struct soap *soap, const char *tag, _ns1__SetBucketLoggingStatusResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetBucketLoggingStatusResponse *)soap_class_id_enter(soap, soap->id, a, (46), sizeof(_ns1__SetBucketLoggingStatusResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (46))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetBucketLoggingStatusResponse *)a->soap_in(soap, tag, type);
  }
 }
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetBucketLoggingStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (46), 0, sizeof(_ns1__SetBucketLoggingStatusResponse), 0, soap_copy__ns1__SetBucketLoggingStatusResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int _ns1__SetBucketLoggingStatusResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (46));
 if (this->soap_out(soap, tag?tag:"ns1:SetBucketLoggingStatusResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetBucketLoggingStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetBucketLoggingStatusResponse(soap, this, tag, type);
}

 _ns1__SetBucketLoggingStatusResponse * soap_get__ns1__SetBucketLoggingStatusResponse(struct soap *soap, _ns1__SetBucketLoggingStatusResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetBucketLoggingStatusResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetBucketLoggingStatusResponse * soap_instantiate__ns1__SetBucketLoggingStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (46), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetBucketLoggingStatusResponse);
  if (size)
   *size = sizeof(_ns1__SetBucketLoggingStatusResponse);
  ((_ns1__SetBucketLoggingStatusResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetBucketLoggingStatusResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetBucketLoggingStatusResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__SetBucketLoggingStatusResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetBucketLoggingStatusResponse*)cp->ptr;
}

 void soap_copy__ns1__SetBucketLoggingStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetBucketLoggingStatusResponse*)p = *(_ns1__SetBucketLoggingStatusResponse*)q;
}

void _ns1__SetBucketLoggingStatus::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__SetBucketLoggingStatus::Bucket);
 soap_default_string(soap, &this->_ns1__SetBucketLoggingStatus::AWSAccessKeyId);
 this->_ns1__SetBucketLoggingStatus::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__SetBucketLoggingStatus::Signature);
 soap_default_string(soap, &this->_ns1__SetBucketLoggingStatus::Credential);
 this->_ns1__SetBucketLoggingStatus::BucketLoggingStatus = __null;

}

void _ns1__SetBucketLoggingStatus::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__SetBucketLoggingStatus::Bucket);
 soap_serialize_string(soap, &this->_ns1__SetBucketLoggingStatus::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__SetBucketLoggingStatus::Timestamp);
 soap_serialize_string(soap, &this->_ns1__SetBucketLoggingStatus::Signature);
 soap_serialize_string(soap, &this->_ns1__SetBucketLoggingStatus::Credential);
 soap_serialize_PointerTons1__BucketLoggingStatus(soap, &this->_ns1__SetBucketLoggingStatus::BucketLoggingStatus);

}

int _ns1__SetBucketLoggingStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__SetBucketLoggingStatus(soap, tag, id, this, type);
}

 int soap_out__ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, int id, const _ns1__SetBucketLoggingStatus *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (45)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__SetBucketLoggingStatus::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__SetBucketLoggingStatus::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__SetBucketLoggingStatus::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__SetBucketLoggingStatus::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__SetBucketLoggingStatus::Credential), ""))
  return soap->error;
 if (soap_out_PointerTons1__BucketLoggingStatus(soap, "ns1:BucketLoggingStatus", -1, &(a->_ns1__SetBucketLoggingStatus::BucketLoggingStatus), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__SetBucketLoggingStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__SetBucketLoggingStatus(soap, tag, this, type);
}

 _ns1__SetBucketLoggingStatus * soap_in__ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, _ns1__SetBucketLoggingStatus *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__SetBucketLoggingStatus *)soap_class_id_enter(soap, soap->id, a, (45), sizeof(_ns1__SetBucketLoggingStatus), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (45))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__SetBucketLoggingStatus *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 size_t soap_flag_BucketLoggingStatus1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__SetBucketLoggingStatus::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__SetBucketLoggingStatus::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__SetBucketLoggingStatus::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__SetBucketLoggingStatus::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__SetBucketLoggingStatus::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }
   if (soap_flag_BucketLoggingStatus1 && soap->error == 3)
    if (soap_in_PointerTons1__BucketLoggingStatus(soap, "ns1:BucketLoggingStatus", &(a->_ns1__SetBucketLoggingStatus::BucketLoggingStatus), "ns1:BucketLoggingStatus"))
    { soap_flag_BucketLoggingStatus1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__SetBucketLoggingStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, (45), 0, sizeof(_ns1__SetBucketLoggingStatus), 0, soap_copy__ns1__SetBucketLoggingStatus);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0 || soap_flag_BucketLoggingStatus1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__SetBucketLoggingStatus::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (45));
 if (this->soap_out(soap, tag?tag:"ns1:SetBucketLoggingStatus", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__SetBucketLoggingStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__SetBucketLoggingStatus(soap, this, tag, type);
}

 _ns1__SetBucketLoggingStatus * soap_get__ns1__SetBucketLoggingStatus(struct soap *soap, _ns1__SetBucketLoggingStatus *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__SetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__SetBucketLoggingStatus * soap_instantiate__ns1__SetBucketLoggingStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (45), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__SetBucketLoggingStatus);
  if (size)
   *size = sizeof(_ns1__SetBucketLoggingStatus);
  ((_ns1__SetBucketLoggingStatus*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__SetBucketLoggingStatus[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__SetBucketLoggingStatus);
  for (int i = 0; i < n; i++)
   ((_ns1__SetBucketLoggingStatus*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__SetBucketLoggingStatus*)cp->ptr;
}

 void soap_copy__ns1__SetBucketLoggingStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__SetBucketLoggingStatus*)p = *(_ns1__SetBucketLoggingStatus*)q;
}

void _ns1__GetBucketLoggingStatusResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__GetBucketLoggingStatusResponse::GetBucketLoggingStatusResponse = __null;

}

void _ns1__GetBucketLoggingStatusResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__BucketLoggingStatus(soap, &this->_ns1__GetBucketLoggingStatusResponse::GetBucketLoggingStatusResponse);

}

int _ns1__GetBucketLoggingStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetBucketLoggingStatusResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__GetBucketLoggingStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__GetBucketLoggingStatusResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (44)), type))
  return soap->error;
 if (a->GetBucketLoggingStatusResponse)
  soap_element_result(soap, "ns1:GetBucketLoggingStatusResponse");
 if (soap_out_PointerTons1__BucketLoggingStatus(soap, "ns1:GetBucketLoggingStatusResponse", -1, &(a->_ns1__GetBucketLoggingStatusResponse::GetBucketLoggingStatusResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetBucketLoggingStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetBucketLoggingStatusResponse(soap, tag, this, type);
}

 _ns1__GetBucketLoggingStatusResponse * soap_in__ns1__GetBucketLoggingStatusResponse(struct soap *soap, const char *tag, _ns1__GetBucketLoggingStatusResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetBucketLoggingStatusResponse *)soap_class_id_enter(soap, soap->id, a, (44), sizeof(_ns1__GetBucketLoggingStatusResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (44))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetBucketLoggingStatusResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_GetBucketLoggingStatusResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_GetBucketLoggingStatusResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__BucketLoggingStatus(soap, "ns1:GetBucketLoggingStatusResponse", &(a->_ns1__GetBucketLoggingStatusResponse::GetBucketLoggingStatusResponse), "ns1:BucketLoggingStatus"))
    { soap_flag_GetBucketLoggingStatusResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:GetBucketLoggingStatusResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetBucketLoggingStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (44), 0, sizeof(_ns1__GetBucketLoggingStatusResponse), 0, soap_copy__ns1__GetBucketLoggingStatusResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_GetBucketLoggingStatusResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetBucketLoggingStatusResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (44));
 if (this->soap_out(soap, tag?tag:"ns1:GetBucketLoggingStatusResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetBucketLoggingStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetBucketLoggingStatusResponse(soap, this, tag, type);
}

 _ns1__GetBucketLoggingStatusResponse * soap_get__ns1__GetBucketLoggingStatusResponse(struct soap *soap, _ns1__GetBucketLoggingStatusResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetBucketLoggingStatusResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetBucketLoggingStatusResponse * soap_instantiate__ns1__GetBucketLoggingStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (44), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetBucketLoggingStatusResponse);
  if (size)
   *size = sizeof(_ns1__GetBucketLoggingStatusResponse);
  ((_ns1__GetBucketLoggingStatusResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetBucketLoggingStatusResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetBucketLoggingStatusResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__GetBucketLoggingStatusResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetBucketLoggingStatusResponse*)cp->ptr;
}

 void soap_copy__ns1__GetBucketLoggingStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetBucketLoggingStatusResponse*)p = *(_ns1__GetBucketLoggingStatusResponse*)q;
}

void _ns1__GetBucketLoggingStatus::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__GetBucketLoggingStatus::Bucket);
 soap_default_string(soap, &this->_ns1__GetBucketLoggingStatus::AWSAccessKeyId);
 this->_ns1__GetBucketLoggingStatus::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__GetBucketLoggingStatus::Signature);
 soap_default_string(soap, &this->_ns1__GetBucketLoggingStatus::Credential);

}

void _ns1__GetBucketLoggingStatus::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__GetBucketLoggingStatus::Bucket);
 soap_serialize_string(soap, &this->_ns1__GetBucketLoggingStatus::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__GetBucketLoggingStatus::Timestamp);
 soap_serialize_string(soap, &this->_ns1__GetBucketLoggingStatus::Signature);
 soap_serialize_string(soap, &this->_ns1__GetBucketLoggingStatus::Credential);

}

int _ns1__GetBucketLoggingStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__GetBucketLoggingStatus(soap, tag, id, this, type);
}

 int soap_out__ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, int id, const _ns1__GetBucketLoggingStatus *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (43)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__GetBucketLoggingStatus::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__GetBucketLoggingStatus::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__GetBucketLoggingStatus::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__GetBucketLoggingStatus::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__GetBucketLoggingStatus::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__GetBucketLoggingStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__GetBucketLoggingStatus(soap, tag, this, type);
}

 _ns1__GetBucketLoggingStatus * soap_in__ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, _ns1__GetBucketLoggingStatus *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__GetBucketLoggingStatus *)soap_class_id_enter(soap, soap->id, a, (43), sizeof(_ns1__GetBucketLoggingStatus), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (43))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__GetBucketLoggingStatus *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__GetBucketLoggingStatus::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__GetBucketLoggingStatus::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__GetBucketLoggingStatus::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__GetBucketLoggingStatus::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__GetBucketLoggingStatus::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__GetBucketLoggingStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, (43), 0, sizeof(_ns1__GetBucketLoggingStatus), 0, soap_copy__ns1__GetBucketLoggingStatus);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__GetBucketLoggingStatus::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (43));
 if (this->soap_out(soap, tag?tag:"ns1:GetBucketLoggingStatus", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__GetBucketLoggingStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__GetBucketLoggingStatus(soap, this, tag, type);
}

 _ns1__GetBucketLoggingStatus * soap_get__ns1__GetBucketLoggingStatus(struct soap *soap, _ns1__GetBucketLoggingStatus *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__GetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__GetBucketLoggingStatus * soap_instantiate__ns1__GetBucketLoggingStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (43), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__GetBucketLoggingStatus);
  if (size)
   *size = sizeof(_ns1__GetBucketLoggingStatus);
  ((_ns1__GetBucketLoggingStatus*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__GetBucketLoggingStatus[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__GetBucketLoggingStatus);
  for (int i = 0; i < n; i++)
   ((_ns1__GetBucketLoggingStatus*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__GetBucketLoggingStatus*)cp->ptr;
}

 void soap_copy__ns1__GetBucketLoggingStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__GetBucketLoggingStatus*)p = *(_ns1__GetBucketLoggingStatus*)q;
}

void _ns1__DeleteBucketResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__DeleteBucketResponse::DeleteBucketResponse = __null;

}

void _ns1__DeleteBucketResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__Status(soap, &this->_ns1__DeleteBucketResponse::DeleteBucketResponse);

}

int _ns1__DeleteBucketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__DeleteBucketResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__DeleteBucketResponse(struct soap *soap, const char *tag, int id, const _ns1__DeleteBucketResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (42)), type))
  return soap->error;
 if (a->DeleteBucketResponse)
  soap_element_result(soap, "ns1:DeleteBucketResponse");
 if (soap_out_PointerTons1__Status(soap, "ns1:DeleteBucketResponse", -1, &(a->_ns1__DeleteBucketResponse::DeleteBucketResponse), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteBucketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__DeleteBucketResponse(soap, tag, this, type);
}

 _ns1__DeleteBucketResponse * soap_in__ns1__DeleteBucketResponse(struct soap *soap, const char *tag, _ns1__DeleteBucketResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__DeleteBucketResponse *)soap_class_id_enter(soap, soap->id, a, (42), sizeof(_ns1__DeleteBucketResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (42))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__DeleteBucketResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_DeleteBucketResponse1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_DeleteBucketResponse1 && soap->error == 3)
    if (soap_in_PointerTons1__Status(soap, "ns1:DeleteBucketResponse", &(a->_ns1__DeleteBucketResponse::DeleteBucketResponse), "ns1:Status"))
    { soap_flag_DeleteBucketResponse1--;
     continue;
    }

   soap_check_result(soap, "ns1:DeleteBucketResponse");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__DeleteBucketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (42), 0, sizeof(_ns1__DeleteBucketResponse), 0, soap_copy__ns1__DeleteBucketResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_DeleteBucketResponse1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__DeleteBucketResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (42));
 if (this->soap_out(soap, tag?tag:"ns1:DeleteBucketResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__DeleteBucketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__DeleteBucketResponse(soap, this, tag, type);
}

 _ns1__DeleteBucketResponse * soap_get__ns1__DeleteBucketResponse(struct soap *soap, _ns1__DeleteBucketResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__DeleteBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__DeleteBucketResponse * soap_instantiate__ns1__DeleteBucketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (42), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__DeleteBucketResponse);
  if (size)
   *size = sizeof(_ns1__DeleteBucketResponse);
  ((_ns1__DeleteBucketResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__DeleteBucketResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__DeleteBucketResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__DeleteBucketResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__DeleteBucketResponse*)cp->ptr;
}

 void soap_copy__ns1__DeleteBucketResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__DeleteBucketResponse*)p = *(_ns1__DeleteBucketResponse*)q;
}

void _ns1__DeleteBucket::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__DeleteBucket::Bucket);
 soap_default_string(soap, &this->_ns1__DeleteBucket::AWSAccessKeyId);
 this->_ns1__DeleteBucket::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__DeleteBucket::Signature);
 soap_default_string(soap, &this->_ns1__DeleteBucket::Credential);

}

void _ns1__DeleteBucket::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__DeleteBucket::Bucket);
 soap_serialize_string(soap, &this->_ns1__DeleteBucket::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__DeleteBucket::Timestamp);
 soap_serialize_string(soap, &this->_ns1__DeleteBucket::Signature);
 soap_serialize_string(soap, &this->_ns1__DeleteBucket::Credential);

}

int _ns1__DeleteBucket::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__DeleteBucket(soap, tag, id, this, type);
}

 int soap_out__ns1__DeleteBucket(struct soap *soap, const char *tag, int id, const _ns1__DeleteBucket *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (41)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__DeleteBucket::Bucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__DeleteBucket::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__DeleteBucket::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__DeleteBucket::Signature), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Credential", -1, &(a->_ns1__DeleteBucket::Credential), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__DeleteBucket::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__DeleteBucket(soap, tag, this, type);
}

 _ns1__DeleteBucket * soap_in__ns1__DeleteBucket(struct soap *soap, const char *tag, _ns1__DeleteBucket *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__DeleteBucket *)soap_class_id_enter(soap, soap->id, a, (41), sizeof(_ns1__DeleteBucket), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (41))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__DeleteBucket *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 size_t soap_flag_Credential1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__DeleteBucket::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__DeleteBucket::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__DeleteBucket::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__DeleteBucket::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }
   if (soap_flag_Credential1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Credential", &(a->_ns1__DeleteBucket::Credential), "xsd:string"))
    { soap_flag_Credential1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__DeleteBucket *)soap_id_forward(soap, soap->href, (void*)a, 0, (41), 0, sizeof(_ns1__DeleteBucket), 0, soap_copy__ns1__DeleteBucket);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__DeleteBucket::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (41));
 if (this->soap_out(soap, tag?tag:"ns1:DeleteBucket", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__DeleteBucket::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__DeleteBucket(soap, this, tag, type);
}

 _ns1__DeleteBucket * soap_get__ns1__DeleteBucket(struct soap *soap, _ns1__DeleteBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__DeleteBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__DeleteBucket * soap_instantiate__ns1__DeleteBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (41), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__DeleteBucket);
  if (size)
   *size = sizeof(_ns1__DeleteBucket);
  ((_ns1__DeleteBucket*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__DeleteBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__DeleteBucket);
  for (int i = 0; i < n; i++)
   ((_ns1__DeleteBucket*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__DeleteBucket*)cp->ptr;
}

 void soap_copy__ns1__DeleteBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__DeleteBucket*)p = *(_ns1__DeleteBucket*)q;
}

void _ns1__CreateBucketResponse::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->_ns1__CreateBucketResponse::CreateBucketReturn = __null;

}

void _ns1__CreateBucketResponse::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__CreateBucketResult(soap, &this->_ns1__CreateBucketResponse::CreateBucketReturn);

}

int _ns1__CreateBucketResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__CreateBucketResponse(soap, tag, id, this, type);
}

 int soap_out__ns1__CreateBucketResponse(struct soap *soap, const char *tag, int id, const _ns1__CreateBucketResponse *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (40)), type))
  return soap->error;
 if (a->CreateBucketReturn)
  soap_element_result(soap, "ns1:CreateBucketReturn");
 if (soap_out_PointerTons1__CreateBucketResult(soap, "ns1:CreateBucketReturn", -1, &(a->_ns1__CreateBucketResponse::CreateBucketReturn), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__CreateBucketResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__CreateBucketResponse(soap, tag, this, type);
}

 _ns1__CreateBucketResponse * soap_in__ns1__CreateBucketResponse(struct soap *soap, const char *tag, _ns1__CreateBucketResponse *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__CreateBucketResponse *)soap_class_id_enter(soap, soap->id, a, (40), sizeof(_ns1__CreateBucketResponse), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (40))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__CreateBucketResponse *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_CreateBucketReturn1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_CreateBucketReturn1 && soap->error == 3)
    if (soap_in_PointerTons1__CreateBucketResult(soap, "ns1:CreateBucketReturn", &(a->_ns1__CreateBucketResponse::CreateBucketReturn), "ns1:CreateBucketResult"))
    { soap_flag_CreateBucketReturn1--;
     continue;
    }

   soap_check_result(soap, "ns1:CreateBucketReturn");
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__CreateBucketResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, (40), 0, sizeof(_ns1__CreateBucketResponse), 0, soap_copy__ns1__CreateBucketResponse);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_CreateBucketReturn1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__CreateBucketResponse::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (40));
 if (this->soap_out(soap, tag?tag:"ns1:CreateBucketResponse", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__CreateBucketResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__CreateBucketResponse(soap, this, tag, type);
}

 _ns1__CreateBucketResponse * soap_get__ns1__CreateBucketResponse(struct soap *soap, _ns1__CreateBucketResponse *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__CreateBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__CreateBucketResponse * soap_instantiate__ns1__CreateBucketResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (40), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__CreateBucketResponse);
  if (size)
   *size = sizeof(_ns1__CreateBucketResponse);
  ((_ns1__CreateBucketResponse*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__CreateBucketResponse[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__CreateBucketResponse);
  for (int i = 0; i < n; i++)
   ((_ns1__CreateBucketResponse*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__CreateBucketResponse*)cp->ptr;
}

 void soap_copy__ns1__CreateBucketResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__CreateBucketResponse*)p = *(_ns1__CreateBucketResponse*)q;
}

void _ns1__CreateBucket::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->_ns1__CreateBucket::Bucket);
 this->_ns1__CreateBucket::AccessControlList = __null;
 soap_default_string(soap, &this->_ns1__CreateBucket::AWSAccessKeyId);
 this->_ns1__CreateBucket::Timestamp = __null;
 soap_default_string(soap, &this->_ns1__CreateBucket::Signature);

}

void _ns1__CreateBucket::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->_ns1__CreateBucket::Bucket);
 soap_serialize_PointerTons1__AccessControlList(soap, &this->_ns1__CreateBucket::AccessControlList);
 soap_serialize_string(soap, &this->_ns1__CreateBucket::AWSAccessKeyId);
 soap_serialize_PointerTotime(soap, &this->_ns1__CreateBucket::Timestamp);
 soap_serialize_string(soap, &this->_ns1__CreateBucket::Signature);

}

int _ns1__CreateBucket::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out__ns1__CreateBucket(soap, tag, id, this, type);
}

 int soap_out__ns1__CreateBucket(struct soap *soap, const char *tag, int id, const _ns1__CreateBucket *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (39)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Bucket", -1, &(a->_ns1__CreateBucket::Bucket), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->_ns1__CreateBucket::AccessControlList), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:AWSAccessKeyId", -1, &(a->_ns1__CreateBucket::AWSAccessKeyId), ""))
  return soap->error;
 if (soap_out_PointerTotime(soap, "ns1:Timestamp", -1, &(a->_ns1__CreateBucket::Timestamp), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Signature", -1, &(a->_ns1__CreateBucket::Signature), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *_ns1__CreateBucket::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in__ns1__CreateBucket(soap, tag, this, type);
}

 _ns1__CreateBucket * soap_in__ns1__CreateBucket(struct soap *soap, const char *tag, _ns1__CreateBucket *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (_ns1__CreateBucket *)soap_class_id_enter(soap, soap->id, a, (39), sizeof(_ns1__CreateBucket), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (39))
  { soap_revert(soap);
   *soap->id = '\0';
   return (_ns1__CreateBucket *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Bucket1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 size_t soap_flag_AWSAccessKeyId1 = 1;
 size_t soap_flag_Timestamp1 = 1;
 size_t soap_flag_Signature1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Bucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Bucket", &(a->_ns1__CreateBucket::Bucket), "xsd:string"))
    { soap_flag_Bucket1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->_ns1__CreateBucket::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }
   if (soap_flag_AWSAccessKeyId1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:AWSAccessKeyId", &(a->_ns1__CreateBucket::AWSAccessKeyId), "xsd:string"))
    { soap_flag_AWSAccessKeyId1--;
     continue;
    }
   if (soap_flag_Timestamp1 && soap->error == 3)
    if (soap_in_PointerTotime(soap, "ns1:Timestamp", &(a->_ns1__CreateBucket::Timestamp), "xsd:dateTime"))
    { soap_flag_Timestamp1--;
     continue;
    }
   if (soap_flag_Signature1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Signature", &(a->_ns1__CreateBucket::Signature), "xsd:string"))
    { soap_flag_Signature1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (_ns1__CreateBucket *)soap_id_forward(soap, soap->href, (void*)a, 0, (39), 0, sizeof(_ns1__CreateBucket), 0, soap_copy__ns1__CreateBucket);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Bucket1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int _ns1__CreateBucket::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (39));
 if (this->soap_out(soap, tag?tag:"ns1:CreateBucket", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *_ns1__CreateBucket::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get__ns1__CreateBucket(soap, this, tag, type);
}

 _ns1__CreateBucket * soap_get__ns1__CreateBucket(struct soap *soap, _ns1__CreateBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in__ns1__CreateBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 _ns1__CreateBucket * soap_instantiate__ns1__CreateBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (39), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (_ns1__CreateBucket);
  if (size)
   *size = sizeof(_ns1__CreateBucket);
  ((_ns1__CreateBucket*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (_ns1__CreateBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(_ns1__CreateBucket);
  for (int i = 0; i < n; i++)
   ((_ns1__CreateBucket*)cp->ptr)[i].soap = soap;
 }
  ;
 return (_ns1__CreateBucket*)cp->ptr;
}

 void soap_copy__ns1__CreateBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(_ns1__CreateBucket*)p = *(_ns1__CreateBucket*)q;
}

void ns1__RequestPaymentConfiguration::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_ns1__Payer(soap, &this->ns1__RequestPaymentConfiguration::Payer);

}

void ns1__RequestPaymentConfiguration::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int ns1__RequestPaymentConfiguration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__RequestPaymentConfiguration(soap, tag, id, this, type);
}

 int soap_out_ns1__RequestPaymentConfiguration(struct soap *soap, const char *tag, int id, const ns1__RequestPaymentConfiguration *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (38)), type))
  return soap->error;
 if (soap_out_ns1__Payer(soap, "ns1:Payer", -1, &(a->ns1__RequestPaymentConfiguration::Payer), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__RequestPaymentConfiguration::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__RequestPaymentConfiguration(soap, tag, this, type);
}

 ns1__RequestPaymentConfiguration * soap_in_ns1__RequestPaymentConfiguration(struct soap *soap, const char *tag, ns1__RequestPaymentConfiguration *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__RequestPaymentConfiguration *)soap_class_id_enter(soap, soap->id, a, (38), sizeof(ns1__RequestPaymentConfiguration), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (38))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__RequestPaymentConfiguration *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Payer1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Payer1 && soap->error == 3)
    if (soap_in_ns1__Payer(soap, "ns1:Payer", &(a->ns1__RequestPaymentConfiguration::Payer), "ns1:Payer"))
    { soap_flag_Payer1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__RequestPaymentConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, (38), 0, sizeof(ns1__RequestPaymentConfiguration), 0, soap_copy_ns1__RequestPaymentConfiguration);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Payer1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__RequestPaymentConfiguration::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (38));
 if (this->soap_out(soap, tag?tag:"ns1:RequestPaymentConfiguration", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__RequestPaymentConfiguration::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__RequestPaymentConfiguration(soap, this, tag, type);
}

 ns1__RequestPaymentConfiguration * soap_get_ns1__RequestPaymentConfiguration(struct soap *soap, ns1__RequestPaymentConfiguration *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__RequestPaymentConfiguration(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__RequestPaymentConfiguration * soap_instantiate_ns1__RequestPaymentConfiguration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (38), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__RequestPaymentConfiguration);
  if (size)
   *size = sizeof(ns1__RequestPaymentConfiguration);
  ((ns1__RequestPaymentConfiguration*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__RequestPaymentConfiguration[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__RequestPaymentConfiguration);
  for (int i = 0; i < n; i++)
   ((ns1__RequestPaymentConfiguration*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__RequestPaymentConfiguration*)cp->ptr;
}

 void soap_copy_ns1__RequestPaymentConfiguration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__RequestPaymentConfiguration*)p = *(ns1__RequestPaymentConfiguration*)q;
}

void ns1__CopyObjectResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_time(soap, &this->ns1__CopyObjectResult::LastModified);
 soap_default_string(soap, &this->ns1__CopyObjectResult::ETag);

}

void ns1__CopyObjectResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_embedded(soap, &this->ns1__CopyObjectResult::LastModified, (84));
 soap_serialize_string(soap, &this->ns1__CopyObjectResult::ETag);

}

int ns1__CopyObjectResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__CopyObjectResult(soap, tag, id, this, type);
}

 int soap_out_ns1__CopyObjectResult(struct soap *soap, const char *tag, int id, const ns1__CopyObjectResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (37)), type))
  return soap->error;
 if (soap_out_time(soap, "ns1:LastModified", -1, &(a->ns1__CopyObjectResult::LastModified), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:ETag", -1, &(a->ns1__CopyObjectResult::ETag), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__CopyObjectResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__CopyObjectResult(soap, tag, this, type);
}

 ns1__CopyObjectResult * soap_in_ns1__CopyObjectResult(struct soap *soap, const char *tag, ns1__CopyObjectResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__CopyObjectResult *)soap_class_id_enter(soap, soap->id, a, (37), sizeof(ns1__CopyObjectResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (37))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__CopyObjectResult *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_LastModified1 = 1;
 size_t soap_flag_ETag1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_LastModified1 && soap->error == 3)
    if (soap_in_time(soap, "ns1:LastModified", &(a->ns1__CopyObjectResult::LastModified), "xsd:dateTime"))
    { soap_flag_LastModified1--;
     continue;
    }
   if (soap_flag_ETag1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ETag", &(a->ns1__CopyObjectResult::ETag), "xsd:string"))
    { soap_flag_ETag1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__CopyObjectResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (37), 0, sizeof(ns1__CopyObjectResult), 0, soap_copy_ns1__CopyObjectResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_LastModified1 > 0 || soap_flag_ETag1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__CopyObjectResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (37));
 if (this->soap_out(soap, tag?tag:"ns1:CopyObjectResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__CopyObjectResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__CopyObjectResult(soap, this, tag, type);
}

 ns1__CopyObjectResult * soap_get_ns1__CopyObjectResult(struct soap *soap, ns1__CopyObjectResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__CopyObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__CopyObjectResult * soap_instantiate_ns1__CopyObjectResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (37), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__CopyObjectResult);
  if (size)
   *size = sizeof(ns1__CopyObjectResult);
  ((ns1__CopyObjectResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__CopyObjectResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__CopyObjectResult);
  for (int i = 0; i < n; i++)
   ((ns1__CopyObjectResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__CopyObjectResult*)cp->ptr;
}

 void soap_copy_ns1__CopyObjectResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__CopyObjectResult*)p = *(ns1__CopyObjectResult*)q;
}

void ns1__ListAllMyBucketsList::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__ListAllMyBucketsList::__sizeBucket = 0;
 this->ns1__ListAllMyBucketsList::Bucket = __null;

}

void ns1__ListAllMyBucketsList::soap_serialize(struct soap *soap) const
{
 (void)soap;
 if (this->ns1__ListAllMyBucketsList::Bucket)
 { int i;
  for (i = 0; i < this->ns1__ListAllMyBucketsList::__sizeBucket; i++)
  {
   soap_serialize_PointerTons1__ListAllMyBucketsEntry(soap, this->ns1__ListAllMyBucketsList::Bucket + i);
  }
 }

}

int ns1__ListAllMyBucketsList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__ListAllMyBucketsList(soap, tag, id, this, type);
}

 int soap_out_ns1__ListAllMyBucketsList(struct soap *soap, const char *tag, int id, const ns1__ListAllMyBucketsList *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (36)), type))
  return soap->error;
 if (a->ns1__ListAllMyBucketsList::Bucket)
 { int i;
  for (i = 0; i < a->ns1__ListAllMyBucketsList::__sizeBucket; i++)
   if (soap_out_PointerTons1__ListAllMyBucketsEntry(soap, "ns1:Bucket", -1, a->ns1__ListAllMyBucketsList::Bucket + i, ""))
    return soap->error;
 }

 return soap_element_end_out(soap, tag);
}

void *ns1__ListAllMyBucketsList::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__ListAllMyBucketsList(soap, tag, this, type);
}

 ns1__ListAllMyBucketsList * soap_in_ns1__ListAllMyBucketsList(struct soap *soap, const char *tag, ns1__ListAllMyBucketsList *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__ListAllMyBucketsList *)soap_class_id_enter(soap, soap->id, a, (36), sizeof(ns1__ListAllMyBucketsList), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (36))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__ListAllMyBucketsList *)a->soap_in(soap, tag, type);
  }
 }
 struct soap_blist *soap_blist_Bucket1 = __null;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Bucket", 1, __null))
   { if (a->ns1__ListAllMyBucketsList::Bucket == __null)
    { if (soap_blist_Bucket1 == __null)
      soap_blist_Bucket1 = soap_new_block(soap);
     a->ns1__ListAllMyBucketsList::Bucket = (ns1__ListAllMyBucketsEntry **)soap_push_block(soap, soap_blist_Bucket1, sizeof(ns1__ListAllMyBucketsEntry *));
     if (a->ns1__ListAllMyBucketsList::Bucket == __null)
      return __null;
     *a->ns1__ListAllMyBucketsList::Bucket = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__ListAllMyBucketsEntry(soap, "ns1:Bucket", a->ns1__ListAllMyBucketsList::Bucket, "ns1:ListAllMyBucketsEntry"))
    { a->ns1__ListAllMyBucketsList::__sizeBucket++;
     a->ns1__ListAllMyBucketsList::Bucket = __null;
     continue;
    }
   }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->ns1__ListAllMyBucketsList::Bucket)
   soap_pop_block(soap, soap_blist_Bucket1);
  if (a->ns1__ListAllMyBucketsList::__sizeBucket)
   a->ns1__ListAllMyBucketsList::Bucket = (ns1__ListAllMyBucketsEntry **)soap_save_block(soap, soap_blist_Bucket1, __null, 1);
  else
  { a->ns1__ListAllMyBucketsList::Bucket = __null;
   if (soap_blist_Bucket1)
    soap_end_block(soap, soap_blist_Bucket1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__ListAllMyBucketsList *)soap_id_forward(soap, soap->href, (void*)a, 0, (36), 0, sizeof(ns1__ListAllMyBucketsList), 0, soap_copy_ns1__ListAllMyBucketsList);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int ns1__ListAllMyBucketsList::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (36));
 if (this->soap_out(soap, tag?tag:"ns1:ListAllMyBucketsList", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__ListAllMyBucketsList::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__ListAllMyBucketsList(soap, this, tag, type);
}

 ns1__ListAllMyBucketsList * soap_get_ns1__ListAllMyBucketsList(struct soap *soap, ns1__ListAllMyBucketsList *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__ListAllMyBucketsList(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__ListAllMyBucketsList * soap_instantiate_ns1__ListAllMyBucketsList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (36), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsList);
  if (size)
   *size = sizeof(ns1__ListAllMyBucketsList);
  ((ns1__ListAllMyBucketsList*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsList[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__ListAllMyBucketsList);
  for (int i = 0; i < n; i++)
   ((ns1__ListAllMyBucketsList*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__ListAllMyBucketsList*)cp->ptr;
}

 void soap_copy_ns1__ListAllMyBucketsList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__ListAllMyBucketsList*)p = *(ns1__ListAllMyBucketsList*)q;
}

void ns1__ListAllMyBucketsResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__ListAllMyBucketsResult::Owner = __null;
 this->ns1__ListAllMyBucketsResult::Buckets = __null;

}

void ns1__ListAllMyBucketsResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__CanonicalUser(soap, &this->ns1__ListAllMyBucketsResult::Owner);
 soap_serialize_PointerTons1__ListAllMyBucketsList(soap, &this->ns1__ListAllMyBucketsResult::Buckets);

}

int ns1__ListAllMyBucketsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__ListAllMyBucketsResult(soap, tag, id, this, type);
}

 int soap_out_ns1__ListAllMyBucketsResult(struct soap *soap, const char *tag, int id, const ns1__ListAllMyBucketsResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (35)), type))
  return soap->error;
 if (soap_out_PointerTons1__CanonicalUser(soap, "ns1:Owner", -1, &(a->ns1__ListAllMyBucketsResult::Owner), ""))
  return soap->error;
 if (soap_out_PointerTons1__ListAllMyBucketsList(soap, "ns1:Buckets", -1, &(a->ns1__ListAllMyBucketsResult::Buckets), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__ListAllMyBucketsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__ListAllMyBucketsResult(soap, tag, this, type);
}

 ns1__ListAllMyBucketsResult * soap_in_ns1__ListAllMyBucketsResult(struct soap *soap, const char *tag, ns1__ListAllMyBucketsResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__ListAllMyBucketsResult *)soap_class_id_enter(soap, soap->id, a, (35), sizeof(ns1__ListAllMyBucketsResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (35))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__ListAllMyBucketsResult *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Owner1 = 1;
 size_t soap_flag_Buckets1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Owner1 && soap->error == 3)
    if (soap_in_PointerTons1__CanonicalUser(soap, "ns1:Owner", &(a->ns1__ListAllMyBucketsResult::Owner), "ns1:CanonicalUser"))
    { soap_flag_Owner1--;
     continue;
    }
   if (soap_flag_Buckets1 && soap->error == 3)
    if (soap_in_PointerTons1__ListAllMyBucketsList(soap, "ns1:Buckets", &(a->ns1__ListAllMyBucketsResult::Buckets), "ns1:ListAllMyBucketsList"))
    { soap_flag_Buckets1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__ListAllMyBucketsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (35), 0, sizeof(ns1__ListAllMyBucketsResult), 0, soap_copy_ns1__ListAllMyBucketsResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Owner1 > 0 || soap_flag_Buckets1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__ListAllMyBucketsResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (35));
 if (this->soap_out(soap, tag?tag:"ns1:ListAllMyBucketsResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__ListAllMyBucketsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__ListAllMyBucketsResult(soap, this, tag, type);
}

 ns1__ListAllMyBucketsResult * soap_get_ns1__ListAllMyBucketsResult(struct soap *soap, ns1__ListAllMyBucketsResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__ListAllMyBucketsResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__ListAllMyBucketsResult * soap_instantiate_ns1__ListAllMyBucketsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (35), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsResult);
  if (size)
   *size = sizeof(ns1__ListAllMyBucketsResult);
  ((ns1__ListAllMyBucketsResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__ListAllMyBucketsResult);
  for (int i = 0; i < n; i++)
   ((ns1__ListAllMyBucketsResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__ListAllMyBucketsResult*)cp->ptr;
}

 void soap_copy_ns1__ListAllMyBucketsResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__ListAllMyBucketsResult*)p = *(ns1__ListAllMyBucketsResult*)q;
}

void ns1__ListAllMyBucketsEntry::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__ListAllMyBucketsEntry::Name);
 soap_default_time(soap, &this->ns1__ListAllMyBucketsEntry::CreationDate);

}

void ns1__ListAllMyBucketsEntry::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__ListAllMyBucketsEntry::Name);
 soap_embedded(soap, &this->ns1__ListAllMyBucketsEntry::CreationDate, (84));

}

int ns1__ListAllMyBucketsEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__ListAllMyBucketsEntry(soap, tag, id, this, type);
}

 int soap_out_ns1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, int id, const ns1__ListAllMyBucketsEntry *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (34)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Name", -1, &(a->ns1__ListAllMyBucketsEntry::Name), ""))
  return soap->error;
 if (soap_out_time(soap, "ns1:CreationDate", -1, &(a->ns1__ListAllMyBucketsEntry::CreationDate), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__ListAllMyBucketsEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__ListAllMyBucketsEntry(soap, tag, this, type);
}

 ns1__ListAllMyBucketsEntry * soap_in_ns1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, ns1__ListAllMyBucketsEntry *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__ListAllMyBucketsEntry *)soap_class_id_enter(soap, soap->id, a, (34), sizeof(ns1__ListAllMyBucketsEntry), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (34))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__ListAllMyBucketsEntry *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Name1 = 1;
 size_t soap_flag_CreationDate1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Name1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Name", &(a->ns1__ListAllMyBucketsEntry::Name), "xsd:string"))
    { soap_flag_Name1--;
     continue;
    }
   if (soap_flag_CreationDate1 && soap->error == 3)
    if (soap_in_time(soap, "ns1:CreationDate", &(a->ns1__ListAllMyBucketsEntry::CreationDate), "xsd:dateTime"))
    { soap_flag_CreationDate1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__ListAllMyBucketsEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, (34), 0, sizeof(ns1__ListAllMyBucketsEntry), 0, soap_copy_ns1__ListAllMyBucketsEntry);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Name1 > 0 || soap_flag_CreationDate1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__ListAllMyBucketsEntry::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (34));
 if (this->soap_out(soap, tag?tag:"ns1:ListAllMyBucketsEntry", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__ListAllMyBucketsEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__ListAllMyBucketsEntry(soap, this, tag, type);
}

 ns1__ListAllMyBucketsEntry * soap_get_ns1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__ListAllMyBucketsEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__ListAllMyBucketsEntry * soap_instantiate_ns1__ListAllMyBucketsEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (34), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsEntry);
  if (size)
   *size = sizeof(ns1__ListAllMyBucketsEntry);
  ((ns1__ListAllMyBucketsEntry*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__ListAllMyBucketsEntry[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__ListAllMyBucketsEntry);
  for (int i = 0; i < n; i++)
   ((ns1__ListAllMyBucketsEntry*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__ListAllMyBucketsEntry*)cp->ptr;
}

 void soap_copy_ns1__ListAllMyBucketsEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__ListAllMyBucketsEntry*)p = *(ns1__ListAllMyBucketsEntry*)q;
}

void ns1__ListBucketResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__ListBucketResult::__sizeMetadata = 0;
 this->ns1__ListBucketResult::Metadata = __null;
 soap_default_string(soap, &this->ns1__ListBucketResult::Name);
 soap_default_string(soap, &this->ns1__ListBucketResult::Prefix);
 soap_default_string(soap, &this->ns1__ListBucketResult::Marker);
 soap_default_string(soap, &this->ns1__ListBucketResult::NextMarker);
 soap_default_int(soap, &this->ns1__ListBucketResult::MaxKeys);
 soap_default_string(soap, &this->ns1__ListBucketResult::Delimiter);
 soap_default_bool(soap, &this->ns1__ListBucketResult::IsTruncated);
 this->ns1__ListBucketResult::__sizeContents = 0;
 this->ns1__ListBucketResult::Contents = __null;
 this->ns1__ListBucketResult::__sizeCommonPrefixes = 0;
 this->ns1__ListBucketResult::CommonPrefixes = __null;

}

void ns1__ListBucketResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 if (this->ns1__ListBucketResult::Metadata)
 { int i;
  for (i = 0; i < this->ns1__ListBucketResult::__sizeMetadata; i++)
  {
   soap_serialize_PointerTons1__MetadataEntry(soap, this->ns1__ListBucketResult::Metadata + i);
  }
 }
 soap_serialize_string(soap, &this->ns1__ListBucketResult::Name);
 soap_serialize_string(soap, &this->ns1__ListBucketResult::Prefix);
 soap_serialize_string(soap, &this->ns1__ListBucketResult::Marker);
 soap_serialize_string(soap, &this->ns1__ListBucketResult::NextMarker);
 soap_embedded(soap, &this->ns1__ListBucketResult::MaxKeys, (1));
 soap_serialize_string(soap, &this->ns1__ListBucketResult::Delimiter);
 soap_embedded(soap, &this->ns1__ListBucketResult::IsTruncated, (88));
 if (this->ns1__ListBucketResult::Contents)
 { int i;
  for (i = 0; i < this->ns1__ListBucketResult::__sizeContents; i++)
  {
   soap_serialize_PointerTons1__ListEntry(soap, this->ns1__ListBucketResult::Contents + i);
  }
 }
 if (this->ns1__ListBucketResult::CommonPrefixes)
 { int i;
  for (i = 0; i < this->ns1__ListBucketResult::__sizeCommonPrefixes; i++)
  {
   soap_serialize_PointerTons1__PrefixEntry(soap, this->ns1__ListBucketResult::CommonPrefixes + i);
  }
 }

}

int ns1__ListBucketResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__ListBucketResult(soap, tag, id, this, type);
}

 int soap_out_ns1__ListBucketResult(struct soap *soap, const char *tag, int id, const ns1__ListBucketResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (33)), type))
  return soap->error;
 if (a->ns1__ListBucketResult::Metadata)
 { int i;
  for (i = 0; i < a->ns1__ListBucketResult::__sizeMetadata; i++)
   if (soap_out_PointerTons1__MetadataEntry(soap, "ns1:Metadata", -1, a->ns1__ListBucketResult::Metadata + i, ""))
    return soap->error;
 }
 if (soap_out_string(soap, "ns1:Name", -1, &(a->ns1__ListBucketResult::Name), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Prefix", -1, &(a->ns1__ListBucketResult::Prefix), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Marker", -1, &(a->ns1__ListBucketResult::Marker), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:NextMarker", -1, &(a->ns1__ListBucketResult::NextMarker), ""))
  return soap->error;
 if (soap_out_int(soap, "ns1:MaxKeys", -1, &(a->ns1__ListBucketResult::MaxKeys), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Delimiter", -1, &(a->ns1__ListBucketResult::Delimiter), ""))
  return soap->error;
 if (soap_out_bool(soap, "ns1:IsTruncated", -1, &(a->ns1__ListBucketResult::IsTruncated), ""))
  return soap->error;
 if (a->ns1__ListBucketResult::Contents)
 { int i;
  for (i = 0; i < a->ns1__ListBucketResult::__sizeContents; i++)
   if (soap_out_PointerTons1__ListEntry(soap, "ns1:Contents", -1, a->ns1__ListBucketResult::Contents + i, ""))
    return soap->error;
 }
 if (a->ns1__ListBucketResult::CommonPrefixes)
 { int i;
  for (i = 0; i < a->ns1__ListBucketResult::__sizeCommonPrefixes; i++)
   if (soap_out_PointerTons1__PrefixEntry(soap, "ns1:CommonPrefixes", -1, a->ns1__ListBucketResult::CommonPrefixes + i, ""))
    return soap->error;
 }

 return soap_element_end_out(soap, tag);
}

void *ns1__ListBucketResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__ListBucketResult(soap, tag, this, type);
}

 ns1__ListBucketResult * soap_in_ns1__ListBucketResult(struct soap *soap, const char *tag, ns1__ListBucketResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__ListBucketResult *)soap_class_id_enter(soap, soap->id, a, (33), sizeof(ns1__ListBucketResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (33))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__ListBucketResult *)a->soap_in(soap, tag, type);
  }
 }
 struct soap_blist *soap_blist_Metadata1 = __null;
 size_t soap_flag_Name1 = 1;
 size_t soap_flag_Prefix1 = 1;
 size_t soap_flag_Marker1 = 1;
 size_t soap_flag_NextMarker1 = 1;
 size_t soap_flag_MaxKeys1 = 1;
 size_t soap_flag_Delimiter1 = 1;
 size_t soap_flag_IsTruncated1 = 1;
 struct soap_blist *soap_blist_Contents1 = __null;
 struct soap_blist *soap_blist_CommonPrefixes1 = __null;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Metadata", 1, __null))
   { if (a->ns1__ListBucketResult::Metadata == __null)
    { if (soap_blist_Metadata1 == __null)
      soap_blist_Metadata1 = soap_new_block(soap);
     a->ns1__ListBucketResult::Metadata = (ns1__MetadataEntry **)soap_push_block(soap, soap_blist_Metadata1, sizeof(ns1__MetadataEntry *));
     if (a->ns1__ListBucketResult::Metadata == __null)
      return __null;
     *a->ns1__ListBucketResult::Metadata = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__MetadataEntry(soap, "ns1:Metadata", a->ns1__ListBucketResult::Metadata, "ns1:MetadataEntry"))
    { a->ns1__ListBucketResult::__sizeMetadata++;
     a->ns1__ListBucketResult::Metadata = __null;
     continue;
    }
   }
   if (soap_flag_Name1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Name", &(a->ns1__ListBucketResult::Name), "xsd:string"))
    { soap_flag_Name1--;
     continue;
    }
   if (soap_flag_Prefix1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Prefix", &(a->ns1__ListBucketResult::Prefix), "xsd:string"))
    { soap_flag_Prefix1--;
     continue;
    }
   if (soap_flag_Marker1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Marker", &(a->ns1__ListBucketResult::Marker), "xsd:string"))
    { soap_flag_Marker1--;
     continue;
    }
   if (soap_flag_NextMarker1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:NextMarker", &(a->ns1__ListBucketResult::NextMarker), "xsd:string"))
    { soap_flag_NextMarker1--;
     continue;
    }
   if (soap_flag_MaxKeys1 && soap->error == 3)
    if (soap_in_int(soap, "ns1:MaxKeys", &(a->ns1__ListBucketResult::MaxKeys), "xsd:int"))
    { soap_flag_MaxKeys1--;
     continue;
    }
   if (soap_flag_Delimiter1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Delimiter", &(a->ns1__ListBucketResult::Delimiter), "xsd:string"))
    { soap_flag_Delimiter1--;
     continue;
    }
   if (soap_flag_IsTruncated1 && soap->error == 3)
    if (soap_in_bool(soap, "ns1:IsTruncated", &(a->ns1__ListBucketResult::IsTruncated), "xsd:boolean"))
    { soap_flag_IsTruncated1--;
     continue;
    }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Contents", 1, __null))
   { if (a->ns1__ListBucketResult::Contents == __null)
    { if (soap_blist_Contents1 == __null)
      soap_blist_Contents1 = soap_new_block(soap);
     a->ns1__ListBucketResult::Contents = (ns1__ListEntry **)soap_push_block(soap, soap_blist_Contents1, sizeof(ns1__ListEntry *));
     if (a->ns1__ListBucketResult::Contents == __null)
      return __null;
     *a->ns1__ListBucketResult::Contents = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__ListEntry(soap, "ns1:Contents", a->ns1__ListBucketResult::Contents, "ns1:ListEntry"))
    { a->ns1__ListBucketResult::__sizeContents++;
     a->ns1__ListBucketResult::Contents = __null;
     continue;
    }
   }
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:CommonPrefixes", 1, __null))
   { if (a->ns1__ListBucketResult::CommonPrefixes == __null)
    { if (soap_blist_CommonPrefixes1 == __null)
      soap_blist_CommonPrefixes1 = soap_new_block(soap);
     a->ns1__ListBucketResult::CommonPrefixes = (ns1__PrefixEntry **)soap_push_block(soap, soap_blist_CommonPrefixes1, sizeof(ns1__PrefixEntry *));
     if (a->ns1__ListBucketResult::CommonPrefixes == __null)
      return __null;
     *a->ns1__ListBucketResult::CommonPrefixes = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__PrefixEntry(soap, "ns1:CommonPrefixes", a->ns1__ListBucketResult::CommonPrefixes, "ns1:PrefixEntry"))
    { a->ns1__ListBucketResult::__sizeCommonPrefixes++;
     a->ns1__ListBucketResult::CommonPrefixes = __null;
     continue;
    }
   }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->ns1__ListBucketResult::Metadata)
   soap_pop_block(soap, soap_blist_Metadata1);
  if (a->ns1__ListBucketResult::__sizeMetadata)
   a->ns1__ListBucketResult::Metadata = (ns1__MetadataEntry **)soap_save_block(soap, soap_blist_Metadata1, __null, 1);
  else
  { a->ns1__ListBucketResult::Metadata = __null;
   if (soap_blist_Metadata1)
    soap_end_block(soap, soap_blist_Metadata1);
  }
  if (a->ns1__ListBucketResult::Contents)
   soap_pop_block(soap, soap_blist_Contents1);
  if (a->ns1__ListBucketResult::__sizeContents)
   a->ns1__ListBucketResult::Contents = (ns1__ListEntry **)soap_save_block(soap, soap_blist_Contents1, __null, 1);
  else
  { a->ns1__ListBucketResult::Contents = __null;
   if (soap_blist_Contents1)
    soap_end_block(soap, soap_blist_Contents1);
  }
  if (a->ns1__ListBucketResult::CommonPrefixes)
   soap_pop_block(soap, soap_blist_CommonPrefixes1);
  if (a->ns1__ListBucketResult::__sizeCommonPrefixes)
   a->ns1__ListBucketResult::CommonPrefixes = (ns1__PrefixEntry **)soap_save_block(soap, soap_blist_CommonPrefixes1, __null, 1);
  else
  { a->ns1__ListBucketResult::CommonPrefixes = __null;
   if (soap_blist_CommonPrefixes1)
    soap_end_block(soap, soap_blist_CommonPrefixes1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__ListBucketResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (33), 0, sizeof(ns1__ListBucketResult), 0, soap_copy_ns1__ListBucketResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Name1 > 0 || soap_flag_Prefix1 > 0 || soap_flag_Marker1 > 0 || soap_flag_MaxKeys1 > 0 || soap_flag_IsTruncated1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__ListBucketResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (33));
 if (this->soap_out(soap, tag?tag:"ns1:ListBucketResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__ListBucketResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__ListBucketResult(soap, this, tag, type);
}

 ns1__ListBucketResult * soap_get_ns1__ListBucketResult(struct soap *soap, ns1__ListBucketResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__ListBucketResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__ListBucketResult * soap_instantiate_ns1__ListBucketResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (33), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__ListBucketResult);
  if (size)
   *size = sizeof(ns1__ListBucketResult);
  ((ns1__ListBucketResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__ListBucketResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__ListBucketResult);
  for (int i = 0; i < n; i++)
   ((ns1__ListBucketResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__ListBucketResult*)cp->ptr;
}

 void soap_copy_ns1__ListBucketResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__ListBucketResult*)p = *(ns1__ListBucketResult*)q;
}

void ns1__PrefixEntry::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__PrefixEntry::Prefix);

}

void ns1__PrefixEntry::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__PrefixEntry::Prefix);

}

int ns1__PrefixEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__PrefixEntry(soap, tag, id, this, type);
}

 int soap_out_ns1__PrefixEntry(struct soap *soap, const char *tag, int id, const ns1__PrefixEntry *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (32)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Prefix", -1, &(a->ns1__PrefixEntry::Prefix), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__PrefixEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__PrefixEntry(soap, tag, this, type);
}

 ns1__PrefixEntry * soap_in_ns1__PrefixEntry(struct soap *soap, const char *tag, ns1__PrefixEntry *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__PrefixEntry *)soap_class_id_enter(soap, soap->id, a, (32), sizeof(ns1__PrefixEntry), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (32))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__PrefixEntry *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Prefix1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Prefix1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Prefix", &(a->ns1__PrefixEntry::Prefix), "xsd:string"))
    { soap_flag_Prefix1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__PrefixEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, (32), 0, sizeof(ns1__PrefixEntry), 0, soap_copy_ns1__PrefixEntry);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Prefix1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__PrefixEntry::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (32));
 if (this->soap_out(soap, tag?tag:"ns1:PrefixEntry", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__PrefixEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__PrefixEntry(soap, this, tag, type);
}

 ns1__PrefixEntry * soap_get_ns1__PrefixEntry(struct soap *soap, ns1__PrefixEntry *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__PrefixEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__PrefixEntry * soap_instantiate_ns1__PrefixEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (32), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__PrefixEntry);
  if (size)
   *size = sizeof(ns1__PrefixEntry);
  ((ns1__PrefixEntry*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__PrefixEntry[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__PrefixEntry);
  for (int i = 0; i < n; i++)
   ((ns1__PrefixEntry*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__PrefixEntry*)cp->ptr;
}

 void soap_copy_ns1__PrefixEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__PrefixEntry*)p = *(ns1__PrefixEntry*)q;
}

void ns1__ListEntry::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__ListEntry::Key);
 soap_default_time(soap, &this->ns1__ListEntry::LastModified);
 soap_default_string(soap, &this->ns1__ListEntry::ETag);
 soap_default_LONG64(soap, &this->ns1__ListEntry::Size);
 this->ns1__ListEntry::Owner = __null;
 soap_default_ns1__StorageClass(soap, &this->ns1__ListEntry::StorageClass);

}

void ns1__ListEntry::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__ListEntry::Key);
 soap_embedded(soap, &this->ns1__ListEntry::LastModified, (84));
 soap_serialize_string(soap, &this->ns1__ListEntry::ETag);
 soap_embedded(soap, &this->ns1__ListEntry::Size, (85));
 soap_serialize_PointerTons1__CanonicalUser(soap, &this->ns1__ListEntry::Owner);
 soap_embedded(soap, &this->ns1__ListEntry::StorageClass, (73));

}

int ns1__ListEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__ListEntry(soap, tag, id, this, type);
}

 int soap_out_ns1__ListEntry(struct soap *soap, const char *tag, int id, const ns1__ListEntry *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (31)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Key", -1, &(a->ns1__ListEntry::Key), ""))
  return soap->error;
 if (soap_out_time(soap, "ns1:LastModified", -1, &(a->ns1__ListEntry::LastModified), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:ETag", -1, &(a->ns1__ListEntry::ETag), ""))
  return soap->error;
 if (soap_out_LONG64(soap, "ns1:Size", -1, &(a->ns1__ListEntry::Size), ""))
  return soap->error;
 if (soap_out_PointerTons1__CanonicalUser(soap, "ns1:Owner", -1, &(a->ns1__ListEntry::Owner), ""))
  return soap->error;
 if (soap_out_ns1__StorageClass(soap, "ns1:StorageClass", -1, &(a->ns1__ListEntry::StorageClass), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__ListEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__ListEntry(soap, tag, this, type);
}

 ns1__ListEntry * soap_in_ns1__ListEntry(struct soap *soap, const char *tag, ns1__ListEntry *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__ListEntry *)soap_class_id_enter(soap, soap->id, a, (31), sizeof(ns1__ListEntry), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (31))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__ListEntry *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Key1 = 1;
 size_t soap_flag_LastModified1 = 1;
 size_t soap_flag_ETag1 = 1;
 size_t soap_flag_Size1 = 1;
 size_t soap_flag_Owner1 = 1;
 size_t soap_flag_StorageClass1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Key1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Key", &(a->ns1__ListEntry::Key), "xsd:string"))
    { soap_flag_Key1--;
     continue;
    }
   if (soap_flag_LastModified1 && soap->error == 3)
    if (soap_in_time(soap, "ns1:LastModified", &(a->ns1__ListEntry::LastModified), "xsd:dateTime"))
    { soap_flag_LastModified1--;
     continue;
    }
   if (soap_flag_ETag1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ETag", &(a->ns1__ListEntry::ETag), "xsd:string"))
    { soap_flag_ETag1--;
     continue;
    }
   if (soap_flag_Size1 && soap->error == 3)
    if (soap_in_LONG64(soap, "ns1:Size", &(a->ns1__ListEntry::Size), "xsd:long"))
    { soap_flag_Size1--;
     continue;
    }
   if (soap_flag_Owner1 && soap->error == 3)
    if (soap_in_PointerTons1__CanonicalUser(soap, "ns1:Owner", &(a->ns1__ListEntry::Owner), "ns1:CanonicalUser"))
    { soap_flag_Owner1--;
     continue;
    }
   if (soap_flag_StorageClass1 && soap->error == 3)
    if (soap_in_ns1__StorageClass(soap, "ns1:StorageClass", &(a->ns1__ListEntry::StorageClass), "ns1:StorageClass"))
    { soap_flag_StorageClass1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__ListEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, (31), 0, sizeof(ns1__ListEntry), 0, soap_copy_ns1__ListEntry);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Key1 > 0 || soap_flag_LastModified1 > 0 || soap_flag_ETag1 > 0 || soap_flag_Size1 > 0 || soap_flag_StorageClass1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__ListEntry::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (31));
 if (this->soap_out(soap, tag?tag:"ns1:ListEntry", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__ListEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__ListEntry(soap, this, tag, type);
}

 ns1__ListEntry * soap_get_ns1__ListEntry(struct soap *soap, ns1__ListEntry *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__ListEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__ListEntry * soap_instantiate_ns1__ListEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (31), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__ListEntry);
  if (size)
   *size = sizeof(ns1__ListEntry);
  ((ns1__ListEntry*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__ListEntry[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__ListEntry);
  for (int i = 0; i < n; i++)
   ((ns1__ListEntry*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__ListEntry*)cp->ptr;
}

 void soap_copy_ns1__ListEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__ListEntry*)p = *(ns1__ListEntry*)q;
}

void ns1__PutObjectResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__PutObjectResult::ETag);
 soap_default_time(soap, &this->ns1__PutObjectResult::LastModified);

}

void ns1__PutObjectResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__PutObjectResult::ETag);
 soap_embedded(soap, &this->ns1__PutObjectResult::LastModified, (84));

}

int ns1__PutObjectResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__PutObjectResult(soap, tag, id, this, type);
}

 int soap_out_ns1__PutObjectResult(struct soap *soap, const char *tag, int id, const ns1__PutObjectResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (30)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:ETag", -1, &(a->ns1__PutObjectResult::ETag), ""))
  return soap->error;
 if (soap_out_time(soap, "ns1:LastModified", -1, &(a->ns1__PutObjectResult::LastModified), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__PutObjectResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__PutObjectResult(soap, tag, this, type);
}

 ns1__PutObjectResult * soap_in_ns1__PutObjectResult(struct soap *soap, const char *tag, ns1__PutObjectResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__PutObjectResult *)soap_class_id_enter(soap, soap->id, a, (30), sizeof(ns1__PutObjectResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (30))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__PutObjectResult *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_ETag1 = 1;
 size_t soap_flag_LastModified1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_ETag1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ETag", &(a->ns1__PutObjectResult::ETag), "xsd:string"))
    { soap_flag_ETag1--;
     continue;
    }
   if (soap_flag_LastModified1 && soap->error == 3)
    if (soap_in_time(soap, "ns1:LastModified", &(a->ns1__PutObjectResult::LastModified), "xsd:dateTime"))
    { soap_flag_LastModified1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__PutObjectResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (30), 0, sizeof(ns1__PutObjectResult), 0, soap_copy_ns1__PutObjectResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_ETag1 > 0 || soap_flag_LastModified1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__PutObjectResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (30));
 if (this->soap_out(soap, tag?tag:"ns1:PutObjectResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__PutObjectResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__PutObjectResult(soap, this, tag, type);
}

 ns1__PutObjectResult * soap_get_ns1__PutObjectResult(struct soap *soap, ns1__PutObjectResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__PutObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__PutObjectResult * soap_instantiate_ns1__PutObjectResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (30), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__PutObjectResult);
  if (size)
   *size = sizeof(ns1__PutObjectResult);
  ((ns1__PutObjectResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__PutObjectResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__PutObjectResult);
  for (int i = 0; i < n; i++)
   ((ns1__PutObjectResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__PutObjectResult*)cp->ptr;
}

 void soap_copy_ns1__PutObjectResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__PutObjectResult*)p = *(ns1__PutObjectResult*)q;
}

void ns1__GetObjectResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__GetObjectResult::__sizeMetadata = 0;
 this->ns1__GetObjectResult::Metadata = __null;
 this->ns1__GetObjectResult::Data = __null;
 soap_default_time(soap, &this->ns1__GetObjectResult::LastModified);
 soap_default_string(soap, &this->ns1__GetObjectResult::ETag);
 this->ns1__Result::Status = __null;

}

void ns1__GetObjectResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 if (this->ns1__GetObjectResult::Metadata)
 { int i;
  for (i = 0; i < this->ns1__GetObjectResult::__sizeMetadata; i++)
  {
   soap_serialize_PointerTons1__MetadataEntry(soap, this->ns1__GetObjectResult::Metadata + i);
  }
 }
 soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__GetObjectResult::Data);
 soap_embedded(soap, &this->ns1__GetObjectResult::LastModified, (84));
 soap_serialize_string(soap, &this->ns1__GetObjectResult::ETag);
 soap_serialize_PointerTons1__Status(soap, &this->ns1__Result::Status);

}

int ns1__GetObjectResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__GetObjectResult(soap, tag, id, this, type);
}

 int soap_out_ns1__GetObjectResult(struct soap *soap, const char *tag, int id, const ns1__GetObjectResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (29)), "ns1:GetObjectResult"))
  return soap->error;
 if (soap_out_PointerTons1__Status(soap, "ns1:Status", -1, &(a->ns1__Result::Status), ""))
  return soap->error;

 if (a->ns1__GetObjectResult::Metadata)
 { int i;
  for (i = 0; i < a->ns1__GetObjectResult::__sizeMetadata; i++)
   if (soap_out_PointerTons1__MetadataEntry(soap, "ns1:Metadata", -1, a->ns1__GetObjectResult::Metadata + i, ""))
    return soap->error;
 }
 if (soap_out_PointerToxsd__base64Binary(soap, "ns1:Data", -1, &(a->ns1__GetObjectResult::Data), ""))
  return soap->error;
 if (soap_out_time(soap, "ns1:LastModified", -1, &(a->ns1__GetObjectResult::LastModified), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:ETag", -1, &(a->ns1__GetObjectResult::ETag), ""))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

void *ns1__GetObjectResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__GetObjectResult(soap, tag, this, type);
}

 ns1__GetObjectResult * soap_in_ns1__GetObjectResult(struct soap *soap, const char *tag, ns1__GetObjectResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__GetObjectResult *)soap_class_id_enter(soap, soap->id, a, (29), sizeof(ns1__GetObjectResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (29))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__GetObjectResult *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Status2 = 1;
 struct soap_blist *soap_blist_Metadata1 = __null;
 size_t soap_flag_Data1 = 1;
 size_t soap_flag_LastModified1 = 1;
 size_t soap_flag_ETag1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Status2 && soap->error == 3)
    if (soap_in_PointerTons1__Status(soap, "ns1:Status", &(a->ns1__Result::Status), "ns1:Status"))
    { soap_flag_Status2--;
     continue;
    }

   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Metadata", 1, __null))
   { if (a->ns1__GetObjectResult::Metadata == __null)
    { if (soap_blist_Metadata1 == __null)
      soap_blist_Metadata1 = soap_new_block(soap);
     a->ns1__GetObjectResult::Metadata = (ns1__MetadataEntry **)soap_push_block(soap, soap_blist_Metadata1, sizeof(ns1__MetadataEntry *));
     if (a->ns1__GetObjectResult::Metadata == __null)
      return __null;
     *a->ns1__GetObjectResult::Metadata = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__MetadataEntry(soap, "ns1:Metadata", a->ns1__GetObjectResult::Metadata, "ns1:MetadataEntry"))
    { a->ns1__GetObjectResult::__sizeMetadata++;
     a->ns1__GetObjectResult::Metadata = __null;
     continue;
    }
   }
   if (soap_flag_Data1 && soap->error == 3)
    if (soap_in_PointerToxsd__base64Binary(soap, "ns1:Data", &(a->ns1__GetObjectResult::Data), "xsd:base64Binary"))
    { soap_flag_Data1--;
     continue;
    }
   if (soap_flag_LastModified1 && soap->error == 3)
    if (soap_in_time(soap, "ns1:LastModified", &(a->ns1__GetObjectResult::LastModified), "xsd:dateTime"))
    { soap_flag_LastModified1--;
     continue;
    }
   if (soap_flag_ETag1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ETag", &(a->ns1__GetObjectResult::ETag), "xsd:string"))
    { soap_flag_ETag1--;
     continue;
    }
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->ns1__GetObjectResult::Metadata)
   soap_pop_block(soap, soap_blist_Metadata1);
  if (a->ns1__GetObjectResult::__sizeMetadata)
   a->ns1__GetObjectResult::Metadata = (ns1__MetadataEntry **)soap_save_block(soap, soap_blist_Metadata1, __null, 1);
  else
  { a->ns1__GetObjectResult::Metadata = __null;
   if (soap_blist_Metadata1)
    soap_end_block(soap, soap_blist_Metadata1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__GetObjectResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (29), 0, sizeof(ns1__GetObjectResult), 0, soap_copy_ns1__GetObjectResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Status2 > 0 || soap_flag_LastModified1 > 0 || soap_flag_ETag1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__GetObjectResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (29));
 if (this->soap_out(soap, tag?tag:"ns1:GetObjectResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__GetObjectResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__GetObjectResult(soap, this, tag, type);
}

 ns1__GetObjectResult * soap_get_ns1__GetObjectResult(struct soap *soap, ns1__GetObjectResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__GetObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__GetObjectResult * soap_instantiate_ns1__GetObjectResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (29), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__GetObjectResult);
  if (size)
   *size = sizeof(ns1__GetObjectResult);
  ((ns1__GetObjectResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__GetObjectResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__GetObjectResult);
  for (int i = 0; i < n; i++)
   ((ns1__GetObjectResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__GetObjectResult*)cp->ptr;
}

 void soap_copy_ns1__GetObjectResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__GetObjectResult*)p = *(ns1__GetObjectResult*)q;
}

void ns1__AccessControlPolicy::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__AccessControlPolicy::Owner = __null;
 this->ns1__AccessControlPolicy::AccessControlList = __null;

}

void ns1__AccessControlPolicy::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__CanonicalUser(soap, &this->ns1__AccessControlPolicy::Owner);
 soap_serialize_PointerTons1__AccessControlList(soap, &this->ns1__AccessControlPolicy::AccessControlList);

}

int ns1__AccessControlPolicy::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__AccessControlPolicy(soap, tag, id, this, type);
}

 int soap_out_ns1__AccessControlPolicy(struct soap *soap, const char *tag, int id, const ns1__AccessControlPolicy *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (28)), type))
  return soap->error;
 if (soap_out_PointerTons1__CanonicalUser(soap, "ns1:Owner", -1, &(a->ns1__AccessControlPolicy::Owner), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", -1, &(a->ns1__AccessControlPolicy::AccessControlList), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__AccessControlPolicy::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__AccessControlPolicy(soap, tag, this, type);
}

 ns1__AccessControlPolicy * soap_in_ns1__AccessControlPolicy(struct soap *soap, const char *tag, ns1__AccessControlPolicy *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__AccessControlPolicy *)soap_class_id_enter(soap, soap->id, a, (28), sizeof(ns1__AccessControlPolicy), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (28))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__AccessControlPolicy *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Owner1 = 1;
 size_t soap_flag_AccessControlList1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Owner1 && soap->error == 3)
    if (soap_in_PointerTons1__CanonicalUser(soap, "ns1:Owner", &(a->ns1__AccessControlPolicy::Owner), "ns1:CanonicalUser"))
    { soap_flag_Owner1--;
     continue;
    }
   if (soap_flag_AccessControlList1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:AccessControlList", &(a->ns1__AccessControlPolicy::AccessControlList), "ns1:AccessControlList"))
    { soap_flag_AccessControlList1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__AccessControlPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, (28), 0, sizeof(ns1__AccessControlPolicy), 0, soap_copy_ns1__AccessControlPolicy);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Owner1 > 0 || soap_flag_AccessControlList1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__AccessControlPolicy::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (28));
 if (this->soap_out(soap, tag?tag:"ns1:AccessControlPolicy", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__AccessControlPolicy::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__AccessControlPolicy(soap, this, tag, type);
}

 ns1__AccessControlPolicy * soap_get_ns1__AccessControlPolicy(struct soap *soap, ns1__AccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__AccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__AccessControlPolicy * soap_instantiate_ns1__AccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (28), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__AccessControlPolicy);
  if (size)
   *size = sizeof(ns1__AccessControlPolicy);
  ((ns1__AccessControlPolicy*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__AccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__AccessControlPolicy);
  for (int i = 0; i < n; i++)
   ((ns1__AccessControlPolicy*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__AccessControlPolicy*)cp->ptr;
}

 void soap_copy_ns1__AccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__AccessControlPolicy*)p = *(ns1__AccessControlPolicy*)q;
}

void ns1__LocationConstraint::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__LocationConstraint::__item);

}

void ns1__LocationConstraint::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__LocationConstraint::__item);

}

int ns1__LocationConstraint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__LocationConstraint(soap, tag, id, this, type);
}

 int soap_out_ns1__LocationConstraint(struct soap *soap, const char *tag, int id, const ns1__LocationConstraint *a, const char *type)
{
 return soap_out_string(soap, tag, id, &a->ns1__LocationConstraint::__item, "");
}

void *ns1__LocationConstraint::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__LocationConstraint(soap, tag, this, type);
}

 ns1__LocationConstraint * soap_in_ns1__LocationConstraint(struct soap *soap, const char *tag, ns1__LocationConstraint *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!(a = (ns1__LocationConstraint *)soap_class_id_enter(soap, soap->id, a, (27), sizeof(ns1__LocationConstraint), soap->type, soap->arrayType)))
 { soap->error = 3;
  return __null;
 }
 soap_revert(soap);
 *soap->id = '\0';
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (27))
   return (ns1__LocationConstraint *)a->soap_in(soap, tag, type);
 }
 if (!soap_in_string(soap, tag, &(a->ns1__LocationConstraint::__item), "ns1:LocationConstraint"))
  return __null;
 return a;
}

int ns1__LocationConstraint::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (27));
 if (this->soap_out(soap, tag?tag:"ns1:LocationConstraint", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__LocationConstraint::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__LocationConstraint(soap, this, tag, type);
}

 ns1__LocationConstraint * soap_get_ns1__LocationConstraint(struct soap *soap, ns1__LocationConstraint *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__LocationConstraint(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__LocationConstraint * soap_instantiate_ns1__LocationConstraint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (27), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__LocationConstraint);
  if (size)
   *size = sizeof(ns1__LocationConstraint);
  ((ns1__LocationConstraint*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__LocationConstraint[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__LocationConstraint);
  for (int i = 0; i < n; i++)
   ((ns1__LocationConstraint*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__LocationConstraint*)cp->ptr;
}

 void soap_copy_ns1__LocationConstraint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__LocationConstraint*)p = *(ns1__LocationConstraint*)q;
}

void ns1__CreateBucketConfiguration::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__CreateBucketConfiguration::LocationConstraint = __null;

}

void ns1__CreateBucketConfiguration::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__LocationConstraint(soap, &this->ns1__CreateBucketConfiguration::LocationConstraint);

}

int ns1__CreateBucketConfiguration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__CreateBucketConfiguration(soap, tag, id, this, type);
}

 int soap_out_ns1__CreateBucketConfiguration(struct soap *soap, const char *tag, int id, const ns1__CreateBucketConfiguration *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (26)), type))
  return soap->error;
 if (soap_out_PointerTons1__LocationConstraint(soap, "ns1:LocationConstraint", -1, &(a->ns1__CreateBucketConfiguration::LocationConstraint), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__CreateBucketConfiguration::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__CreateBucketConfiguration(soap, tag, this, type);
}

 ns1__CreateBucketConfiguration * soap_in_ns1__CreateBucketConfiguration(struct soap *soap, const char *tag, ns1__CreateBucketConfiguration *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__CreateBucketConfiguration *)soap_class_id_enter(soap, soap->id, a, (26), sizeof(ns1__CreateBucketConfiguration), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (26))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__CreateBucketConfiguration *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_LocationConstraint1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_LocationConstraint1 && soap->error == 3)
    if (soap_in_PointerTons1__LocationConstraint(soap, "ns1:LocationConstraint", &(a->ns1__CreateBucketConfiguration::LocationConstraint), "ns1:LocationConstraint"))
    { soap_flag_LocationConstraint1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__CreateBucketConfiguration *)soap_id_forward(soap, soap->href, (void*)a, 0, (26), 0, sizeof(ns1__CreateBucketConfiguration), 0, soap_copy_ns1__CreateBucketConfiguration);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_LocationConstraint1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__CreateBucketConfiguration::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (26));
 if (this->soap_out(soap, tag?tag:"ns1:CreateBucketConfiguration", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__CreateBucketConfiguration::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__CreateBucketConfiguration(soap, this, tag, type);
}

 ns1__CreateBucketConfiguration * soap_get_ns1__CreateBucketConfiguration(struct soap *soap, ns1__CreateBucketConfiguration *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__CreateBucketConfiguration(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__CreateBucketConfiguration * soap_instantiate_ns1__CreateBucketConfiguration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (26), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__CreateBucketConfiguration);
  if (size)
   *size = sizeof(ns1__CreateBucketConfiguration);
  ((ns1__CreateBucketConfiguration*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__CreateBucketConfiguration[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__CreateBucketConfiguration);
  for (int i = 0; i < n; i++)
   ((ns1__CreateBucketConfiguration*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__CreateBucketConfiguration*)cp->ptr;
}

 void soap_copy_ns1__CreateBucketConfiguration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__CreateBucketConfiguration*)p = *(ns1__CreateBucketConfiguration*)q;
}

void ns1__AccessControlList::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__AccessControlList::__sizeGrant = 0;
 this->ns1__AccessControlList::Grant = __null;

}

void ns1__AccessControlList::soap_serialize(struct soap *soap) const
{
 (void)soap;
 if (this->ns1__AccessControlList::Grant)
 { int i;
  for (i = 0; i < this->ns1__AccessControlList::__sizeGrant; i++)
  {
   soap_serialize_PointerTons1__Grant(soap, this->ns1__AccessControlList::Grant + i);
  }
 }

}

int ns1__AccessControlList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__AccessControlList(soap, tag, id, this, type);
}

 int soap_out_ns1__AccessControlList(struct soap *soap, const char *tag, int id, const ns1__AccessControlList *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (25)), type))
  return soap->error;
 if (a->ns1__AccessControlList::Grant)
 { int i;
  for (i = 0; i < a->ns1__AccessControlList::__sizeGrant; i++)
   if (soap_out_PointerTons1__Grant(soap, "ns1:Grant", -1, a->ns1__AccessControlList::Grant + i, ""))
    return soap->error;
 }

 return soap_element_end_out(soap, tag);
}

void *ns1__AccessControlList::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__AccessControlList(soap, tag, this, type);
}

 ns1__AccessControlList * soap_in_ns1__AccessControlList(struct soap *soap, const char *tag, ns1__AccessControlList *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__AccessControlList *)soap_class_id_enter(soap, soap->id, a, (25), sizeof(ns1__AccessControlList), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (25))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__AccessControlList *)a->soap_in(soap, tag, type);
  }
 }
 struct soap_blist *soap_blist_Grant1 = __null;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap->error == 3 && !soap_element_begin_in(soap, "ns1:Grant", 1, __null))
   { if (a->ns1__AccessControlList::Grant == __null)
    { if (soap_blist_Grant1 == __null)
      soap_blist_Grant1 = soap_new_block(soap);
     a->ns1__AccessControlList::Grant = (ns1__Grant **)soap_push_block(soap, soap_blist_Grant1, sizeof(ns1__Grant *));
     if (a->ns1__AccessControlList::Grant == __null)
      return __null;
     *a->ns1__AccessControlList::Grant = __null;
    }soap_revert(soap);
    if (soap_in_PointerTons1__Grant(soap, "ns1:Grant", a->ns1__AccessControlList::Grant, "ns1:Grant"))
    { a->ns1__AccessControlList::__sizeGrant++;
     a->ns1__AccessControlList::Grant = __null;
     continue;
    }
   }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (a->ns1__AccessControlList::Grant)
   soap_pop_block(soap, soap_blist_Grant1);
  if (a->ns1__AccessControlList::__sizeGrant)
   a->ns1__AccessControlList::Grant = (ns1__Grant **)soap_save_block(soap, soap_blist_Grant1, __null, 1);
  else
  { a->ns1__AccessControlList::Grant = __null;
   if (soap_blist_Grant1)
    soap_end_block(soap, soap_blist_Grant1);
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__AccessControlList *)soap_id_forward(soap, soap->href, (void*)a, 0, (25), 0, sizeof(ns1__AccessControlList), 0, soap_copy_ns1__AccessControlList);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (a->ns1__AccessControlList::__sizeGrant > 100))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__AccessControlList::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (25));
 if (this->soap_out(soap, tag?tag:"ns1:AccessControlList", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__AccessControlList::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__AccessControlList(soap, this, tag, type);
}

 ns1__AccessControlList * soap_get_ns1__AccessControlList(struct soap *soap, ns1__AccessControlList *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__AccessControlList(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__AccessControlList * soap_instantiate_ns1__AccessControlList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (25), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__AccessControlList);
  if (size)
   *size = sizeof(ns1__AccessControlList);
  ((ns1__AccessControlList*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__AccessControlList[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__AccessControlList);
  for (int i = 0; i < n; i++)
   ((ns1__AccessControlList*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__AccessControlList*)cp->ptr;
}

 void soap_copy_ns1__AccessControlList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__AccessControlList*)p = *(ns1__AccessControlList*)q;
}

void ns1__Grant::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__Grant::Grantee = __null;
 soap_default_ns1__Permission(soap, &this->ns1__Grant::Permission);

}

void ns1__Grant::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__Grantee(soap, &this->ns1__Grant::Grantee);

}

int ns1__Grant::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__Grant(soap, tag, id, this, type);
}

 int soap_out_ns1__Grant(struct soap *soap, const char *tag, int id, const ns1__Grant *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (24)), type))
  return soap->error;
 if (soap_out_PointerTons1__Grantee(soap, "ns1:Grantee", -1, &(a->ns1__Grant::Grantee), ""))
  return soap->error;
 if (soap_out_ns1__Permission(soap, "ns1:Permission", -1, &(a->ns1__Grant::Permission), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__Grant::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__Grant(soap, tag, this, type);
}

 ns1__Grant * soap_in_ns1__Grant(struct soap *soap, const char *tag, ns1__Grant *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__Grant *)soap_class_id_enter(soap, soap->id, a, (24), sizeof(ns1__Grant), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (24))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__Grant *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Grantee1 = 1;
 size_t soap_flag_Permission1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Grantee1 && soap->error == 3)
    if (soap_in_PointerTons1__Grantee(soap, "ns1:Grantee", &(a->ns1__Grant::Grantee), "ns1:Grantee"))
    { soap_flag_Grantee1--;
     continue;
    }
   if (soap_flag_Permission1 && soap->error == 3)
    if (soap_in_ns1__Permission(soap, "ns1:Permission", &(a->ns1__Grant::Permission), "ns1:Permission"))
    { soap_flag_Permission1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__Grant *)soap_id_forward(soap, soap->href, (void*)a, 0, (24), 0, sizeof(ns1__Grant), 0, soap_copy_ns1__Grant);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Grantee1 > 0 || soap_flag_Permission1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__Grant::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (24));
 if (this->soap_out(soap, tag?tag:"ns1:Grant", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__Grant::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__Grant(soap, this, tag, type);
}

 ns1__Grant * soap_get_ns1__Grant(struct soap *soap, ns1__Grant *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Grant(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__Grant * soap_instantiate_ns1__Grant(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (24), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__Grant);
  if (size)
   *size = sizeof(ns1__Grant);
  ((ns1__Grant*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__Grant[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__Grant);
  for (int i = 0; i < n; i++)
   ((ns1__Grant*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__Grant*)cp->ptr;
}

 void soap_copy_ns1__Grant(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__Grant*)p = *(ns1__Grant*)q;
}

void ns1__Group::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__Group::URI);

}

void ns1__Group::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__Group::URI);

}

int ns1__Group::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__Group(soap, tag, id, this, type);
}

 int soap_out_ns1__Group(struct soap *soap, const char *tag, int id, const ns1__Group *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (23)), "ns1:Group"))
  return soap->error;

 if (soap_out_string(soap, "ns1:URI", -1, &(a->ns1__Group::URI), ""))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

void *ns1__Group::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__Group(soap, tag, this, type);
}

 ns1__Group * soap_in_ns1__Group(struct soap *soap, const char *tag, ns1__Group *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__Group *)soap_class_id_enter(soap, soap->id, a, (23), sizeof(ns1__Group), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (23))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__Group *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_URI1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap_flag_URI1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:URI", &(a->ns1__Group::URI), "xsd:string"))
    { soap_flag_URI1--;
     continue;
    }
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__Group *)soap_id_forward(soap, soap->href, (void*)a, 0, (23), 0, sizeof(ns1__Group), 0, soap_copy_ns1__Group);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_URI1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__Group::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (23));
 if (this->soap_out(soap, tag?tag:"ns1:Group", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__Group::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__Group(soap, this, tag, type);
}

 ns1__Group * soap_get_ns1__Group(struct soap *soap, ns1__Group *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Group(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__Group * soap_instantiate_ns1__Group(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (23), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__Group);
  if (size)
   *size = sizeof(ns1__Group);
  ((ns1__Group*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__Group[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__Group);
  for (int i = 0; i < n; i++)
   ((ns1__Group*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__Group*)cp->ptr;
}

 void soap_copy_ns1__Group(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__Group*)p = *(ns1__Group*)q;
}

void ns1__CanonicalUser::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__CanonicalUser::ID);
 soap_default_string(soap, &this->ns1__CanonicalUser::DisplayName);

}

void ns1__CanonicalUser::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__CanonicalUser::ID);
 soap_serialize_string(soap, &this->ns1__CanonicalUser::DisplayName);

}

int ns1__CanonicalUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__CanonicalUser(soap, tag, id, this, type);
}

 int soap_out_ns1__CanonicalUser(struct soap *soap, const char *tag, int id, const ns1__CanonicalUser *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (22)), "ns1:CanonicalUser"))
  return soap->error;

 if (soap_out_string(soap, "ns1:ID", -1, &(a->ns1__CanonicalUser::ID), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:DisplayName", -1, &(a->ns1__CanonicalUser::DisplayName), ""))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

void *ns1__CanonicalUser::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__CanonicalUser(soap, tag, this, type);
}

 ns1__CanonicalUser * soap_in_ns1__CanonicalUser(struct soap *soap, const char *tag, ns1__CanonicalUser *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__CanonicalUser *)soap_class_id_enter(soap, soap->id, a, (22), sizeof(ns1__CanonicalUser), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (22))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__CanonicalUser *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_ID1 = 1;
 size_t soap_flag_DisplayName1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap_flag_ID1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:ID", &(a->ns1__CanonicalUser::ID), "xsd:string"))
    { soap_flag_ID1--;
     continue;
    }
   if (soap_flag_DisplayName1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:DisplayName", &(a->ns1__CanonicalUser::DisplayName), "xsd:string"))
    { soap_flag_DisplayName1--;
     continue;
    }
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__CanonicalUser *)soap_id_forward(soap, soap->href, (void*)a, 0, (22), 0, sizeof(ns1__CanonicalUser), 0, soap_copy_ns1__CanonicalUser);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_ID1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__CanonicalUser::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (22));
 if (this->soap_out(soap, tag?tag:"ns1:CanonicalUser", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__CanonicalUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__CanonicalUser(soap, this, tag, type);
}

 ns1__CanonicalUser * soap_get_ns1__CanonicalUser(struct soap *soap, ns1__CanonicalUser *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__CanonicalUser(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__CanonicalUser * soap_instantiate_ns1__CanonicalUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (22), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__CanonicalUser);
  if (size)
   *size = sizeof(ns1__CanonicalUser);
  ((ns1__CanonicalUser*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__CanonicalUser[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__CanonicalUser);
  for (int i = 0; i < n; i++)
   ((ns1__CanonicalUser*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__CanonicalUser*)cp->ptr;
}

 void soap_copy_ns1__CanonicalUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__CanonicalUser*)p = *(ns1__CanonicalUser*)q;
}

void ns1__AmazonCustomerByEmail::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__AmazonCustomerByEmail::EmailAddress);

}

void ns1__AmazonCustomerByEmail::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__AmazonCustomerByEmail::EmailAddress);

}

int ns1__AmazonCustomerByEmail::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__AmazonCustomerByEmail(soap, tag, id, this, type);
}

 int soap_out_ns1__AmazonCustomerByEmail(struct soap *soap, const char *tag, int id, const ns1__AmazonCustomerByEmail *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (21)), "ns1:AmazonCustomerByEmail"))
  return soap->error;

 if (soap_out_string(soap, "ns1:EmailAddress", -1, &(a->ns1__AmazonCustomerByEmail::EmailAddress), ""))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

void *ns1__AmazonCustomerByEmail::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__AmazonCustomerByEmail(soap, tag, this, type);
}

 ns1__AmazonCustomerByEmail * soap_in_ns1__AmazonCustomerByEmail(struct soap *soap, const char *tag, ns1__AmazonCustomerByEmail *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__AmazonCustomerByEmail *)soap_class_id_enter(soap, soap->id, a, (21), sizeof(ns1__AmazonCustomerByEmail), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (21))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__AmazonCustomerByEmail *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_EmailAddress1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap_flag_EmailAddress1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:EmailAddress", &(a->ns1__AmazonCustomerByEmail::EmailAddress), "xsd:string"))
    { soap_flag_EmailAddress1--;
     continue;
    }
   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__AmazonCustomerByEmail *)soap_id_forward(soap, soap->href, (void*)a, 0, (21), 0, sizeof(ns1__AmazonCustomerByEmail), 0, soap_copy_ns1__AmazonCustomerByEmail);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_EmailAddress1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__AmazonCustomerByEmail::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (21));
 if (this->soap_out(soap, tag?tag:"ns1:AmazonCustomerByEmail", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__AmazonCustomerByEmail::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__AmazonCustomerByEmail(soap, this, tag, type);
}

 ns1__AmazonCustomerByEmail * soap_get_ns1__AmazonCustomerByEmail(struct soap *soap, ns1__AmazonCustomerByEmail *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__AmazonCustomerByEmail(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__AmazonCustomerByEmail * soap_instantiate_ns1__AmazonCustomerByEmail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (21), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail);
  if (size)
   *size = sizeof(ns1__AmazonCustomerByEmail);
  ((ns1__AmazonCustomerByEmail*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__AmazonCustomerByEmail);
  for (int i = 0; i < n; i++)
   ((ns1__AmazonCustomerByEmail*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__AmazonCustomerByEmail*)cp->ptr;
}

 void soap_copy_ns1__AmazonCustomerByEmail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__AmazonCustomerByEmail*)p = *(ns1__AmazonCustomerByEmail*)q;
}

void ns1__User::soap_default(struct soap *soap)
{
 this->soap = soap;

}

void ns1__User::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int ns1__User::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__User(soap, tag, id, this, type);
}

 int soap_out_ns1__User(struct soap *soap, const char *tag, int id, const ns1__User *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (20)), "ns1:User"))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__User::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__User(soap, tag, this, type);
}

 ns1__User * soap_in_ns1__User(struct soap *soap, const char *tag, ns1__User *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__User *)soap_class_id_enter(soap, soap->id, a, (20), sizeof(ns1__User), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (20))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__User *)a->soap_in(soap, tag, type);
  }
 }
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__User *)soap_id_forward(soap, soap->href, (void*)a, 0, (20), 0, sizeof(ns1__User), 0, soap_copy_ns1__User);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int ns1__User::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (20));
 if (this->soap_out(soap, tag?tag:"ns1:User", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__User::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__User(soap, this, tag, type);
}

 ns1__User * soap_get_ns1__User(struct soap *soap, ns1__User *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__User(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__User * soap_instantiate_ns1__User(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (20), n, soap_fdelete);
 if (!cp)
  return __null;
 if (type && !soap_match_tag(soap, type, "ns1:AmazonCustomerByEmail"))
 { cp->type = (21);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__AmazonCustomerByEmail);
   ((ns1__AmazonCustomerByEmail*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail[n]);
   if (size)
    *size = n * sizeof(ns1__AmazonCustomerByEmail);
   for (int i = 0; i < n; i++)
    ((ns1__AmazonCustomerByEmail*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__AmazonCustomerByEmail*)cp->ptr;
 }
 if (type && !soap_match_tag(soap, type, "ns1:CanonicalUser"))
 { cp->type = (22);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__CanonicalUser);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__CanonicalUser);
   ((ns1__CanonicalUser*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__CanonicalUser[n]);
   if (size)
    *size = n * sizeof(ns1__CanonicalUser);
   for (int i = 0; i < n; i++)
    ((ns1__CanonicalUser*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__CanonicalUser*)cp->ptr;
 }
 if (n < 0)
 { cp->ptr = (void*)new (ns1__User);
  if (size)
   *size = sizeof(ns1__User);
  ((ns1__User*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__User[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__User);
  for (int i = 0; i < n; i++)
   ((ns1__User*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__User*)cp->ptr;
}

 void soap_copy_ns1__User(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__User*)p = *(ns1__User*)q;
}

void ns1__Grantee::soap_default(struct soap *soap)
{
 this->soap = soap;

}

void ns1__Grantee::soap_serialize(struct soap *soap) const
{
 (void)soap;

}

int ns1__Grantee::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__Grantee(soap, tag, id, this, type);
}

 int soap_out_ns1__Grantee(struct soap *soap, const char *tag, int id, const ns1__Grantee *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (19)), type))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__Grantee::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__Grantee(soap, tag, this, type);
}

 ns1__Grantee * soap_in_ns1__Grantee(struct soap *soap, const char *tag, ns1__Grantee *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__Grantee *)soap_class_id_enter(soap, soap->id, a, (19), sizeof(ns1__Grantee), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (19))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__Grantee *)a->soap_in(soap, tag, type);
  }
 }
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__Grantee *)soap_id_forward(soap, soap->href, (void*)a, 0, (19), 0, sizeof(ns1__Grantee), 0, soap_copy_ns1__Grantee);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int ns1__Grantee::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (19));
 if (this->soap_out(soap, tag?tag:"ns1:Grantee", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__Grantee::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__Grantee(soap, this, tag, type);
}

 ns1__Grantee * soap_get_ns1__Grantee(struct soap *soap, ns1__Grantee *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Grantee(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__Grantee * soap_instantiate_ns1__Grantee(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (19), n, soap_fdelete);
 if (!cp)
  return __null;
 if (type && !soap_match_tag(soap, type, "ns1:User"))
 { cp->type = (20);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__User);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__User);
   ((ns1__User*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__User[n]);
   if (size)
    *size = n * sizeof(ns1__User);
   for (int i = 0; i < n; i++)
    ((ns1__User*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__User*)cp->ptr;
 }
 if (type && !soap_match_tag(soap, type, "ns1:Group"))
 { cp->type = (23);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__Group);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__Group);
   ((ns1__Group*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__Group[n]);
   if (size)
    *size = n * sizeof(ns1__Group);
   for (int i = 0; i < n; i++)
    ((ns1__Group*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__Group*)cp->ptr;
 }
 if (type && !soap_match_tag(soap, type, "ns1:AmazonCustomerByEmail"))
 { cp->type = (21);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__AmazonCustomerByEmail);
   ((ns1__AmazonCustomerByEmail*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__AmazonCustomerByEmail[n]);
   if (size)
    *size = n * sizeof(ns1__AmazonCustomerByEmail);
   for (int i = 0; i < n; i++)
    ((ns1__AmazonCustomerByEmail*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__AmazonCustomerByEmail*)cp->ptr;
 }
 if (type && !soap_match_tag(soap, type, "ns1:CanonicalUser"))
 { cp->type = (22);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__CanonicalUser);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__CanonicalUser);
   ((ns1__CanonicalUser*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__CanonicalUser[n]);
   if (size)
    *size = n * sizeof(ns1__CanonicalUser);
   for (int i = 0; i < n; i++)
    ((ns1__CanonicalUser*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__CanonicalUser*)cp->ptr;
 }
 if (n < 0)
 { cp->ptr = (void*)new (ns1__Grantee);
  if (size)
   *size = sizeof(ns1__Grantee);
  ((ns1__Grantee*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__Grantee[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__Grantee);
  for (int i = 0; i < n; i++)
   ((ns1__Grantee*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__Grantee*)cp->ptr;
}

 void soap_copy_ns1__Grantee(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__Grantee*)p = *(ns1__Grantee*)q;
}

void ns1__LoggingSettings::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__LoggingSettings::TargetBucket);
 soap_default_string(soap, &this->ns1__LoggingSettings::TargetPrefix);
 this->ns1__LoggingSettings::TargetGrants = __null;

}

void ns1__LoggingSettings::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__LoggingSettings::TargetBucket);
 soap_serialize_string(soap, &this->ns1__LoggingSettings::TargetPrefix);
 soap_serialize_PointerTons1__AccessControlList(soap, &this->ns1__LoggingSettings::TargetGrants);

}

int ns1__LoggingSettings::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__LoggingSettings(soap, tag, id, this, type);
}

 int soap_out_ns1__LoggingSettings(struct soap *soap, const char *tag, int id, const ns1__LoggingSettings *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (18)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:TargetBucket", -1, &(a->ns1__LoggingSettings::TargetBucket), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:TargetPrefix", -1, &(a->ns1__LoggingSettings::TargetPrefix), ""))
  return soap->error;
 if (soap_out_PointerTons1__AccessControlList(soap, "ns1:TargetGrants", -1, &(a->ns1__LoggingSettings::TargetGrants), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__LoggingSettings::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__LoggingSettings(soap, tag, this, type);
}

 ns1__LoggingSettings * soap_in_ns1__LoggingSettings(struct soap *soap, const char *tag, ns1__LoggingSettings *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__LoggingSettings *)soap_class_id_enter(soap, soap->id, a, (18), sizeof(ns1__LoggingSettings), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (18))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__LoggingSettings *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_TargetBucket1 = 1;
 size_t soap_flag_TargetPrefix1 = 1;
 size_t soap_flag_TargetGrants1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_TargetBucket1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:TargetBucket", &(a->ns1__LoggingSettings::TargetBucket), "xsd:string"))
    { soap_flag_TargetBucket1--;
     continue;
    }
   if (soap_flag_TargetPrefix1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:TargetPrefix", &(a->ns1__LoggingSettings::TargetPrefix), "xsd:string"))
    { soap_flag_TargetPrefix1--;
     continue;
    }
   if (soap_flag_TargetGrants1 && soap->error == 3)
    if (soap_in_PointerTons1__AccessControlList(soap, "ns1:TargetGrants", &(a->ns1__LoggingSettings::TargetGrants), "ns1:AccessControlList"))
    { soap_flag_TargetGrants1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__LoggingSettings *)soap_id_forward(soap, soap->href, (void*)a, 0, (18), 0, sizeof(ns1__LoggingSettings), 0, soap_copy_ns1__LoggingSettings);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_TargetBucket1 > 0 || soap_flag_TargetPrefix1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__LoggingSettings::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (18));
 if (this->soap_out(soap, tag?tag:"ns1:LoggingSettings", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__LoggingSettings::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__LoggingSettings(soap, this, tag, type);
}

 ns1__LoggingSettings * soap_get_ns1__LoggingSettings(struct soap *soap, ns1__LoggingSettings *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__LoggingSettings(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__LoggingSettings * soap_instantiate_ns1__LoggingSettings(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (18), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__LoggingSettings);
  if (size)
   *size = sizeof(ns1__LoggingSettings);
  ((ns1__LoggingSettings*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__LoggingSettings[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__LoggingSettings);
  for (int i = 0; i < n; i++)
   ((ns1__LoggingSettings*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__LoggingSettings*)cp->ptr;
}

 void soap_copy_ns1__LoggingSettings(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__LoggingSettings*)p = *(ns1__LoggingSettings*)q;
}

void ns1__BucketLoggingStatus::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__BucketLoggingStatus::LoggingEnabled = __null;

}

void ns1__BucketLoggingStatus::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__LoggingSettings(soap, &this->ns1__BucketLoggingStatus::LoggingEnabled);

}

int ns1__BucketLoggingStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__BucketLoggingStatus(soap, tag, id, this, type);
}

 int soap_out_ns1__BucketLoggingStatus(struct soap *soap, const char *tag, int id, const ns1__BucketLoggingStatus *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (17)), type))
  return soap->error;
 if (soap_out_PointerTons1__LoggingSettings(soap, "ns1:LoggingEnabled", -1, &(a->ns1__BucketLoggingStatus::LoggingEnabled), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__BucketLoggingStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__BucketLoggingStatus(soap, tag, this, type);
}

 ns1__BucketLoggingStatus * soap_in_ns1__BucketLoggingStatus(struct soap *soap, const char *tag, ns1__BucketLoggingStatus *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__BucketLoggingStatus *)soap_class_id_enter(soap, soap->id, a, (17), sizeof(ns1__BucketLoggingStatus), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (17))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__BucketLoggingStatus *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_LoggingEnabled1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_LoggingEnabled1 && soap->error == 3)
    if (soap_in_PointerTons1__LoggingSettings(soap, "ns1:LoggingEnabled", &(a->ns1__BucketLoggingStatus::LoggingEnabled), "ns1:LoggingSettings"))
    { soap_flag_LoggingEnabled1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__BucketLoggingStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, (17), 0, sizeof(ns1__BucketLoggingStatus), 0, soap_copy_ns1__BucketLoggingStatus);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int ns1__BucketLoggingStatus::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (17));
 if (this->soap_out(soap, tag?tag:"ns1:BucketLoggingStatus", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__BucketLoggingStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__BucketLoggingStatus(soap, this, tag, type);
}

 ns1__BucketLoggingStatus * soap_get_ns1__BucketLoggingStatus(struct soap *soap, ns1__BucketLoggingStatus *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__BucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__BucketLoggingStatus * soap_instantiate_ns1__BucketLoggingStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (17), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__BucketLoggingStatus);
  if (size)
   *size = sizeof(ns1__BucketLoggingStatus);
  ((ns1__BucketLoggingStatus*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__BucketLoggingStatus[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__BucketLoggingStatus);
  for (int i = 0; i < n; i++)
   ((ns1__BucketLoggingStatus*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__BucketLoggingStatus*)cp->ptr;
}

 void soap_copy_ns1__BucketLoggingStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__BucketLoggingStatus*)p = *(ns1__BucketLoggingStatus*)q;
}

void ns1__CreateBucketResult::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__CreateBucketResult::BucketName);

}

void ns1__CreateBucketResult::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__CreateBucketResult::BucketName);

}

int ns1__CreateBucketResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__CreateBucketResult(soap, tag, id, this, type);
}

 int soap_out_ns1__CreateBucketResult(struct soap *soap, const char *tag, int id, const ns1__CreateBucketResult *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (16)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:BucketName", -1, &(a->ns1__CreateBucketResult::BucketName), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__CreateBucketResult::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__CreateBucketResult(soap, tag, this, type);
}

 ns1__CreateBucketResult * soap_in_ns1__CreateBucketResult(struct soap *soap, const char *tag, ns1__CreateBucketResult *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__CreateBucketResult *)soap_class_id_enter(soap, soap->id, a, (16), sizeof(ns1__CreateBucketResult), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (16))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__CreateBucketResult *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_BucketName1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_BucketName1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:BucketName", &(a->ns1__CreateBucketResult::BucketName), "xsd:string"))
    { soap_flag_BucketName1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__CreateBucketResult *)soap_id_forward(soap, soap->href, (void*)a, 0, (16), 0, sizeof(ns1__CreateBucketResult), 0, soap_copy_ns1__CreateBucketResult);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_BucketName1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__CreateBucketResult::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (16));
 if (this->soap_out(soap, tag?tag:"ns1:CreateBucketResult", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__CreateBucketResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__CreateBucketResult(soap, this, tag, type);
}

 ns1__CreateBucketResult * soap_get_ns1__CreateBucketResult(struct soap *soap, ns1__CreateBucketResult *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__CreateBucketResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__CreateBucketResult * soap_instantiate_ns1__CreateBucketResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (16), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__CreateBucketResult);
  if (size)
   *size = sizeof(ns1__CreateBucketResult);
  ((ns1__CreateBucketResult*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__CreateBucketResult[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__CreateBucketResult);
  for (int i = 0; i < n; i++)
   ((ns1__CreateBucketResult*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__CreateBucketResult*)cp->ptr;
}

 void soap_copy_ns1__CreateBucketResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__CreateBucketResult*)p = *(ns1__CreateBucketResult*)q;
}

void ns1__Result::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->ns1__Result::Status = __null;

}

void ns1__Result::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_PointerTons1__Status(soap, &this->ns1__Result::Status);

}

int ns1__Result::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__Result(soap, tag, id, this, type);
}

 int soap_out_ns1__Result(struct soap *soap, const char *tag, int id, const ns1__Result *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (15)), type))
  return soap->error;
 if (soap_out_PointerTons1__Status(soap, "ns1:Status", -1, &(a->ns1__Result::Status), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__Result::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__Result(soap, tag, this, type);
}

 ns1__Result * soap_in_ns1__Result(struct soap *soap, const char *tag, ns1__Result *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__Result *)soap_class_id_enter(soap, soap->id, a, (15), sizeof(ns1__Result), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (15))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__Result *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Status1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Status1 && soap->error == 3)
    if (soap_in_PointerTons1__Status(soap, "ns1:Status", &(a->ns1__Result::Status), "ns1:Status"))
    { soap_flag_Status1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__Result *)soap_id_forward(soap, soap->href, (void*)a, 0, (15), 0, sizeof(ns1__Result), 0, soap_copy_ns1__Result);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Status1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__Result::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (15));
 if (this->soap_out(soap, tag?tag:"ns1:Result", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__Result::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__Result(soap, this, tag, type);
}

 ns1__Result * soap_get_ns1__Result(struct soap *soap, ns1__Result *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Result(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__Result * soap_instantiate_ns1__Result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (15), n, soap_fdelete);
 if (!cp)
  return __null;
 if (type && !soap_match_tag(soap, type, "ns1:GetObjectResult"))
 { cp->type = (29);
  if (n < 0)
  { cp->ptr = (void*)new (ns1__GetObjectResult);
   if (!cp->ptr)
   { soap->error = 20;
    return __null;
   }
   if (size)
    *size = sizeof(ns1__GetObjectResult);
   ((ns1__GetObjectResult*)cp->ptr)->soap = soap;
  }
  else
  { cp->ptr = (void*)new (ns1__GetObjectResult[n]);
   if (size)
    *size = n * sizeof(ns1__GetObjectResult);
   for (int i = 0; i < n; i++)
    ((ns1__GetObjectResult*)cp->ptr)[i].soap = soap;
  }
 ;
  return (ns1__GetObjectResult*)cp->ptr;
 }
 if (n < 0)
 { cp->ptr = (void*)new (ns1__Result);
  if (size)
   *size = sizeof(ns1__Result);
  ((ns1__Result*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__Result[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__Result);
  for (int i = 0; i < n; i++)
   ((ns1__Result*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__Result*)cp->ptr;
}

 void soap_copy_ns1__Result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__Result*)p = *(ns1__Result*)q;
}

void ns1__Status::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_int(soap, &this->ns1__Status::Code);
 soap_default_string(soap, &this->ns1__Status::Description);

}

void ns1__Status::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_embedded(soap, &this->ns1__Status::Code, (1));
 soap_serialize_string(soap, &this->ns1__Status::Description);

}

int ns1__Status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__Status(soap, tag, id, this, type);
}

 int soap_out_ns1__Status(struct soap *soap, const char *tag, int id, const ns1__Status *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (14)), type))
  return soap->error;
 if (soap_out_int(soap, "ns1:Code", -1, &(a->ns1__Status::Code), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Description", -1, &(a->ns1__Status::Description), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__Status::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__Status(soap, tag, this, type);
}

 ns1__Status * soap_in_ns1__Status(struct soap *soap, const char *tag, ns1__Status *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__Status *)soap_class_id_enter(soap, soap->id, a, (14), sizeof(ns1__Status), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (14))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__Status *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Code1 = 1;
 size_t soap_flag_Description1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Code1 && soap->error == 3)
    if (soap_in_int(soap, "ns1:Code", &(a->ns1__Status::Code), "xsd:int"))
    { soap_flag_Code1--;
     continue;
    }
   if (soap_flag_Description1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Description", &(a->ns1__Status::Description), "xsd:string"))
    { soap_flag_Description1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, (14), 0, sizeof(ns1__Status), 0, soap_copy_ns1__Status);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Code1 > 0 || soap_flag_Description1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__Status::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (14));
 if (this->soap_out(soap, tag?tag:"ns1:Status", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__Status::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__Status(soap, this, tag, type);
}

 ns1__Status * soap_get_ns1__Status(struct soap *soap, ns1__Status *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__Status(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__Status * soap_instantiate_ns1__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (14), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__Status);
  if (size)
   *size = sizeof(ns1__Status);
  ((ns1__Status*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__Status[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__Status);
  for (int i = 0; i < n; i++)
   ((ns1__Status*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__Status*)cp->ptr;
}

 void soap_copy_ns1__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__Status*)p = *(ns1__Status*)q;
}

void ns1__MetadataEntry::soap_default(struct soap *soap)
{
 this->soap = soap;
 soap_default_string(soap, &this->ns1__MetadataEntry::Name);
 soap_default_string(soap, &this->ns1__MetadataEntry::Value);

}

void ns1__MetadataEntry::soap_serialize(struct soap *soap) const
{
 (void)soap;
 soap_serialize_string(soap, &this->ns1__MetadataEntry::Name);
 soap_serialize_string(soap, &this->ns1__MetadataEntry::Value);

}

int ns1__MetadataEntry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
 return soap_out_ns1__MetadataEntry(soap, tag, id, this, type);
}

 int soap_out_ns1__MetadataEntry(struct soap *soap, const char *tag, int id, const ns1__MetadataEntry *a, const char *type)
{
 if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, (13)), type))
  return soap->error;
 if (soap_out_string(soap, "ns1:Name", -1, &(a->ns1__MetadataEntry::Name), ""))
  return soap->error;
 if (soap_out_string(soap, "ns1:Value", -1, &(a->ns1__MetadataEntry::Value), ""))
  return soap->error;

 return soap_element_end_out(soap, tag);
}

void *ns1__MetadataEntry::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_ns1__MetadataEntry(soap, tag, this, type);
}

 ns1__MetadataEntry * soap_in_ns1__MetadataEntry(struct soap *soap, const char *tag, ns1__MetadataEntry *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 0, __null))
  return __null;
 a = (ns1__MetadataEntry *)soap_class_id_enter(soap, soap->id, a, (13), sizeof(ns1__MetadataEntry), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
 { a->soap_default(soap);
  if (soap->clist->type != (13))
  { soap_revert(soap);
   *soap->id = '\0';
   return (ns1__MetadataEntry *)a->soap_in(soap, tag, type);
  }
 }
 size_t soap_flag_Name1 = 1;
 size_t soap_flag_Value1 = 1;
 if (soap->body && !*soap->href)
 {
  for (;;)
  { soap->error = 3;
   if (soap_flag_Name1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Name", &(a->ns1__MetadataEntry::Name), "xsd:string"))
    { soap_flag_Name1--;
     continue;
    }
   if (soap_flag_Value1 && (soap->error == 3 || soap->error == 6))
    if (soap_in_string(soap, "ns1:Value", &(a->ns1__MetadataEntry::Value), "xsd:string"))
    { soap_flag_Value1--;
     continue;
    }

   if (soap->error == 3)
    soap->error = soap_ignore_element(soap);
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
  if (soap_element_end_in(soap, tag))
   return __null;
 }
 else
 { a = (ns1__MetadataEntry *)soap_id_forward(soap, soap->href, (void*)a, 0, (13), 0, sizeof(ns1__MetadataEntry), 0, soap_copy_ns1__MetadataEntry);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 if ((soap->mode & 0x00001000) && (soap_flag_Name1 > 0 || soap_flag_Value1 > 0))
 { soap->error = 44;
  return __null;
 }
 return a;
}

int ns1__MetadataEntry::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, __null, 0, tag, (13));
 if (this->soap_out(soap, tag?tag:"ns1:MetadataEntry", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *ns1__MetadataEntry::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_ns1__MetadataEntry(soap, this, tag, type);
}

 ns1__MetadataEntry * soap_get_ns1__MetadataEntry(struct soap *soap, ns1__MetadataEntry *p, const char *tag, const char *type)
{
 if ((p = soap_in_ns1__MetadataEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 ns1__MetadataEntry * soap_instantiate_ns1__MetadataEntry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (13), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (ns1__MetadataEntry);
  if (size)
   *size = sizeof(ns1__MetadataEntry);
  ((ns1__MetadataEntry*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (ns1__MetadataEntry[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(ns1__MetadataEntry);
  for (int i = 0; i < n; i++)
   ((ns1__MetadataEntry*)cp->ptr)[i].soap = soap;
 }
  ;
 return (ns1__MetadataEntry*)cp->ptr;
}

 void soap_copy_ns1__MetadataEntry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(ns1__MetadataEntry*)p = *(ns1__MetadataEntry*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
 this->soap = soap;
 this->__size = 0;
 this->__ptr = __null;
 this->id = __null;
 this->type = __null;
 this->options = __null;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
 if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, (8)))
  if (this->id || this->type)
   soap->mode |= 0x00000080;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{ return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

 int soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{

 id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, (8));



 if (id < 0)
  return soap->error;
 if (soap_element_begin_out(soap, tag, id, type))
  return soap->error;
 if (soap_putbase64(soap, a->__ptr, a->__size))
  return soap->error;
 return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{ return soap_in_xsd__base64Binary(soap, tag, this, type);
}

 xsd__base64Binary * soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
 (void)type;
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
 { soap->error = 4;
  return __null;
 }
 a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, (8), sizeof(xsd__base64Binary), soap->type, soap->arrayType);
 if (!a)
  return __null;
 if (soap->alloced)
  a->soap_default(soap);
 if (soap->body && !*soap->href)
 {
  a->__ptr = soap_getbase64(soap, &a->__size, 0);

  if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
   return __null;

  if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
   return __null;
 }
 else
 {

  if (*soap->href != '#')
  { if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
    return __null;
  }
  else

   a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, (8), 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const char *type) const
{
 register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, (8));
 if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
  return soap->error;
 return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
 return soap_get_xsd__base64Binary(soap, this, tag, type);
}

 xsd__base64Binary * soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
 if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 xsd__base64Binary * soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (8), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (xsd__base64Binary);
  if (size)
   *size = sizeof(xsd__base64Binary);
  ((xsd__base64Binary*)cp->ptr)->soap = soap;
 }
 else
 { cp->ptr = (void*)new (xsd__base64Binary[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(xsd__base64Binary);
  for (int i = 0; i < n; i++)
   ((xsd__base64Binary*)cp->ptr)[i].soap = soap;
 }
  ;
 return (xsd__base64Binary*)cp->ptr;
}

 void soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}
# 13588 "../../AmazonS3/eternusC.cpp"
 void soap_default___ns1__CopyObject(struct soap *soap, struct __ns1__CopyObject *a)
{
 (void)soap; (void)a;
 a->ns1__CopyObject = __null;
}

 void soap_serialize___ns1__CopyObject(struct soap *soap, const struct __ns1__CopyObject *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__CopyObject(soap, &a->ns1__CopyObject);
}

 int soap_out___ns1__CopyObject(struct soap *soap, const char *tag, int id, const struct __ns1__CopyObject *a, const char *type)
{
 if (soap_out_PointerTo_ns1__CopyObject(soap, "ns1:CopyObject", -1, &a->ns1__CopyObject, ""))
  return soap->error;
 return 0;
}

 struct __ns1__CopyObject * soap_in___ns1__CopyObject(struct soap *soap, const char *tag, struct __ns1__CopyObject *a, const char *type)
{
 size_t soap_flag_ns1__CopyObject = 1;
 short soap_flag;
 a = (struct __ns1__CopyObject *)soap_id_enter(soap, "", a, (175), sizeof(struct __ns1__CopyObject), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__CopyObject(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__CopyObject && soap->error == 3)
    if (soap_in_PointerTo_ns1__CopyObject(soap, "ns1:CopyObject", &a->ns1__CopyObject, ""))
    { soap_flag_ns1__CopyObject--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__CopyObject(struct soap *soap, const struct __ns1__CopyObject *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__CopyObject(soap, tag?tag:"-ns1:CopyObject", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__CopyObject * soap_get___ns1__CopyObject(struct soap *soap, struct __ns1__CopyObject *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__CopyObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__CopyObject * soap_instantiate___ns1__CopyObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (175), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__CopyObject);
  if (size)
   *size = sizeof(struct __ns1__CopyObject);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__CopyObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__CopyObject);
 }
  ;
 return (struct __ns1__CopyObject*)cp->ptr;
}

 void soap_copy___ns1__CopyObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__CopyObject*)p = *(struct __ns1__CopyObject*)q;
}

 void soap_default___ns1__GetBucketLoggingStatus(struct soap *soap, struct __ns1__GetBucketLoggingStatus *a)
{
 (void)soap; (void)a;
 a->ns1__GetBucketLoggingStatus = __null;
}

 void soap_serialize___ns1__GetBucketLoggingStatus(struct soap *soap, const struct __ns1__GetBucketLoggingStatus *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__GetBucketLoggingStatus(soap, &a->ns1__GetBucketLoggingStatus);
}

 int soap_out___ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, int id, const struct __ns1__GetBucketLoggingStatus *a, const char *type)
{
 if (soap_out_PointerTo_ns1__GetBucketLoggingStatus(soap, "ns1:GetBucketLoggingStatus", -1, &a->ns1__GetBucketLoggingStatus, ""))
  return soap->error;
 return 0;
}

 struct __ns1__GetBucketLoggingStatus * soap_in___ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, struct __ns1__GetBucketLoggingStatus *a, const char *type)
{
 size_t soap_flag_ns1__GetBucketLoggingStatus = 1;
 short soap_flag;
 a = (struct __ns1__GetBucketLoggingStatus *)soap_id_enter(soap, "", a, (171), sizeof(struct __ns1__GetBucketLoggingStatus), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__GetBucketLoggingStatus(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__GetBucketLoggingStatus && soap->error == 3)
    if (soap_in_PointerTo_ns1__GetBucketLoggingStatus(soap, "ns1:GetBucketLoggingStatus", &a->ns1__GetBucketLoggingStatus, ""))
    { soap_flag_ns1__GetBucketLoggingStatus--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__GetBucketLoggingStatus(struct soap *soap, const struct __ns1__GetBucketLoggingStatus *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__GetBucketLoggingStatus(soap, tag?tag:"-ns1:GetBucketLoggingStatus", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__GetBucketLoggingStatus * soap_get___ns1__GetBucketLoggingStatus(struct soap *soap, struct __ns1__GetBucketLoggingStatus *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__GetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__GetBucketLoggingStatus * soap_instantiate___ns1__GetBucketLoggingStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (171), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__GetBucketLoggingStatus);
  if (size)
   *size = sizeof(struct __ns1__GetBucketLoggingStatus);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__GetBucketLoggingStatus[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__GetBucketLoggingStatus);
 }
  ;
 return (struct __ns1__GetBucketLoggingStatus*)cp->ptr;
}

 void soap_copy___ns1__GetBucketLoggingStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__GetBucketLoggingStatus*)p = *(struct __ns1__GetBucketLoggingStatus*)q;
}

 void soap_default___ns1__SetBucketLoggingStatus(struct soap *soap, struct __ns1__SetBucketLoggingStatus *a)
{
 (void)soap; (void)a;
 a->ns1__SetBucketLoggingStatus = __null;
}

 void soap_serialize___ns1__SetBucketLoggingStatus(struct soap *soap, const struct __ns1__SetBucketLoggingStatus *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__SetBucketLoggingStatus(soap, &a->ns1__SetBucketLoggingStatus);
}

 int soap_out___ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, int id, const struct __ns1__SetBucketLoggingStatus *a, const char *type)
{
 if (soap_out_PointerTo_ns1__SetBucketLoggingStatus(soap, "ns1:SetBucketLoggingStatus", -1, &a->ns1__SetBucketLoggingStatus, ""))
  return soap->error;
 return 0;
}

 struct __ns1__SetBucketLoggingStatus * soap_in___ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, struct __ns1__SetBucketLoggingStatus *a, const char *type)
{
 size_t soap_flag_ns1__SetBucketLoggingStatus = 1;
 short soap_flag;
 a = (struct __ns1__SetBucketLoggingStatus *)soap_id_enter(soap, "", a, (167), sizeof(struct __ns1__SetBucketLoggingStatus), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__SetBucketLoggingStatus(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__SetBucketLoggingStatus && soap->error == 3)
    if (soap_in_PointerTo_ns1__SetBucketLoggingStatus(soap, "ns1:SetBucketLoggingStatus", &a->ns1__SetBucketLoggingStatus, ""))
    { soap_flag_ns1__SetBucketLoggingStatus--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__SetBucketLoggingStatus(struct soap *soap, const struct __ns1__SetBucketLoggingStatus *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__SetBucketLoggingStatus(soap, tag?tag:"-ns1:SetBucketLoggingStatus", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__SetBucketLoggingStatus * soap_get___ns1__SetBucketLoggingStatus(struct soap *soap, struct __ns1__SetBucketLoggingStatus *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__SetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__SetBucketLoggingStatus * soap_instantiate___ns1__SetBucketLoggingStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (167), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__SetBucketLoggingStatus);
  if (size)
   *size = sizeof(struct __ns1__SetBucketLoggingStatus);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__SetBucketLoggingStatus[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__SetBucketLoggingStatus);
 }
  ;
 return (struct __ns1__SetBucketLoggingStatus*)cp->ptr;
}

 void soap_copy___ns1__SetBucketLoggingStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__SetBucketLoggingStatus*)p = *(struct __ns1__SetBucketLoggingStatus*)q;
}

 void soap_default___ns1__ListAllMyBuckets(struct soap *soap, struct __ns1__ListAllMyBuckets *a)
{
 (void)soap; (void)a;
 a->ns1__ListAllMyBuckets = __null;
}

 void soap_serialize___ns1__ListAllMyBuckets(struct soap *soap, const struct __ns1__ListAllMyBuckets *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__ListAllMyBuckets(soap, &a->ns1__ListAllMyBuckets);
}

 int soap_out___ns1__ListAllMyBuckets(struct soap *soap, const char *tag, int id, const struct __ns1__ListAllMyBuckets *a, const char *type)
{
 if (soap_out_PointerTo_ns1__ListAllMyBuckets(soap, "ns1:ListAllMyBuckets", -1, &a->ns1__ListAllMyBuckets, ""))
  return soap->error;
 return 0;
}

 struct __ns1__ListAllMyBuckets * soap_in___ns1__ListAllMyBuckets(struct soap *soap, const char *tag, struct __ns1__ListAllMyBuckets *a, const char *type)
{
 size_t soap_flag_ns1__ListAllMyBuckets = 1;
 short soap_flag;
 a = (struct __ns1__ListAllMyBuckets *)soap_id_enter(soap, "", a, (163), sizeof(struct __ns1__ListAllMyBuckets), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__ListAllMyBuckets(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__ListAllMyBuckets && soap->error == 3)
    if (soap_in_PointerTo_ns1__ListAllMyBuckets(soap, "ns1:ListAllMyBuckets", &a->ns1__ListAllMyBuckets, ""))
    { soap_flag_ns1__ListAllMyBuckets--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__ListAllMyBuckets(struct soap *soap, const struct __ns1__ListAllMyBuckets *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__ListAllMyBuckets(soap, tag?tag:"-ns1:ListAllMyBuckets", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__ListAllMyBuckets * soap_get___ns1__ListAllMyBuckets(struct soap *soap, struct __ns1__ListAllMyBuckets *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__ListAllMyBuckets(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__ListAllMyBuckets * soap_instantiate___ns1__ListAllMyBuckets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (163), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__ListAllMyBuckets);
  if (size)
   *size = sizeof(struct __ns1__ListAllMyBuckets);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__ListAllMyBuckets[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__ListAllMyBuckets);
 }
  ;
 return (struct __ns1__ListAllMyBuckets*)cp->ptr;
}

 void soap_copy___ns1__ListAllMyBuckets(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__ListAllMyBuckets*)p = *(struct __ns1__ListAllMyBuckets*)q;
}

 void soap_default___ns1__ListBucket(struct soap *soap, struct __ns1__ListBucket *a)
{
 (void)soap; (void)a;
 a->ns1__ListBucket = __null;
}

 void soap_serialize___ns1__ListBucket(struct soap *soap, const struct __ns1__ListBucket *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__ListBucket(soap, &a->ns1__ListBucket);
}

 int soap_out___ns1__ListBucket(struct soap *soap, const char *tag, int id, const struct __ns1__ListBucket *a, const char *type)
{
 if (soap_out_PointerTo_ns1__ListBucket(soap, "ns1:ListBucket", -1, &a->ns1__ListBucket, ""))
  return soap->error;
 return 0;
}

 struct __ns1__ListBucket * soap_in___ns1__ListBucket(struct soap *soap, const char *tag, struct __ns1__ListBucket *a, const char *type)
{
 size_t soap_flag_ns1__ListBucket = 1;
 short soap_flag;
 a = (struct __ns1__ListBucket *)soap_id_enter(soap, "", a, (159), sizeof(struct __ns1__ListBucket), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__ListBucket(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__ListBucket && soap->error == 3)
    if (soap_in_PointerTo_ns1__ListBucket(soap, "ns1:ListBucket", &a->ns1__ListBucket, ""))
    { soap_flag_ns1__ListBucket--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__ListBucket(struct soap *soap, const struct __ns1__ListBucket *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__ListBucket(soap, tag?tag:"-ns1:ListBucket", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__ListBucket * soap_get___ns1__ListBucket(struct soap *soap, struct __ns1__ListBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__ListBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__ListBucket * soap_instantiate___ns1__ListBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (159), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__ListBucket);
  if (size)
   *size = sizeof(struct __ns1__ListBucket);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__ListBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__ListBucket);
 }
  ;
 return (struct __ns1__ListBucket*)cp->ptr;
}

 void soap_copy___ns1__ListBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__ListBucket*)p = *(struct __ns1__ListBucket*)q;
}

 void soap_default___ns1__DeleteObject(struct soap *soap, struct __ns1__DeleteObject *a)
{
 (void)soap; (void)a;
 a->ns1__DeleteObject = __null;
}

 void soap_serialize___ns1__DeleteObject(struct soap *soap, const struct __ns1__DeleteObject *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__DeleteObject(soap, &a->ns1__DeleteObject);
}

 int soap_out___ns1__DeleteObject(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteObject *a, const char *type)
{
 if (soap_out_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", -1, &a->ns1__DeleteObject, ""))
  return soap->error;
 return 0;
}

 struct __ns1__DeleteObject * soap_in___ns1__DeleteObject(struct soap *soap, const char *tag, struct __ns1__DeleteObject *a, const char *type)
{
 size_t soap_flag_ns1__DeleteObject = 1;
 short soap_flag;
 a = (struct __ns1__DeleteObject *)soap_id_enter(soap, "", a, (155), sizeof(struct __ns1__DeleteObject), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__DeleteObject(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__DeleteObject && soap->error == 3)
    if (soap_in_PointerTo_ns1__DeleteObject(soap, "ns1:DeleteObject", &a->ns1__DeleteObject, ""))
    { soap_flag_ns1__DeleteObject--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__DeleteObject(struct soap *soap, const struct __ns1__DeleteObject *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__DeleteObject(soap, tag?tag:"-ns1:DeleteObject", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__DeleteObject * soap_get___ns1__DeleteObject(struct soap *soap, struct __ns1__DeleteObject *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__DeleteObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__DeleteObject * soap_instantiate___ns1__DeleteObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (155), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__DeleteObject);
  if (size)
   *size = sizeof(struct __ns1__DeleteObject);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__DeleteObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__DeleteObject);
 }
  ;
 return (struct __ns1__DeleteObject*)cp->ptr;
}

 void soap_copy___ns1__DeleteObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__DeleteObject*)p = *(struct __ns1__DeleteObject*)q;
}

 void soap_default___ns1__PutObjectInline(struct soap *soap, struct __ns1__PutObjectInline *a)
{
 (void)soap; (void)a;
 a->ns1__PutObjectInline = __null;
}

 void soap_serialize___ns1__PutObjectInline(struct soap *soap, const struct __ns1__PutObjectInline *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__PutObjectInline(soap, &a->ns1__PutObjectInline);
}

 int soap_out___ns1__PutObjectInline(struct soap *soap, const char *tag, int id, const struct __ns1__PutObjectInline *a, const char *type)
{
 if (soap_out_PointerTo_ns1__PutObjectInline(soap, "ns1:PutObjectInline", -1, &a->ns1__PutObjectInline, ""))
  return soap->error;
 return 0;
}

 struct __ns1__PutObjectInline * soap_in___ns1__PutObjectInline(struct soap *soap, const char *tag, struct __ns1__PutObjectInline *a, const char *type)
{
 size_t soap_flag_ns1__PutObjectInline = 1;
 short soap_flag;
 a = (struct __ns1__PutObjectInline *)soap_id_enter(soap, "", a, (151), sizeof(struct __ns1__PutObjectInline), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__PutObjectInline(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__PutObjectInline && soap->error == 3)
    if (soap_in_PointerTo_ns1__PutObjectInline(soap, "ns1:PutObjectInline", &a->ns1__PutObjectInline, ""))
    { soap_flag_ns1__PutObjectInline--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__PutObjectInline(struct soap *soap, const struct __ns1__PutObjectInline *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__PutObjectInline(soap, tag?tag:"-ns1:PutObjectInline", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__PutObjectInline * soap_get___ns1__PutObjectInline(struct soap *soap, struct __ns1__PutObjectInline *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__PutObjectInline(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__PutObjectInline * soap_instantiate___ns1__PutObjectInline(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (151), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__PutObjectInline);
  if (size)
   *size = sizeof(struct __ns1__PutObjectInline);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__PutObjectInline[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__PutObjectInline);
 }
  ;
 return (struct __ns1__PutObjectInline*)cp->ptr;
}

 void soap_copy___ns1__PutObjectInline(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__PutObjectInline*)p = *(struct __ns1__PutObjectInline*)q;
}

 void soap_default___ns1__PutObject(struct soap *soap, struct __ns1__PutObject *a)
{
 (void)soap; (void)a;
 a->ns1__PutObject = __null;
}

 void soap_serialize___ns1__PutObject(struct soap *soap, const struct __ns1__PutObject *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__PutObject(soap, &a->ns1__PutObject);
}

 int soap_out___ns1__PutObject(struct soap *soap, const char *tag, int id, const struct __ns1__PutObject *a, const char *type)
{
 if (soap_out_PointerTo_ns1__PutObject(soap, "ns1:PutObject", -1, &a->ns1__PutObject, ""))
  return soap->error;
 return 0;
}

 struct __ns1__PutObject * soap_in___ns1__PutObject(struct soap *soap, const char *tag, struct __ns1__PutObject *a, const char *type)
{
 size_t soap_flag_ns1__PutObject = 1;
 short soap_flag;
 a = (struct __ns1__PutObject *)soap_id_enter(soap, "", a, (147), sizeof(struct __ns1__PutObject), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__PutObject(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__PutObject && soap->error == 3)
    if (soap_in_PointerTo_ns1__PutObject(soap, "ns1:PutObject", &a->ns1__PutObject, ""))
    { soap_flag_ns1__PutObject--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__PutObject(struct soap *soap, const struct __ns1__PutObject *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__PutObject(soap, tag?tag:"-ns1:PutObject", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__PutObject * soap_get___ns1__PutObject(struct soap *soap, struct __ns1__PutObject *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__PutObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__PutObject * soap_instantiate___ns1__PutObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (147), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__PutObject);
  if (size)
   *size = sizeof(struct __ns1__PutObject);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__PutObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__PutObject);
 }
  ;
 return (struct __ns1__PutObject*)cp->ptr;
}

 void soap_copy___ns1__PutObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__PutObject*)p = *(struct __ns1__PutObject*)q;
}

 void soap_default___ns1__GetObjectExtended(struct soap *soap, struct __ns1__GetObjectExtended *a)
{
 (void)soap; (void)a;
 a->ns1__GetObjectExtended = __null;
}

 void soap_serialize___ns1__GetObjectExtended(struct soap *soap, const struct __ns1__GetObjectExtended *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__GetObjectExtended(soap, &a->ns1__GetObjectExtended);
}

 int soap_out___ns1__GetObjectExtended(struct soap *soap, const char *tag, int id, const struct __ns1__GetObjectExtended *a, const char *type)
{
 if (soap_out_PointerTo_ns1__GetObjectExtended(soap, "ns1:GetObjectExtended", -1, &a->ns1__GetObjectExtended, ""))
  return soap->error;
 return 0;
}

 struct __ns1__GetObjectExtended * soap_in___ns1__GetObjectExtended(struct soap *soap, const char *tag, struct __ns1__GetObjectExtended *a, const char *type)
{
 size_t soap_flag_ns1__GetObjectExtended = 1;
 short soap_flag;
 a = (struct __ns1__GetObjectExtended *)soap_id_enter(soap, "", a, (143), sizeof(struct __ns1__GetObjectExtended), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__GetObjectExtended(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__GetObjectExtended && soap->error == 3)
    if (soap_in_PointerTo_ns1__GetObjectExtended(soap, "ns1:GetObjectExtended", &a->ns1__GetObjectExtended, ""))
    { soap_flag_ns1__GetObjectExtended--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__GetObjectExtended(struct soap *soap, const struct __ns1__GetObjectExtended *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__GetObjectExtended(soap, tag?tag:"-ns1:GetObjectExtended", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__GetObjectExtended * soap_get___ns1__GetObjectExtended(struct soap *soap, struct __ns1__GetObjectExtended *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__GetObjectExtended(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__GetObjectExtended * soap_instantiate___ns1__GetObjectExtended(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (143), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__GetObjectExtended);
  if (size)
   *size = sizeof(struct __ns1__GetObjectExtended);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__GetObjectExtended[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__GetObjectExtended);
 }
  ;
 return (struct __ns1__GetObjectExtended*)cp->ptr;
}

 void soap_copy___ns1__GetObjectExtended(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__GetObjectExtended*)p = *(struct __ns1__GetObjectExtended*)q;
}

 void soap_default___ns1__GetObject(struct soap *soap, struct __ns1__GetObject *a)
{
 (void)soap; (void)a;
 a->ns1__GetObject = __null;
}

 void soap_serialize___ns1__GetObject(struct soap *soap, const struct __ns1__GetObject *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__GetObject(soap, &a->ns1__GetObject);
}

 int soap_out___ns1__GetObject(struct soap *soap, const char *tag, int id, const struct __ns1__GetObject *a, const char *type)
{
 if (soap_out_PointerTo_ns1__GetObject(soap, "ns1:GetObject", -1, &a->ns1__GetObject, ""))
  return soap->error;
 return 0;
}

 struct __ns1__GetObject * soap_in___ns1__GetObject(struct soap *soap, const char *tag, struct __ns1__GetObject *a, const char *type)
{
 size_t soap_flag_ns1__GetObject = 1;
 short soap_flag;
 a = (struct __ns1__GetObject *)soap_id_enter(soap, "", a, (139), sizeof(struct __ns1__GetObject), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__GetObject(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__GetObject && soap->error == 3)
    if (soap_in_PointerTo_ns1__GetObject(soap, "ns1:GetObject", &a->ns1__GetObject, ""))
    { soap_flag_ns1__GetObject--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__GetObject(struct soap *soap, const struct __ns1__GetObject *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__GetObject(soap, tag?tag:"-ns1:GetObject", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__GetObject * soap_get___ns1__GetObject(struct soap *soap, struct __ns1__GetObject *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__GetObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__GetObject * soap_instantiate___ns1__GetObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (139), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__GetObject);
  if (size)
   *size = sizeof(struct __ns1__GetObject);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__GetObject[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__GetObject);
 }
  ;
 return (struct __ns1__GetObject*)cp->ptr;
}

 void soap_copy___ns1__GetObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__GetObject*)p = *(struct __ns1__GetObject*)q;
}

 void soap_default___ns1__SetBucketAccessControlPolicy(struct soap *soap, struct __ns1__SetBucketAccessControlPolicy *a)
{
 (void)soap; (void)a;
 a->ns1__SetBucketAccessControlPolicy = __null;
}

 void soap_serialize___ns1__SetBucketAccessControlPolicy(struct soap *soap, const struct __ns1__SetBucketAccessControlPolicy *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicy(soap, &a->ns1__SetBucketAccessControlPolicy);
}

 int soap_out___ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, const struct __ns1__SetBucketAccessControlPolicy *a, const char *type)
{
 if (soap_out_PointerTo_ns1__SetBucketAccessControlPolicy(soap, "ns1:SetBucketAccessControlPolicy", -1, &a->ns1__SetBucketAccessControlPolicy, ""))
  return soap->error;
 return 0;
}

 struct __ns1__SetBucketAccessControlPolicy * soap_in___ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, struct __ns1__SetBucketAccessControlPolicy *a, const char *type)
{
 size_t soap_flag_ns1__SetBucketAccessControlPolicy = 1;
 short soap_flag;
 a = (struct __ns1__SetBucketAccessControlPolicy *)soap_id_enter(soap, "", a, (135), sizeof(struct __ns1__SetBucketAccessControlPolicy), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__SetBucketAccessControlPolicy(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__SetBucketAccessControlPolicy && soap->error == 3)
    if (soap_in_PointerTo_ns1__SetBucketAccessControlPolicy(soap, "ns1:SetBucketAccessControlPolicy", &a->ns1__SetBucketAccessControlPolicy, ""))
    { soap_flag_ns1__SetBucketAccessControlPolicy--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__SetBucketAccessControlPolicy(struct soap *soap, const struct __ns1__SetBucketAccessControlPolicy *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__SetBucketAccessControlPolicy(soap, tag?tag:"-ns1:SetBucketAccessControlPolicy", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__SetBucketAccessControlPolicy * soap_get___ns1__SetBucketAccessControlPolicy(struct soap *soap, struct __ns1__SetBucketAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__SetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__SetBucketAccessControlPolicy * soap_instantiate___ns1__SetBucketAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (135), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__SetBucketAccessControlPolicy);
  if (size)
   *size = sizeof(struct __ns1__SetBucketAccessControlPolicy);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__SetBucketAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__SetBucketAccessControlPolicy);
 }
  ;
 return (struct __ns1__SetBucketAccessControlPolicy*)cp->ptr;
}

 void soap_copy___ns1__SetBucketAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__SetBucketAccessControlPolicy*)p = *(struct __ns1__SetBucketAccessControlPolicy*)q;
}

 void soap_default___ns1__SetObjectAccessControlPolicy(struct soap *soap, struct __ns1__SetObjectAccessControlPolicy *a)
{
 (void)soap; (void)a;
 a->ns1__SetObjectAccessControlPolicy = __null;
}

 void soap_serialize___ns1__SetObjectAccessControlPolicy(struct soap *soap, const struct __ns1__SetObjectAccessControlPolicy *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicy(soap, &a->ns1__SetObjectAccessControlPolicy);
}

 int soap_out___ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, const struct __ns1__SetObjectAccessControlPolicy *a, const char *type)
{
 if (soap_out_PointerTo_ns1__SetObjectAccessControlPolicy(soap, "ns1:SetObjectAccessControlPolicy", -1, &a->ns1__SetObjectAccessControlPolicy, ""))
  return soap->error;
 return 0;
}

 struct __ns1__SetObjectAccessControlPolicy * soap_in___ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, struct __ns1__SetObjectAccessControlPolicy *a, const char *type)
{
 size_t soap_flag_ns1__SetObjectAccessControlPolicy = 1;
 short soap_flag;
 a = (struct __ns1__SetObjectAccessControlPolicy *)soap_id_enter(soap, "", a, (131), sizeof(struct __ns1__SetObjectAccessControlPolicy), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__SetObjectAccessControlPolicy(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__SetObjectAccessControlPolicy && soap->error == 3)
    if (soap_in_PointerTo_ns1__SetObjectAccessControlPolicy(soap, "ns1:SetObjectAccessControlPolicy", &a->ns1__SetObjectAccessControlPolicy, ""))
    { soap_flag_ns1__SetObjectAccessControlPolicy--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__SetObjectAccessControlPolicy(struct soap *soap, const struct __ns1__SetObjectAccessControlPolicy *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__SetObjectAccessControlPolicy(soap, tag?tag:"-ns1:SetObjectAccessControlPolicy", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__SetObjectAccessControlPolicy * soap_get___ns1__SetObjectAccessControlPolicy(struct soap *soap, struct __ns1__SetObjectAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__SetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__SetObjectAccessControlPolicy * soap_instantiate___ns1__SetObjectAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (131), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__SetObjectAccessControlPolicy);
  if (size)
   *size = sizeof(struct __ns1__SetObjectAccessControlPolicy);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__SetObjectAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__SetObjectAccessControlPolicy);
 }
  ;
 return (struct __ns1__SetObjectAccessControlPolicy*)cp->ptr;
}

 void soap_copy___ns1__SetObjectAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__SetObjectAccessControlPolicy*)p = *(struct __ns1__SetObjectAccessControlPolicy*)q;
}

 void soap_default___ns1__GetBucketAccessControlPolicy(struct soap *soap, struct __ns1__GetBucketAccessControlPolicy *a)
{
 (void)soap; (void)a;
 a->ns1__GetBucketAccessControlPolicy = __null;
}

 void soap_serialize___ns1__GetBucketAccessControlPolicy(struct soap *soap, const struct __ns1__GetBucketAccessControlPolicy *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicy(soap, &a->ns1__GetBucketAccessControlPolicy);
}

 int soap_out___ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, const struct __ns1__GetBucketAccessControlPolicy *a, const char *type)
{
 if (soap_out_PointerTo_ns1__GetBucketAccessControlPolicy(soap, "ns1:GetBucketAccessControlPolicy", -1, &a->ns1__GetBucketAccessControlPolicy, ""))
  return soap->error;
 return 0;
}

 struct __ns1__GetBucketAccessControlPolicy * soap_in___ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, struct __ns1__GetBucketAccessControlPolicy *a, const char *type)
{
 size_t soap_flag_ns1__GetBucketAccessControlPolicy = 1;
 short soap_flag;
 a = (struct __ns1__GetBucketAccessControlPolicy *)soap_id_enter(soap, "", a, (127), sizeof(struct __ns1__GetBucketAccessControlPolicy), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__GetBucketAccessControlPolicy(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__GetBucketAccessControlPolicy && soap->error == 3)
    if (soap_in_PointerTo_ns1__GetBucketAccessControlPolicy(soap, "ns1:GetBucketAccessControlPolicy", &a->ns1__GetBucketAccessControlPolicy, ""))
    { soap_flag_ns1__GetBucketAccessControlPolicy--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__GetBucketAccessControlPolicy(struct soap *soap, const struct __ns1__GetBucketAccessControlPolicy *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__GetBucketAccessControlPolicy(soap, tag?tag:"-ns1:GetBucketAccessControlPolicy", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__GetBucketAccessControlPolicy * soap_get___ns1__GetBucketAccessControlPolicy(struct soap *soap, struct __ns1__GetBucketAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__GetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__GetBucketAccessControlPolicy * soap_instantiate___ns1__GetBucketAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (127), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__GetBucketAccessControlPolicy);
  if (size)
   *size = sizeof(struct __ns1__GetBucketAccessControlPolicy);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__GetBucketAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__GetBucketAccessControlPolicy);
 }
  ;
 return (struct __ns1__GetBucketAccessControlPolicy*)cp->ptr;
}

 void soap_copy___ns1__GetBucketAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__GetBucketAccessControlPolicy*)p = *(struct __ns1__GetBucketAccessControlPolicy*)q;
}

 void soap_default___ns1__GetObjectAccessControlPolicy(struct soap *soap, struct __ns1__GetObjectAccessControlPolicy *a)
{
 (void)soap; (void)a;
 a->ns1__GetObjectAccessControlPolicy = __null;
}

 void soap_serialize___ns1__GetObjectAccessControlPolicy(struct soap *soap, const struct __ns1__GetObjectAccessControlPolicy *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicy(soap, &a->ns1__GetObjectAccessControlPolicy);
}

 int soap_out___ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, const struct __ns1__GetObjectAccessControlPolicy *a, const char *type)
{
 if (soap_out_PointerTo_ns1__GetObjectAccessControlPolicy(soap, "ns1:GetObjectAccessControlPolicy", -1, &a->ns1__GetObjectAccessControlPolicy, ""))
  return soap->error;
 return 0;
}

 struct __ns1__GetObjectAccessControlPolicy * soap_in___ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, struct __ns1__GetObjectAccessControlPolicy *a, const char *type)
{
 size_t soap_flag_ns1__GetObjectAccessControlPolicy = 1;
 short soap_flag;
 a = (struct __ns1__GetObjectAccessControlPolicy *)soap_id_enter(soap, "", a, (123), sizeof(struct __ns1__GetObjectAccessControlPolicy), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__GetObjectAccessControlPolicy(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__GetObjectAccessControlPolicy && soap->error == 3)
    if (soap_in_PointerTo_ns1__GetObjectAccessControlPolicy(soap, "ns1:GetObjectAccessControlPolicy", &a->ns1__GetObjectAccessControlPolicy, ""))
    { soap_flag_ns1__GetObjectAccessControlPolicy--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__GetObjectAccessControlPolicy(struct soap *soap, const struct __ns1__GetObjectAccessControlPolicy *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__GetObjectAccessControlPolicy(soap, tag?tag:"-ns1:GetObjectAccessControlPolicy", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__GetObjectAccessControlPolicy * soap_get___ns1__GetObjectAccessControlPolicy(struct soap *soap, struct __ns1__GetObjectAccessControlPolicy *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__GetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__GetObjectAccessControlPolicy * soap_instantiate___ns1__GetObjectAccessControlPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (123), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__GetObjectAccessControlPolicy);
  if (size)
   *size = sizeof(struct __ns1__GetObjectAccessControlPolicy);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__GetObjectAccessControlPolicy[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__GetObjectAccessControlPolicy);
 }
  ;
 return (struct __ns1__GetObjectAccessControlPolicy*)cp->ptr;
}

 void soap_copy___ns1__GetObjectAccessControlPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__GetObjectAccessControlPolicy*)p = *(struct __ns1__GetObjectAccessControlPolicy*)q;
}

 void soap_default___ns1__DeleteBucket(struct soap *soap, struct __ns1__DeleteBucket *a)
{
 (void)soap; (void)a;
 a->ns1__DeleteBucket = __null;
}

 void soap_serialize___ns1__DeleteBucket(struct soap *soap, const struct __ns1__DeleteBucket *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__DeleteBucket(soap, &a->ns1__DeleteBucket);
}

 int soap_out___ns1__DeleteBucket(struct soap *soap, const char *tag, int id, const struct __ns1__DeleteBucket *a, const char *type)
{
 if (soap_out_PointerTo_ns1__DeleteBucket(soap, "ns1:DeleteBucket", -1, &a->ns1__DeleteBucket, ""))
  return soap->error;
 return 0;
}

 struct __ns1__DeleteBucket * soap_in___ns1__DeleteBucket(struct soap *soap, const char *tag, struct __ns1__DeleteBucket *a, const char *type)
{
 size_t soap_flag_ns1__DeleteBucket = 1;
 short soap_flag;
 a = (struct __ns1__DeleteBucket *)soap_id_enter(soap, "", a, (119), sizeof(struct __ns1__DeleteBucket), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__DeleteBucket(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__DeleteBucket && soap->error == 3)
    if (soap_in_PointerTo_ns1__DeleteBucket(soap, "ns1:DeleteBucket", &a->ns1__DeleteBucket, ""))
    { soap_flag_ns1__DeleteBucket--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__DeleteBucket(struct soap *soap, const struct __ns1__DeleteBucket *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__DeleteBucket(soap, tag?tag:"-ns1:DeleteBucket", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__DeleteBucket * soap_get___ns1__DeleteBucket(struct soap *soap, struct __ns1__DeleteBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__DeleteBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__DeleteBucket * soap_instantiate___ns1__DeleteBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (119), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__DeleteBucket);
  if (size)
   *size = sizeof(struct __ns1__DeleteBucket);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__DeleteBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__DeleteBucket);
 }
  ;
 return (struct __ns1__DeleteBucket*)cp->ptr;
}

 void soap_copy___ns1__DeleteBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__DeleteBucket*)p = *(struct __ns1__DeleteBucket*)q;
}

 void soap_default___ns1__CreateBucket(struct soap *soap, struct __ns1__CreateBucket *a)
{
 (void)soap; (void)a;
 a->ns1__CreateBucket = __null;
}

 void soap_serialize___ns1__CreateBucket(struct soap *soap, const struct __ns1__CreateBucket *a)
{
 (void)soap; (void)a;
 soap_serialize_PointerTo_ns1__CreateBucket(soap, &a->ns1__CreateBucket);
}

 int soap_out___ns1__CreateBucket(struct soap *soap, const char *tag, int id, const struct __ns1__CreateBucket *a, const char *type)
{
 if (soap_out_PointerTo_ns1__CreateBucket(soap, "ns1:CreateBucket", -1, &a->ns1__CreateBucket, ""))
  return soap->error;
 return 0;
}

 struct __ns1__CreateBucket * soap_in___ns1__CreateBucket(struct soap *soap, const char *tag, struct __ns1__CreateBucket *a, const char *type)
{
 size_t soap_flag_ns1__CreateBucket = 1;
 short soap_flag;
 a = (struct __ns1__CreateBucket *)soap_id_enter(soap, "", a, (115), sizeof(struct __ns1__CreateBucket), 0, __null, __null, __null);
 if (!a)
  return __null;
 soap_default___ns1__CreateBucket(soap, a);
  for (soap_flag = 0;; soap_flag = 1)
  { soap->error = 3;
   if (soap_flag_ns1__CreateBucket && soap->error == 3)
    if (soap_in_PointerTo_ns1__CreateBucket(soap, "ns1:CreateBucket", &a->ns1__CreateBucket, ""))
    { soap_flag_ns1__CreateBucket--;
     continue;
    }
   if (soap->error == 3)
    if (soap_flag)
    { soap->error = 0;
     break;
    }
   if (soap->error == 6)
    break;
   if (soap->error)
    return __null;
  }
 return a;
}

 int soap_put___ns1__CreateBucket(struct soap *soap, const struct __ns1__CreateBucket *a, const char *tag, const char *type)
{
 register int id = 0;
 if (soap_out___ns1__CreateBucket(soap, tag?tag:"-ns1:CreateBucket", id, a, type))
  return soap->error;
 return 0;
}

 struct __ns1__CreateBucket * soap_get___ns1__CreateBucket(struct soap *soap, struct __ns1__CreateBucket *p, const char *tag, const char *type)
{
 if ((p = soap_in___ns1__CreateBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 struct __ns1__CreateBucket * soap_instantiate___ns1__CreateBucket(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
 (void)type; (void)arrayType;
 ;
 struct soap_clist *cp = soap_link(soap, __null, (115), n, soap_fdelete);
 if (!cp)
  return __null;
 if (n < 0)
 { cp->ptr = (void*)new (struct __ns1__CreateBucket);
  if (size)
   *size = sizeof(struct __ns1__CreateBucket);
 }
 else
 { cp->ptr = (void*)new (struct __ns1__CreateBucket[n]);
  if (!cp->ptr)
  { soap->error = 20;
   return __null;
  }
  if (size)
   *size = n * sizeof(struct __ns1__CreateBucket);
 }
  ;
 return (struct __ns1__CreateBucket*)cp->ptr;
}

 void soap_copy___ns1__CreateBucket(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
 (void)soap; (void)st; (void)len; (void)n;
 ;
 *(struct __ns1__CreateBucket*)p = *(struct __ns1__CreateBucket*)q;
}
# 15273 "../../AmazonS3/eternusC.cpp"
 void soap_serialize_PointerTo_ns1__CopyObjectResponse(struct soap *soap, _ns1__CopyObjectResponse *const*a)
{
 if (!soap_reference(soap, *a, (71)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__CopyObjectResponse(struct soap *soap, const char *tag, int id, _ns1__CopyObjectResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (71));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__CopyObjectResponse ** soap_in_PointerTo_ns1__CopyObjectResponse(struct soap *soap, const char *tag, _ns1__CopyObjectResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__CopyObjectResponse **)soap_malloc(soap, sizeof(_ns1__CopyObjectResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__CopyObjectResponse *)soap_instantiate__ns1__CopyObjectResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__CopyObjectResponse ** p = (_ns1__CopyObjectResponse **)soap_id_lookup(soap, soap->href, (void**)a, (71), sizeof(_ns1__CopyObjectResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__CopyObjectResponse(struct soap *soap, _ns1__CopyObjectResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (173));
 if (soap_out_PointerTo_ns1__CopyObjectResponse(soap, tag?tag:"ns1:CopyObjectResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__CopyObjectResponse ** soap_get_PointerTo_ns1__CopyObjectResponse(struct soap *soap, _ns1__CopyObjectResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__CopyObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__CopyObject(struct soap *soap, _ns1__CopyObject *const*a)
{
 if (!soap_reference(soap, *a, (70)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__CopyObject(struct soap *soap, const char *tag, int id, _ns1__CopyObject *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (70));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__CopyObject ** soap_in_PointerTo_ns1__CopyObject(struct soap *soap, const char *tag, _ns1__CopyObject **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__CopyObject **)soap_malloc(soap, sizeof(_ns1__CopyObject *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__CopyObject *)soap_instantiate__ns1__CopyObject(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__CopyObject ** p = (_ns1__CopyObject **)soap_id_lookup(soap, soap->href, (void**)a, (70), sizeof(_ns1__CopyObject), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__CopyObject(struct soap *soap, _ns1__CopyObject *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (172));
 if (soap_out_PointerTo_ns1__CopyObject(soap, tag?tag:"ns1:CopyObject", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__CopyObject ** soap_get_PointerTo_ns1__CopyObject(struct soap *soap, _ns1__CopyObject **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__CopyObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap *soap, _ns1__GetBucketLoggingStatusResponse *const*a)
{
 if (!soap_reference(soap, *a, (44)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap *soap, const char *tag, int id, _ns1__GetBucketLoggingStatusResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (44));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetBucketLoggingStatusResponse ** soap_in_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap *soap, const char *tag, _ns1__GetBucketLoggingStatusResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetBucketLoggingStatusResponse **)soap_malloc(soap, sizeof(_ns1__GetBucketLoggingStatusResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetBucketLoggingStatusResponse *)soap_instantiate__ns1__GetBucketLoggingStatusResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetBucketLoggingStatusResponse ** p = (_ns1__GetBucketLoggingStatusResponse **)soap_id_lookup(soap, soap->href, (void**)a, (44), sizeof(_ns1__GetBucketLoggingStatusResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap *soap, _ns1__GetBucketLoggingStatusResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (169));
 if (soap_out_PointerTo_ns1__GetBucketLoggingStatusResponse(soap, tag?tag:"ns1:GetBucketLoggingStatusResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetBucketLoggingStatusResponse ** soap_get_PointerTo_ns1__GetBucketLoggingStatusResponse(struct soap *soap, _ns1__GetBucketLoggingStatusResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetBucketLoggingStatusResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetBucketLoggingStatus(struct soap *soap, _ns1__GetBucketLoggingStatus *const*a)
{
 if (!soap_reference(soap, *a, (43)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, int id, _ns1__GetBucketLoggingStatus *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (43));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetBucketLoggingStatus ** soap_in_PointerTo_ns1__GetBucketLoggingStatus(struct soap *soap, const char *tag, _ns1__GetBucketLoggingStatus **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetBucketLoggingStatus **)soap_malloc(soap, sizeof(_ns1__GetBucketLoggingStatus *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetBucketLoggingStatus *)soap_instantiate__ns1__GetBucketLoggingStatus(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetBucketLoggingStatus ** p = (_ns1__GetBucketLoggingStatus **)soap_id_lookup(soap, soap->href, (void**)a, (43), sizeof(_ns1__GetBucketLoggingStatus), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetBucketLoggingStatus(struct soap *soap, _ns1__GetBucketLoggingStatus *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (168));
 if (soap_out_PointerTo_ns1__GetBucketLoggingStatus(soap, tag?tag:"ns1:GetBucketLoggingStatus", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetBucketLoggingStatus ** soap_get_PointerTo_ns1__GetBucketLoggingStatus(struct soap *soap, _ns1__GetBucketLoggingStatus **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap *soap, _ns1__SetBucketLoggingStatusResponse *const*a)
{
 if (!soap_reference(soap, *a, (46)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap *soap, const char *tag, int id, _ns1__SetBucketLoggingStatusResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (46));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetBucketLoggingStatusResponse ** soap_in_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap *soap, const char *tag, _ns1__SetBucketLoggingStatusResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetBucketLoggingStatusResponse **)soap_malloc(soap, sizeof(_ns1__SetBucketLoggingStatusResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetBucketLoggingStatusResponse *)soap_instantiate__ns1__SetBucketLoggingStatusResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetBucketLoggingStatusResponse ** p = (_ns1__SetBucketLoggingStatusResponse **)soap_id_lookup(soap, soap->href, (void**)a, (46), sizeof(_ns1__SetBucketLoggingStatusResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap *soap, _ns1__SetBucketLoggingStatusResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (165));
 if (soap_out_PointerTo_ns1__SetBucketLoggingStatusResponse(soap, tag?tag:"ns1:SetBucketLoggingStatusResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetBucketLoggingStatusResponse ** soap_get_PointerTo_ns1__SetBucketLoggingStatusResponse(struct soap *soap, _ns1__SetBucketLoggingStatusResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetBucketLoggingStatusResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetBucketLoggingStatus(struct soap *soap, _ns1__SetBucketLoggingStatus *const*a)
{
 if (!soap_reference(soap, *a, (45)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, int id, _ns1__SetBucketLoggingStatus *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (45));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetBucketLoggingStatus ** soap_in_PointerTo_ns1__SetBucketLoggingStatus(struct soap *soap, const char *tag, _ns1__SetBucketLoggingStatus **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetBucketLoggingStatus **)soap_malloc(soap, sizeof(_ns1__SetBucketLoggingStatus *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetBucketLoggingStatus *)soap_instantiate__ns1__SetBucketLoggingStatus(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetBucketLoggingStatus ** p = (_ns1__SetBucketLoggingStatus **)soap_id_lookup(soap, soap->href, (void**)a, (45), sizeof(_ns1__SetBucketLoggingStatus), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetBucketLoggingStatus(struct soap *soap, _ns1__SetBucketLoggingStatus *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (164));
 if (soap_out_PointerTo_ns1__SetBucketLoggingStatus(soap, tag?tag:"ns1:SetBucketLoggingStatus", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetBucketLoggingStatus ** soap_get_PointerTo_ns1__SetBucketLoggingStatus(struct soap *soap, _ns1__SetBucketLoggingStatus **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetBucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__ListAllMyBucketsResponse(struct soap *soap, _ns1__ListAllMyBucketsResponse *const*a)
{
 if (!soap_reference(soap, *a, (68)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__ListAllMyBucketsResponse(struct soap *soap, const char *tag, int id, _ns1__ListAllMyBucketsResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (68));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__ListAllMyBucketsResponse ** soap_in_PointerTo_ns1__ListAllMyBucketsResponse(struct soap *soap, const char *tag, _ns1__ListAllMyBucketsResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__ListAllMyBucketsResponse **)soap_malloc(soap, sizeof(_ns1__ListAllMyBucketsResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__ListAllMyBucketsResponse *)soap_instantiate__ns1__ListAllMyBucketsResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__ListAllMyBucketsResponse ** p = (_ns1__ListAllMyBucketsResponse **)soap_id_lookup(soap, soap->href, (void**)a, (68), sizeof(_ns1__ListAllMyBucketsResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__ListAllMyBucketsResponse(struct soap *soap, _ns1__ListAllMyBucketsResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (161));
 if (soap_out_PointerTo_ns1__ListAllMyBucketsResponse(soap, tag?tag:"ns1:ListAllMyBucketsResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__ListAllMyBucketsResponse ** soap_get_PointerTo_ns1__ListAllMyBucketsResponse(struct soap *soap, _ns1__ListAllMyBucketsResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__ListAllMyBucketsResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__ListAllMyBuckets(struct soap *soap, _ns1__ListAllMyBuckets *const*a)
{
 if (!soap_reference(soap, *a, (67)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__ListAllMyBuckets(struct soap *soap, const char *tag, int id, _ns1__ListAllMyBuckets *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (67));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__ListAllMyBuckets ** soap_in_PointerTo_ns1__ListAllMyBuckets(struct soap *soap, const char *tag, _ns1__ListAllMyBuckets **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__ListAllMyBuckets **)soap_malloc(soap, sizeof(_ns1__ListAllMyBuckets *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__ListAllMyBuckets *)soap_instantiate__ns1__ListAllMyBuckets(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__ListAllMyBuckets ** p = (_ns1__ListAllMyBuckets **)soap_id_lookup(soap, soap->href, (void**)a, (67), sizeof(_ns1__ListAllMyBuckets), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__ListAllMyBuckets(struct soap *soap, _ns1__ListAllMyBuckets *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (160));
 if (soap_out_PointerTo_ns1__ListAllMyBuckets(soap, tag?tag:"ns1:ListAllMyBuckets", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__ListAllMyBuckets ** soap_get_PointerTo_ns1__ListAllMyBuckets(struct soap *soap, _ns1__ListAllMyBuckets **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__ListAllMyBuckets(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__ListBucketResponse(struct soap *soap, _ns1__ListBucketResponse *const*a)
{
 if (!soap_reference(soap, *a, (66)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__ListBucketResponse(struct soap *soap, const char *tag, int id, _ns1__ListBucketResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (66));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__ListBucketResponse ** soap_in_PointerTo_ns1__ListBucketResponse(struct soap *soap, const char *tag, _ns1__ListBucketResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__ListBucketResponse **)soap_malloc(soap, sizeof(_ns1__ListBucketResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__ListBucketResponse *)soap_instantiate__ns1__ListBucketResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__ListBucketResponse ** p = (_ns1__ListBucketResponse **)soap_id_lookup(soap, soap->href, (void**)a, (66), sizeof(_ns1__ListBucketResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__ListBucketResponse(struct soap *soap, _ns1__ListBucketResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (157));
 if (soap_out_PointerTo_ns1__ListBucketResponse(soap, tag?tag:"ns1:ListBucketResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__ListBucketResponse ** soap_get_PointerTo_ns1__ListBucketResponse(struct soap *soap, _ns1__ListBucketResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__ListBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__ListBucket(struct soap *soap, _ns1__ListBucket *const*a)
{
 if (!soap_reference(soap, *a, (65)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__ListBucket(struct soap *soap, const char *tag, int id, _ns1__ListBucket *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (65));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__ListBucket ** soap_in_PointerTo_ns1__ListBucket(struct soap *soap, const char *tag, _ns1__ListBucket **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__ListBucket **)soap_malloc(soap, sizeof(_ns1__ListBucket *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__ListBucket *)soap_instantiate__ns1__ListBucket(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__ListBucket ** p = (_ns1__ListBucket **)soap_id_lookup(soap, soap->href, (void**)a, (65), sizeof(_ns1__ListBucket), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__ListBucket(struct soap *soap, _ns1__ListBucket *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (156));
 if (soap_out_PointerTo_ns1__ListBucket(soap, tag?tag:"ns1:ListBucket", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__ListBucket ** soap_get_PointerTo_ns1__ListBucket(struct soap *soap, _ns1__ListBucket **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__ListBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__DeleteObjectResponse(struct soap *soap, _ns1__DeleteObjectResponse *const*a)
{
 if (!soap_reference(soap, *a, (64)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__DeleteObjectResponse(struct soap *soap, const char *tag, int id, _ns1__DeleteObjectResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (64));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__DeleteObjectResponse ** soap_in_PointerTo_ns1__DeleteObjectResponse(struct soap *soap, const char *tag, _ns1__DeleteObjectResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__DeleteObjectResponse **)soap_malloc(soap, sizeof(_ns1__DeleteObjectResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__DeleteObjectResponse *)soap_instantiate__ns1__DeleteObjectResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__DeleteObjectResponse ** p = (_ns1__DeleteObjectResponse **)soap_id_lookup(soap, soap->href, (void**)a, (64), sizeof(_ns1__DeleteObjectResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__DeleteObjectResponse(struct soap *soap, _ns1__DeleteObjectResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (153));
 if (soap_out_PointerTo_ns1__DeleteObjectResponse(soap, tag?tag:"ns1:DeleteObjectResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__DeleteObjectResponse ** soap_get_PointerTo_ns1__DeleteObjectResponse(struct soap *soap, _ns1__DeleteObjectResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__DeleteObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *const*a)
{
 if (!soap_reference(soap, *a, (63)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__DeleteObject(struct soap *soap, const char *tag, int id, _ns1__DeleteObject *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (63));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__DeleteObject ** soap_in_PointerTo_ns1__DeleteObject(struct soap *soap, const char *tag, _ns1__DeleteObject **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__DeleteObject **)soap_malloc(soap, sizeof(_ns1__DeleteObject *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__DeleteObject *)soap_instantiate__ns1__DeleteObject(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__DeleteObject ** p = (_ns1__DeleteObject **)soap_id_lookup(soap, soap->href, (void**)a, (63), sizeof(_ns1__DeleteObject), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (152));
 if (soap_out_PointerTo_ns1__DeleteObject(soap, tag?tag:"ns1:DeleteObject", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__DeleteObject ** soap_get_PointerTo_ns1__DeleteObject(struct soap *soap, _ns1__DeleteObject **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__DeleteObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__PutObjectInlineResponse(struct soap *soap, _ns1__PutObjectInlineResponse *const*a)
{
 if (!soap_reference(soap, *a, (62)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__PutObjectInlineResponse(struct soap *soap, const char *tag, int id, _ns1__PutObjectInlineResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (62));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__PutObjectInlineResponse ** soap_in_PointerTo_ns1__PutObjectInlineResponse(struct soap *soap, const char *tag, _ns1__PutObjectInlineResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__PutObjectInlineResponse **)soap_malloc(soap, sizeof(_ns1__PutObjectInlineResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__PutObjectInlineResponse *)soap_instantiate__ns1__PutObjectInlineResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__PutObjectInlineResponse ** p = (_ns1__PutObjectInlineResponse **)soap_id_lookup(soap, soap->href, (void**)a, (62), sizeof(_ns1__PutObjectInlineResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__PutObjectInlineResponse(struct soap *soap, _ns1__PutObjectInlineResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (149));
 if (soap_out_PointerTo_ns1__PutObjectInlineResponse(soap, tag?tag:"ns1:PutObjectInlineResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__PutObjectInlineResponse ** soap_get_PointerTo_ns1__PutObjectInlineResponse(struct soap *soap, _ns1__PutObjectInlineResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__PutObjectInlineResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__PutObjectInline(struct soap *soap, _ns1__PutObjectInline *const*a)
{
 if (!soap_reference(soap, *a, (61)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__PutObjectInline(struct soap *soap, const char *tag, int id, _ns1__PutObjectInline *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (61));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__PutObjectInline ** soap_in_PointerTo_ns1__PutObjectInline(struct soap *soap, const char *tag, _ns1__PutObjectInline **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__PutObjectInline **)soap_malloc(soap, sizeof(_ns1__PutObjectInline *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__PutObjectInline *)soap_instantiate__ns1__PutObjectInline(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__PutObjectInline ** p = (_ns1__PutObjectInline **)soap_id_lookup(soap, soap->href, (void**)a, (61), sizeof(_ns1__PutObjectInline), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__PutObjectInline(struct soap *soap, _ns1__PutObjectInline *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (148));
 if (soap_out_PointerTo_ns1__PutObjectInline(soap, tag?tag:"ns1:PutObjectInline", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__PutObjectInline ** soap_get_PointerTo_ns1__PutObjectInline(struct soap *soap, _ns1__PutObjectInline **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__PutObjectInline(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__PutObjectResponse(struct soap *soap, _ns1__PutObjectResponse *const*a)
{
 if (!soap_reference(soap, *a, (60)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__PutObjectResponse(struct soap *soap, const char *tag, int id, _ns1__PutObjectResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (60));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__PutObjectResponse ** soap_in_PointerTo_ns1__PutObjectResponse(struct soap *soap, const char *tag, _ns1__PutObjectResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__PutObjectResponse **)soap_malloc(soap, sizeof(_ns1__PutObjectResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__PutObjectResponse *)soap_instantiate__ns1__PutObjectResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__PutObjectResponse ** p = (_ns1__PutObjectResponse **)soap_id_lookup(soap, soap->href, (void**)a, (60), sizeof(_ns1__PutObjectResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__PutObjectResponse(struct soap *soap, _ns1__PutObjectResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (145));
 if (soap_out_PointerTo_ns1__PutObjectResponse(soap, tag?tag:"ns1:PutObjectResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__PutObjectResponse ** soap_get_PointerTo_ns1__PutObjectResponse(struct soap *soap, _ns1__PutObjectResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__PutObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__PutObject(struct soap *soap, _ns1__PutObject *const*a)
{
 if (!soap_reference(soap, *a, (59)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__PutObject(struct soap *soap, const char *tag, int id, _ns1__PutObject *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (59));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__PutObject ** soap_in_PointerTo_ns1__PutObject(struct soap *soap, const char *tag, _ns1__PutObject **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__PutObject **)soap_malloc(soap, sizeof(_ns1__PutObject *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__PutObject *)soap_instantiate__ns1__PutObject(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__PutObject ** p = (_ns1__PutObject **)soap_id_lookup(soap, soap->href, (void**)a, (59), sizeof(_ns1__PutObject), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__PutObject(struct soap *soap, _ns1__PutObject *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (144));
 if (soap_out_PointerTo_ns1__PutObject(soap, tag?tag:"ns1:PutObject", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__PutObject ** soap_get_PointerTo_ns1__PutObject(struct soap *soap, _ns1__PutObject **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__PutObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObjectExtendedResponse(struct soap *soap, _ns1__GetObjectExtendedResponse *const*a)
{
 if (!soap_reference(soap, *a, (58)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObjectExtendedResponse(struct soap *soap, const char *tag, int id, _ns1__GetObjectExtendedResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (58));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObjectExtendedResponse ** soap_in_PointerTo_ns1__GetObjectExtendedResponse(struct soap *soap, const char *tag, _ns1__GetObjectExtendedResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObjectExtendedResponse **)soap_malloc(soap, sizeof(_ns1__GetObjectExtendedResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObjectExtendedResponse *)soap_instantiate__ns1__GetObjectExtendedResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObjectExtendedResponse ** p = (_ns1__GetObjectExtendedResponse **)soap_id_lookup(soap, soap->href, (void**)a, (58), sizeof(_ns1__GetObjectExtendedResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObjectExtendedResponse(struct soap *soap, _ns1__GetObjectExtendedResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (141));
 if (soap_out_PointerTo_ns1__GetObjectExtendedResponse(soap, tag?tag:"ns1:GetObjectExtendedResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObjectExtendedResponse ** soap_get_PointerTo_ns1__GetObjectExtendedResponse(struct soap *soap, _ns1__GetObjectExtendedResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObjectExtendedResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObjectExtended(struct soap *soap, _ns1__GetObjectExtended *const*a)
{
 if (!soap_reference(soap, *a, (57)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObjectExtended(struct soap *soap, const char *tag, int id, _ns1__GetObjectExtended *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (57));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObjectExtended ** soap_in_PointerTo_ns1__GetObjectExtended(struct soap *soap, const char *tag, _ns1__GetObjectExtended **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObjectExtended **)soap_malloc(soap, sizeof(_ns1__GetObjectExtended *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObjectExtended *)soap_instantiate__ns1__GetObjectExtended(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObjectExtended ** p = (_ns1__GetObjectExtended **)soap_id_lookup(soap, soap->href, (void**)a, (57), sizeof(_ns1__GetObjectExtended), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObjectExtended(struct soap *soap, _ns1__GetObjectExtended *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (140));
 if (soap_out_PointerTo_ns1__GetObjectExtended(soap, tag?tag:"ns1:GetObjectExtended", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObjectExtended ** soap_get_PointerTo_ns1__GetObjectExtended(struct soap *soap, _ns1__GetObjectExtended **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObjectExtended(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObjectResponse(struct soap *soap, _ns1__GetObjectResponse *const*a)
{
 if (!soap_reference(soap, *a, (56)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObjectResponse(struct soap *soap, const char *tag, int id, _ns1__GetObjectResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (56));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObjectResponse ** soap_in_PointerTo_ns1__GetObjectResponse(struct soap *soap, const char *tag, _ns1__GetObjectResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObjectResponse **)soap_malloc(soap, sizeof(_ns1__GetObjectResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObjectResponse *)soap_instantiate__ns1__GetObjectResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObjectResponse ** p = (_ns1__GetObjectResponse **)soap_id_lookup(soap, soap->href, (void**)a, (56), sizeof(_ns1__GetObjectResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObjectResponse(struct soap *soap, _ns1__GetObjectResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (137));
 if (soap_out_PointerTo_ns1__GetObjectResponse(soap, tag?tag:"ns1:GetObjectResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObjectResponse ** soap_get_PointerTo_ns1__GetObjectResponse(struct soap *soap, _ns1__GetObjectResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObjectResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObject(struct soap *soap, _ns1__GetObject *const*a)
{
 if (!soap_reference(soap, *a, (55)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObject(struct soap *soap, const char *tag, int id, _ns1__GetObject *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (55));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObject ** soap_in_PointerTo_ns1__GetObject(struct soap *soap, const char *tag, _ns1__GetObject **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObject **)soap_malloc(soap, sizeof(_ns1__GetObject *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObject *)soap_instantiate__ns1__GetObject(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObject ** p = (_ns1__GetObject **)soap_id_lookup(soap, soap->href, (void**)a, (55), sizeof(_ns1__GetObject), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObject(struct soap *soap, _ns1__GetObject *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (136));
 if (soap_out_PointerTo_ns1__GetObject(soap, tag?tag:"ns1:GetObject", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObject ** soap_get_PointerTo_ns1__GetObject(struct soap *soap, _ns1__GetObject **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObject(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__SetBucketAccessControlPolicyResponse *const*a)
{
 if (!soap_reference(soap, *a, (54)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, _ns1__SetBucketAccessControlPolicyResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (54));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetBucketAccessControlPolicyResponse ** soap_in_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__SetBucketAccessControlPolicyResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetBucketAccessControlPolicyResponse **)soap_malloc(soap, sizeof(_ns1__SetBucketAccessControlPolicyResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetBucketAccessControlPolicyResponse *)soap_instantiate__ns1__SetBucketAccessControlPolicyResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetBucketAccessControlPolicyResponse ** p = (_ns1__SetBucketAccessControlPolicyResponse **)soap_id_lookup(soap, soap->href, (void**)a, (54), sizeof(_ns1__SetBucketAccessControlPolicyResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__SetBucketAccessControlPolicyResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (133));
 if (soap_out_PointerTo_ns1__SetBucketAccessControlPolicyResponse(soap, tag?tag:"ns1:SetBucketAccessControlPolicyResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetBucketAccessControlPolicyResponse ** soap_get_PointerTo_ns1__SetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__SetBucketAccessControlPolicyResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetBucketAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap *soap, _ns1__SetBucketAccessControlPolicy *const*a)
{
 if (!soap_reference(soap, *a, (53)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, _ns1__SetBucketAccessControlPolicy *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (53));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetBucketAccessControlPolicy ** soap_in_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *tag, _ns1__SetBucketAccessControlPolicy **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetBucketAccessControlPolicy **)soap_malloc(soap, sizeof(_ns1__SetBucketAccessControlPolicy *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetBucketAccessControlPolicy *)soap_instantiate__ns1__SetBucketAccessControlPolicy(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetBucketAccessControlPolicy ** p = (_ns1__SetBucketAccessControlPolicy **)soap_id_lookup(soap, soap->href, (void**)a, (53), sizeof(_ns1__SetBucketAccessControlPolicy), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap *soap, _ns1__SetBucketAccessControlPolicy *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (132));
 if (soap_out_PointerTo_ns1__SetBucketAccessControlPolicy(soap, tag?tag:"ns1:SetBucketAccessControlPolicy", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetBucketAccessControlPolicy ** soap_get_PointerTo_ns1__SetBucketAccessControlPolicy(struct soap *soap, _ns1__SetBucketAccessControlPolicy **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__SetObjectAccessControlPolicyResponse *const*a)
{
 if (!soap_reference(soap, *a, (52)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, _ns1__SetObjectAccessControlPolicyResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (52));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetObjectAccessControlPolicyResponse ** soap_in_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__SetObjectAccessControlPolicyResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetObjectAccessControlPolicyResponse **)soap_malloc(soap, sizeof(_ns1__SetObjectAccessControlPolicyResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetObjectAccessControlPolicyResponse *)soap_instantiate__ns1__SetObjectAccessControlPolicyResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetObjectAccessControlPolicyResponse ** p = (_ns1__SetObjectAccessControlPolicyResponse **)soap_id_lookup(soap, soap->href, (void**)a, (52), sizeof(_ns1__SetObjectAccessControlPolicyResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__SetObjectAccessControlPolicyResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (129));
 if (soap_out_PointerTo_ns1__SetObjectAccessControlPolicyResponse(soap, tag?tag:"ns1:SetObjectAccessControlPolicyResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetObjectAccessControlPolicyResponse ** soap_get_PointerTo_ns1__SetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__SetObjectAccessControlPolicyResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetObjectAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap *soap, _ns1__SetObjectAccessControlPolicy *const*a)
{
 if (!soap_reference(soap, *a, (51)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, _ns1__SetObjectAccessControlPolicy *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (51));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__SetObjectAccessControlPolicy ** soap_in_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *tag, _ns1__SetObjectAccessControlPolicy **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__SetObjectAccessControlPolicy **)soap_malloc(soap, sizeof(_ns1__SetObjectAccessControlPolicy *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__SetObjectAccessControlPolicy *)soap_instantiate__ns1__SetObjectAccessControlPolicy(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__SetObjectAccessControlPolicy ** p = (_ns1__SetObjectAccessControlPolicy **)soap_id_lookup(soap, soap->href, (void**)a, (51), sizeof(_ns1__SetObjectAccessControlPolicy), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap *soap, _ns1__SetObjectAccessControlPolicy *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (128));
 if (soap_out_PointerTo_ns1__SetObjectAccessControlPolicy(soap, tag?tag:"ns1:SetObjectAccessControlPolicy", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__SetObjectAccessControlPolicy ** soap_get_PointerTo_ns1__SetObjectAccessControlPolicy(struct soap *soap, _ns1__SetObjectAccessControlPolicy **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__SetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__GetBucketAccessControlPolicyResponse *const*a)
{
 if (!soap_reference(soap, *a, (50)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, _ns1__GetBucketAccessControlPolicyResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (50));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetBucketAccessControlPolicyResponse ** soap_in_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__GetBucketAccessControlPolicyResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetBucketAccessControlPolicyResponse **)soap_malloc(soap, sizeof(_ns1__GetBucketAccessControlPolicyResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetBucketAccessControlPolicyResponse *)soap_instantiate__ns1__GetBucketAccessControlPolicyResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetBucketAccessControlPolicyResponse ** p = (_ns1__GetBucketAccessControlPolicyResponse **)soap_id_lookup(soap, soap->href, (void**)a, (50), sizeof(_ns1__GetBucketAccessControlPolicyResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__GetBucketAccessControlPolicyResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (125));
 if (soap_out_PointerTo_ns1__GetBucketAccessControlPolicyResponse(soap, tag?tag:"ns1:GetBucketAccessControlPolicyResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetBucketAccessControlPolicyResponse ** soap_get_PointerTo_ns1__GetBucketAccessControlPolicyResponse(struct soap *soap, _ns1__GetBucketAccessControlPolicyResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetBucketAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap *soap, _ns1__GetBucketAccessControlPolicy *const*a)
{
 if (!soap_reference(soap, *a, (49)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, int id, _ns1__GetBucketAccessControlPolicy *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (49));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetBucketAccessControlPolicy ** soap_in_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *tag, _ns1__GetBucketAccessControlPolicy **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetBucketAccessControlPolicy **)soap_malloc(soap, sizeof(_ns1__GetBucketAccessControlPolicy *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetBucketAccessControlPolicy *)soap_instantiate__ns1__GetBucketAccessControlPolicy(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetBucketAccessControlPolicy ** p = (_ns1__GetBucketAccessControlPolicy **)soap_id_lookup(soap, soap->href, (void**)a, (49), sizeof(_ns1__GetBucketAccessControlPolicy), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap *soap, _ns1__GetBucketAccessControlPolicy *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (124));
 if (soap_out_PointerTo_ns1__GetBucketAccessControlPolicy(soap, tag?tag:"ns1:GetBucketAccessControlPolicy", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetBucketAccessControlPolicy ** soap_get_PointerTo_ns1__GetBucketAccessControlPolicy(struct soap *soap, _ns1__GetBucketAccessControlPolicy **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetBucketAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__GetObjectAccessControlPolicyResponse *const*a)
{
 if (!soap_reference(soap, *a, (48)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, int id, _ns1__GetObjectAccessControlPolicyResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (48));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObjectAccessControlPolicyResponse ** soap_in_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, const char *tag, _ns1__GetObjectAccessControlPolicyResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObjectAccessControlPolicyResponse **)soap_malloc(soap, sizeof(_ns1__GetObjectAccessControlPolicyResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObjectAccessControlPolicyResponse *)soap_instantiate__ns1__GetObjectAccessControlPolicyResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObjectAccessControlPolicyResponse ** p = (_ns1__GetObjectAccessControlPolicyResponse **)soap_id_lookup(soap, soap->href, (void**)a, (48), sizeof(_ns1__GetObjectAccessControlPolicyResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__GetObjectAccessControlPolicyResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (121));
 if (soap_out_PointerTo_ns1__GetObjectAccessControlPolicyResponse(soap, tag?tag:"ns1:GetObjectAccessControlPolicyResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObjectAccessControlPolicyResponse ** soap_get_PointerTo_ns1__GetObjectAccessControlPolicyResponse(struct soap *soap, _ns1__GetObjectAccessControlPolicyResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObjectAccessControlPolicyResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap *soap, _ns1__GetObjectAccessControlPolicy *const*a)
{
 if (!soap_reference(soap, *a, (47)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, int id, _ns1__GetObjectAccessControlPolicy *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (47));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__GetObjectAccessControlPolicy ** soap_in_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *tag, _ns1__GetObjectAccessControlPolicy **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__GetObjectAccessControlPolicy **)soap_malloc(soap, sizeof(_ns1__GetObjectAccessControlPolicy *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__GetObjectAccessControlPolicy *)soap_instantiate__ns1__GetObjectAccessControlPolicy(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__GetObjectAccessControlPolicy ** p = (_ns1__GetObjectAccessControlPolicy **)soap_id_lookup(soap, soap->href, (void**)a, (47), sizeof(_ns1__GetObjectAccessControlPolicy), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap *soap, _ns1__GetObjectAccessControlPolicy *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (120));
 if (soap_out_PointerTo_ns1__GetObjectAccessControlPolicy(soap, tag?tag:"ns1:GetObjectAccessControlPolicy", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__GetObjectAccessControlPolicy ** soap_get_PointerTo_ns1__GetObjectAccessControlPolicy(struct soap *soap, _ns1__GetObjectAccessControlPolicy **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__GetObjectAccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__DeleteBucketResponse(struct soap *soap, _ns1__DeleteBucketResponse *const*a)
{
 if (!soap_reference(soap, *a, (42)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__DeleteBucketResponse(struct soap *soap, const char *tag, int id, _ns1__DeleteBucketResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (42));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__DeleteBucketResponse ** soap_in_PointerTo_ns1__DeleteBucketResponse(struct soap *soap, const char *tag, _ns1__DeleteBucketResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__DeleteBucketResponse **)soap_malloc(soap, sizeof(_ns1__DeleteBucketResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__DeleteBucketResponse *)soap_instantiate__ns1__DeleteBucketResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__DeleteBucketResponse ** p = (_ns1__DeleteBucketResponse **)soap_id_lookup(soap, soap->href, (void**)a, (42), sizeof(_ns1__DeleteBucketResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__DeleteBucketResponse(struct soap *soap, _ns1__DeleteBucketResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (117));
 if (soap_out_PointerTo_ns1__DeleteBucketResponse(soap, tag?tag:"ns1:DeleteBucketResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__DeleteBucketResponse ** soap_get_PointerTo_ns1__DeleteBucketResponse(struct soap *soap, _ns1__DeleteBucketResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__DeleteBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__DeleteBucket(struct soap *soap, _ns1__DeleteBucket *const*a)
{
 if (!soap_reference(soap, *a, (41)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__DeleteBucket(struct soap *soap, const char *tag, int id, _ns1__DeleteBucket *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (41));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__DeleteBucket ** soap_in_PointerTo_ns1__DeleteBucket(struct soap *soap, const char *tag, _ns1__DeleteBucket **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__DeleteBucket **)soap_malloc(soap, sizeof(_ns1__DeleteBucket *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__DeleteBucket *)soap_instantiate__ns1__DeleteBucket(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__DeleteBucket ** p = (_ns1__DeleteBucket **)soap_id_lookup(soap, soap->href, (void**)a, (41), sizeof(_ns1__DeleteBucket), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__DeleteBucket(struct soap *soap, _ns1__DeleteBucket *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (116));
 if (soap_out_PointerTo_ns1__DeleteBucket(soap, tag?tag:"ns1:DeleteBucket", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__DeleteBucket ** soap_get_PointerTo_ns1__DeleteBucket(struct soap *soap, _ns1__DeleteBucket **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__DeleteBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__CreateBucketResponse(struct soap *soap, _ns1__CreateBucketResponse *const*a)
{
 if (!soap_reference(soap, *a, (40)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__CreateBucketResponse(struct soap *soap, const char *tag, int id, _ns1__CreateBucketResponse *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (40));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__CreateBucketResponse ** soap_in_PointerTo_ns1__CreateBucketResponse(struct soap *soap, const char *tag, _ns1__CreateBucketResponse **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__CreateBucketResponse **)soap_malloc(soap, sizeof(_ns1__CreateBucketResponse *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__CreateBucketResponse *)soap_instantiate__ns1__CreateBucketResponse(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__CreateBucketResponse ** p = (_ns1__CreateBucketResponse **)soap_id_lookup(soap, soap->href, (void**)a, (40), sizeof(_ns1__CreateBucketResponse), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__CreateBucketResponse(struct soap *soap, _ns1__CreateBucketResponse *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (113));
 if (soap_out_PointerTo_ns1__CreateBucketResponse(soap, tag?tag:"ns1:CreateBucketResponse", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__CreateBucketResponse ** soap_get_PointerTo_ns1__CreateBucketResponse(struct soap *soap, _ns1__CreateBucketResponse **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__CreateBucketResponse(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTo_ns1__CreateBucket(struct soap *soap, _ns1__CreateBucket *const*a)
{
 if (!soap_reference(soap, *a, (39)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTo_ns1__CreateBucket(struct soap *soap, const char *tag, int id, _ns1__CreateBucket *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (39));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 _ns1__CreateBucket ** soap_in_PointerTo_ns1__CreateBucket(struct soap *soap, const char *tag, _ns1__CreateBucket **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (_ns1__CreateBucket **)soap_malloc(soap, sizeof(_ns1__CreateBucket *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (_ns1__CreateBucket *)soap_instantiate__ns1__CreateBucket(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { _ns1__CreateBucket ** p = (_ns1__CreateBucket **)soap_id_lookup(soap, soap->href, (void**)a, (39), sizeof(_ns1__CreateBucket), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTo_ns1__CreateBucket(struct soap *soap, _ns1__CreateBucket *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (112));
 if (soap_out_PointerTo_ns1__CreateBucket(soap, tag?tag:"ns1:CreateBucket", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 _ns1__CreateBucket ** soap_get_PointerTo_ns1__CreateBucket(struct soap *soap, _ns1__CreateBucket **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTo_ns1__CreateBucket(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
 if (*a)
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, (8));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 xsd__base64Binary ** soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, (8), sizeof(xsd__base64Binary), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (111));
 if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 xsd__base64Binary ** soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__CopyObjectResult(struct soap *soap, ns1__CopyObjectResult *const*a)
{
 if (!soap_reference(soap, *a, (37)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__CopyObjectResult(struct soap *soap, const char *tag, int id, ns1__CopyObjectResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (37));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__CopyObjectResult ** soap_in_PointerTons1__CopyObjectResult(struct soap *soap, const char *tag, ns1__CopyObjectResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__CopyObjectResult **)soap_malloc(soap, sizeof(ns1__CopyObjectResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__CopyObjectResult *)soap_instantiate_ns1__CopyObjectResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__CopyObjectResult ** p = (ns1__CopyObjectResult **)soap_id_lookup(soap, soap->href, (void**)a, (37), sizeof(ns1__CopyObjectResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__CopyObjectResult(struct soap *soap, ns1__CopyObjectResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (110));
 if (soap_out_PointerTons1__CopyObjectResult(soap, tag?tag:"ns1:CopyObjectResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__CopyObjectResult ** soap_get_PointerTons1__CopyObjectResult(struct soap *soap, ns1__CopyObjectResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__CopyObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__MetadataDirective(struct soap *soap, enum ns1__MetadataDirective *const*a)
{
 soap_reference(soap, *a, (74));
}

 int soap_out_PointerTons1__MetadataDirective(struct soap *soap, const char *tag, int id, enum ns1__MetadataDirective *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (74));
 if (id < 0)
  return soap->error;
 return soap_out_ns1__MetadataDirective(soap, tag, id, *a, type);
}

 enum ns1__MetadataDirective ** soap_in_PointerTons1__MetadataDirective(struct soap *soap, const char *tag, enum ns1__MetadataDirective **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (enum ns1__MetadataDirective **)soap_malloc(soap, sizeof(enum ns1__MetadataDirective *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_ns1__MetadataDirective(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (enum ns1__MetadataDirective **)soap_id_lookup(soap, soap->href, (void**)a, (74), sizeof(enum ns1__MetadataDirective), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__MetadataDirective(struct soap *soap, enum ns1__MetadataDirective *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (109));
 if (soap_out_PointerTons1__MetadataDirective(soap, tag?tag:"ns1:MetadataDirective", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__MetadataDirective ** soap_get_PointerTons1__MetadataDirective(struct soap *soap, enum ns1__MetadataDirective **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__MetadataDirective(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__ListAllMyBucketsResult(struct soap *soap, ns1__ListAllMyBucketsResult *const*a)
{
 if (!soap_reference(soap, *a, (35)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__ListAllMyBucketsResult(struct soap *soap, const char *tag, int id, ns1__ListAllMyBucketsResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (35));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__ListAllMyBucketsResult ** soap_in_PointerTons1__ListAllMyBucketsResult(struct soap *soap, const char *tag, ns1__ListAllMyBucketsResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListAllMyBucketsResult **)soap_malloc(soap, sizeof(ns1__ListAllMyBucketsResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__ListAllMyBucketsResult *)soap_instantiate_ns1__ListAllMyBucketsResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__ListAllMyBucketsResult ** p = (ns1__ListAllMyBucketsResult **)soap_id_lookup(soap, soap->href, (void**)a, (35), sizeof(ns1__ListAllMyBucketsResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__ListAllMyBucketsResult(struct soap *soap, ns1__ListAllMyBucketsResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (108));
 if (soap_out_PointerTons1__ListAllMyBucketsResult(soap, tag?tag:"ns1:ListAllMyBucketsResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListAllMyBucketsResult ** soap_get_PointerTons1__ListAllMyBucketsResult(struct soap *soap, ns1__ListAllMyBucketsResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__ListAllMyBucketsResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__ListBucketResult(struct soap *soap, ns1__ListBucketResult *const*a)
{
 if (!soap_reference(soap, *a, (33)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__ListBucketResult(struct soap *soap, const char *tag, int id, ns1__ListBucketResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (33));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__ListBucketResult ** soap_in_PointerTons1__ListBucketResult(struct soap *soap, const char *tag, ns1__ListBucketResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListBucketResult **)soap_malloc(soap, sizeof(ns1__ListBucketResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__ListBucketResult *)soap_instantiate_ns1__ListBucketResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__ListBucketResult ** p = (ns1__ListBucketResult **)soap_id_lookup(soap, soap->href, (void**)a, (33), sizeof(ns1__ListBucketResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__ListBucketResult(struct soap *soap, ns1__ListBucketResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (107));
 if (soap_out_PointerTons1__ListBucketResult(soap, tag?tag:"ns1:ListBucketResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListBucketResult ** soap_get_PointerTons1__ListBucketResult(struct soap *soap, ns1__ListBucketResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__ListBucketResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
 soap_reference(soap, *a, (1));
}

 int soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (1));
 if (id < 0)
  return soap->error;
 return soap_out_int(soap, tag, id, *a, type);
}

 int ** soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_int(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (int **)soap_id_lookup(soap, soap->href, (void**)a, (1), sizeof(int), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (106));
 if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 int ** soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToint(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__PutObjectResult(struct soap *soap, ns1__PutObjectResult *const*a)
{
 if (!soap_reference(soap, *a, (30)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__PutObjectResult(struct soap *soap, const char *tag, int id, ns1__PutObjectResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (30));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__PutObjectResult ** soap_in_PointerTons1__PutObjectResult(struct soap *soap, const char *tag, ns1__PutObjectResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__PutObjectResult **)soap_malloc(soap, sizeof(ns1__PutObjectResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__PutObjectResult *)soap_instantiate_ns1__PutObjectResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__PutObjectResult ** p = (ns1__PutObjectResult **)soap_id_lookup(soap, soap->href, (void**)a, (30), sizeof(ns1__PutObjectResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__PutObjectResult(struct soap *soap, ns1__PutObjectResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (105));
 if (soap_out_PointerTons1__PutObjectResult(soap, tag?tag:"ns1:PutObjectResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__PutObjectResult ** soap_get_PointerTons1__PutObjectResult(struct soap *soap, ns1__PutObjectResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__PutObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__StorageClass(struct soap *soap, enum ns1__StorageClass *const*a)
{
 soap_reference(soap, *a, (73));
}

 int soap_out_PointerTons1__StorageClass(struct soap *soap, const char *tag, int id, enum ns1__StorageClass *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (73));
 if (id < 0)
  return soap->error;
 return soap_out_ns1__StorageClass(soap, tag, id, *a, type);
}

 enum ns1__StorageClass ** soap_in_PointerTons1__StorageClass(struct soap *soap, const char *tag, enum ns1__StorageClass **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (enum ns1__StorageClass **)soap_malloc(soap, sizeof(enum ns1__StorageClass *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_ns1__StorageClass(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (enum ns1__StorageClass **)soap_id_lookup(soap, soap->href, (void**)a, (73), sizeof(enum ns1__StorageClass), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__StorageClass(struct soap *soap, enum ns1__StorageClass *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (104));
 if (soap_out_PointerTons1__StorageClass(soap, tag?tag:"ns1:StorageClass", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 enum ns1__StorageClass ** soap_get_PointerTons1__StorageClass(struct soap *soap, enum ns1__StorageClass **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__StorageClass(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
 soap_reference(soap, *a, (88));
}

 int soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (88));
 if (id < 0)
  return soap->error;
 return soap_out_bool(soap, tag, id, *a, type);
}

 bool ** soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_bool(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, (88), sizeof(bool), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (103));
 if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 bool ** soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTobool(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
 if (!soap_reference(soap, *a, (4)))
  soap_serialize_string(soap, *a);
}

 int soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (4));
 if (id < 0)
  return soap->error;
 return soap_out_string(soap, tag, id, *a, type);
}

 char *** soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_string(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, (4), sizeof(char *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (102));
 if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 char *** soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTostring(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToLONG64(struct soap *soap, long long *const*a)
{
 soap_reference(soap, *a, (85));
}

 int soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, long long *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (85));
 if (id < 0)
  return soap->error;
 return soap_out_LONG64(soap, tag, id, *a, type);
}

 long long ** soap_in_PointerToLONG64(struct soap *soap, const char *tag, long long **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (long long **)soap_malloc(soap, sizeof(long long *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (long long **)soap_id_lookup(soap, soap->href, (void**)a, (85), sizeof(long long), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToLONG64(struct soap *soap, long long *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (101));
 if (soap_out_PointerToLONG64(soap, tag?tag:"long", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 long long ** soap_get_PointerToLONG64(struct soap *soap, long long **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__GetObjectResult(struct soap *soap, ns1__GetObjectResult *const*a)
{
 if (!soap_reference(soap, *a, (29)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__GetObjectResult(struct soap *soap, const char *tag, int id, ns1__GetObjectResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (29));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__GetObjectResult ** soap_in_PointerTons1__GetObjectResult(struct soap *soap, const char *tag, ns1__GetObjectResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__GetObjectResult **)soap_malloc(soap, sizeof(ns1__GetObjectResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__GetObjectResult *)soap_instantiate_ns1__GetObjectResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__GetObjectResult ** p = (ns1__GetObjectResult **)soap_id_lookup(soap, soap->href, (void**)a, (29), sizeof(ns1__GetObjectResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__GetObjectResult(struct soap *soap, ns1__GetObjectResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (100));
 if (soap_out_PointerTons1__GetObjectResult(soap, tag?tag:"ns1:GetObjectResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__GetObjectResult ** soap_get_PointerTons1__GetObjectResult(struct soap *soap, ns1__GetObjectResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__GetObjectResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__AccessControlPolicy(struct soap *soap, ns1__AccessControlPolicy *const*a)
{
 if (!soap_reference(soap, *a, (28)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__AccessControlPolicy(struct soap *soap, const char *tag, int id, ns1__AccessControlPolicy *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (28));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__AccessControlPolicy ** soap_in_PointerTons1__AccessControlPolicy(struct soap *soap, const char *tag, ns1__AccessControlPolicy **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__AccessControlPolicy **)soap_malloc(soap, sizeof(ns1__AccessControlPolicy *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__AccessControlPolicy *)soap_instantiate_ns1__AccessControlPolicy(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__AccessControlPolicy ** p = (ns1__AccessControlPolicy **)soap_id_lookup(soap, soap->href, (void**)a, (28), sizeof(ns1__AccessControlPolicy), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__AccessControlPolicy(struct soap *soap, ns1__AccessControlPolicy *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (99));
 if (soap_out_PointerTons1__AccessControlPolicy(soap, tag?tag:"ns1:AccessControlPolicy", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__AccessControlPolicy ** soap_get_PointerTons1__AccessControlPolicy(struct soap *soap, ns1__AccessControlPolicy **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__AccessControlPolicy(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__BucketLoggingStatus(struct soap *soap, ns1__BucketLoggingStatus *const*a)
{
 if (!soap_reference(soap, *a, (17)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__BucketLoggingStatus(struct soap *soap, const char *tag, int id, ns1__BucketLoggingStatus *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (17));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__BucketLoggingStatus ** soap_in_PointerTons1__BucketLoggingStatus(struct soap *soap, const char *tag, ns1__BucketLoggingStatus **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__BucketLoggingStatus **)soap_malloc(soap, sizeof(ns1__BucketLoggingStatus *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__BucketLoggingStatus *)soap_instantiate_ns1__BucketLoggingStatus(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__BucketLoggingStatus ** p = (ns1__BucketLoggingStatus **)soap_id_lookup(soap, soap->href, (void**)a, (17), sizeof(ns1__BucketLoggingStatus), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__BucketLoggingStatus(struct soap *soap, ns1__BucketLoggingStatus *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (98));
 if (soap_out_PointerTons1__BucketLoggingStatus(soap, tag?tag:"ns1:BucketLoggingStatus", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__BucketLoggingStatus ** soap_get_PointerTons1__BucketLoggingStatus(struct soap *soap, ns1__BucketLoggingStatus **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__BucketLoggingStatus(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__CreateBucketResult(struct soap *soap, ns1__CreateBucketResult *const*a)
{
 if (!soap_reference(soap, *a, (16)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__CreateBucketResult(struct soap *soap, const char *tag, int id, ns1__CreateBucketResult *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (16));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__CreateBucketResult ** soap_in_PointerTons1__CreateBucketResult(struct soap *soap, const char *tag, ns1__CreateBucketResult **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__CreateBucketResult **)soap_malloc(soap, sizeof(ns1__CreateBucketResult *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__CreateBucketResult *)soap_instantiate_ns1__CreateBucketResult(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__CreateBucketResult ** p = (ns1__CreateBucketResult **)soap_id_lookup(soap, soap->href, (void**)a, (16), sizeof(ns1__CreateBucketResult), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__CreateBucketResult(struct soap *soap, ns1__CreateBucketResult *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (97));
 if (soap_out_PointerTons1__CreateBucketResult(soap, tag?tag:"ns1:CreateBucketResult", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__CreateBucketResult ** soap_get_PointerTons1__CreateBucketResult(struct soap *soap, ns1__CreateBucketResult **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__CreateBucketResult(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTotime(struct soap *soap, time_t *const*a)
{
 soap_reference(soap, *a, (84));
}

 int soap_out_PointerTotime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (84));
 if (id < 0)
  return soap->error;
 return soap_out_time(soap, tag, id, *a, type);
}

 time_t ** soap_in_PointerTotime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_time(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, (84), sizeof(time_t), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTotime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (96));
 if (soap_out_PointerTotime(soap, tag?tag:"dateTime", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 time_t ** soap_get_PointerTotime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTotime(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry **const*a)
{
 if (!soap_reference(soap, *a, (94)))
  soap_serialize_PointerTons1__ListAllMyBucketsEntry(soap, *a);
}

 int soap_out_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, int id, ns1__ListAllMyBucketsEntry **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (94));
 if (id < 0)
  return soap->error;
 return soap_out_PointerTons1__ListAllMyBucketsEntry(soap, tag, id, *a, type);
}

 ns1__ListAllMyBucketsEntry *** soap_in_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, ns1__ListAllMyBucketsEntry ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListAllMyBucketsEntry ***)soap_malloc(soap, sizeof(ns1__ListAllMyBucketsEntry **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_PointerTons1__ListAllMyBucketsEntry(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (ns1__ListAllMyBucketsEntry ***)soap_id_lookup(soap, soap->href, (void**)a, (94), sizeof(ns1__ListAllMyBucketsEntry *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (95));
 if (soap_out_PointerToPointerTons1__ListAllMyBucketsEntry(soap, tag?tag:"ns1:ListAllMyBucketsEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListAllMyBucketsEntry *** soap_get_PointerToPointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToPointerTons1__ListAllMyBucketsEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry *const*a)
{
 if (!soap_reference(soap, *a, (34)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, int id, ns1__ListAllMyBucketsEntry *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (34));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__ListAllMyBucketsEntry ** soap_in_PointerTons1__ListAllMyBucketsEntry(struct soap *soap, const char *tag, ns1__ListAllMyBucketsEntry **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListAllMyBucketsEntry **)soap_malloc(soap, sizeof(ns1__ListAllMyBucketsEntry *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__ListAllMyBucketsEntry *)soap_instantiate_ns1__ListAllMyBucketsEntry(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__ListAllMyBucketsEntry ** p = (ns1__ListAllMyBucketsEntry **)soap_id_lookup(soap, soap->href, (void**)a, (34), sizeof(ns1__ListAllMyBucketsEntry), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (94));
 if (soap_out_PointerTons1__ListAllMyBucketsEntry(soap, tag?tag:"ns1:ListAllMyBucketsEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListAllMyBucketsEntry ** soap_get_PointerTons1__ListAllMyBucketsEntry(struct soap *soap, ns1__ListAllMyBucketsEntry **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__ListAllMyBucketsEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__ListAllMyBucketsList(struct soap *soap, ns1__ListAllMyBucketsList *const*a)
{
 if (!soap_reference(soap, *a, (36)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__ListAllMyBucketsList(struct soap *soap, const char *tag, int id, ns1__ListAllMyBucketsList *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (36));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__ListAllMyBucketsList ** soap_in_PointerTons1__ListAllMyBucketsList(struct soap *soap, const char *tag, ns1__ListAllMyBucketsList **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListAllMyBucketsList **)soap_malloc(soap, sizeof(ns1__ListAllMyBucketsList *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__ListAllMyBucketsList *)soap_instantiate_ns1__ListAllMyBucketsList(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__ListAllMyBucketsList ** p = (ns1__ListAllMyBucketsList **)soap_id_lookup(soap, soap->href, (void**)a, (36), sizeof(ns1__ListAllMyBucketsList), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__ListAllMyBucketsList(struct soap *soap, ns1__ListAllMyBucketsList *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (93));
 if (soap_out_PointerTons1__ListAllMyBucketsList(soap, tag?tag:"ns1:ListAllMyBucketsList", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListAllMyBucketsList ** soap_get_PointerTons1__ListAllMyBucketsList(struct soap *soap, ns1__ListAllMyBucketsList **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__ListAllMyBucketsList(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToPointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry **const*a)
{
 if (!soap_reference(soap, *a, (91)))
  soap_serialize_PointerTons1__PrefixEntry(soap, *a);
}

 int soap_out_PointerToPointerTons1__PrefixEntry(struct soap *soap, const char *tag, int id, ns1__PrefixEntry **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (91));
 if (id < 0)
  return soap->error;
 return soap_out_PointerTons1__PrefixEntry(soap, tag, id, *a, type);
}

 ns1__PrefixEntry *** soap_in_PointerToPointerTons1__PrefixEntry(struct soap *soap, const char *tag, ns1__PrefixEntry ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__PrefixEntry ***)soap_malloc(soap, sizeof(ns1__PrefixEntry **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_PointerTons1__PrefixEntry(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (ns1__PrefixEntry ***)soap_id_lookup(soap, soap->href, (void**)a, (91), sizeof(ns1__PrefixEntry *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToPointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (92));
 if (soap_out_PointerToPointerTons1__PrefixEntry(soap, tag?tag:"ns1:PrefixEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__PrefixEntry *** soap_get_PointerToPointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToPointerTons1__PrefixEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry *const*a)
{
 if (!soap_reference(soap, *a, (32)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__PrefixEntry(struct soap *soap, const char *tag, int id, ns1__PrefixEntry *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (32));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__PrefixEntry ** soap_in_PointerTons1__PrefixEntry(struct soap *soap, const char *tag, ns1__PrefixEntry **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__PrefixEntry **)soap_malloc(soap, sizeof(ns1__PrefixEntry *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__PrefixEntry *)soap_instantiate_ns1__PrefixEntry(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__PrefixEntry ** p = (ns1__PrefixEntry **)soap_id_lookup(soap, soap->href, (void**)a, (32), sizeof(ns1__PrefixEntry), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (91));
 if (soap_out_PointerTons1__PrefixEntry(soap, tag?tag:"ns1:PrefixEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__PrefixEntry ** soap_get_PointerTons1__PrefixEntry(struct soap *soap, ns1__PrefixEntry **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__PrefixEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToPointerTons1__ListEntry(struct soap *soap, ns1__ListEntry **const*a)
{
 if (!soap_reference(soap, *a, (89)))
  soap_serialize_PointerTons1__ListEntry(soap, *a);
}

 int soap_out_PointerToPointerTons1__ListEntry(struct soap *soap, const char *tag, int id, ns1__ListEntry **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (89));
 if (id < 0)
  return soap->error;
 return soap_out_PointerTons1__ListEntry(soap, tag, id, *a, type);
}

 ns1__ListEntry *** soap_in_PointerToPointerTons1__ListEntry(struct soap *soap, const char *tag, ns1__ListEntry ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListEntry ***)soap_malloc(soap, sizeof(ns1__ListEntry **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_PointerTons1__ListEntry(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (ns1__ListEntry ***)soap_id_lookup(soap, soap->href, (void**)a, (89), sizeof(ns1__ListEntry *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToPointerTons1__ListEntry(struct soap *soap, ns1__ListEntry **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (90));
 if (soap_out_PointerToPointerTons1__ListEntry(soap, tag?tag:"ns1:ListEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListEntry *** soap_get_PointerToPointerTons1__ListEntry(struct soap *soap, ns1__ListEntry ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToPointerTons1__ListEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__ListEntry(struct soap *soap, ns1__ListEntry *const*a)
{
 if (!soap_reference(soap, *a, (31)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__ListEntry(struct soap *soap, const char *tag, int id, ns1__ListEntry *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (31));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__ListEntry ** soap_in_PointerTons1__ListEntry(struct soap *soap, const char *tag, ns1__ListEntry **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__ListEntry **)soap_malloc(soap, sizeof(ns1__ListEntry *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__ListEntry *)soap_instantiate_ns1__ListEntry(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__ListEntry ** p = (ns1__ListEntry **)soap_id_lookup(soap, soap->href, (void**)a, (31), sizeof(ns1__ListEntry), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__ListEntry(struct soap *soap, ns1__ListEntry *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (89));
 if (soap_out_PointerTons1__ListEntry(soap, tag?tag:"ns1:ListEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__ListEntry ** soap_get_PointerTons1__ListEntry(struct soap *soap, ns1__ListEntry **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__ListEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToPointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry **const*a)
{
 if (!soap_reference(soap, *a, (86)))
  soap_serialize_PointerTons1__MetadataEntry(soap, *a);
}

 int soap_out_PointerToPointerTons1__MetadataEntry(struct soap *soap, const char *tag, int id, ns1__MetadataEntry **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (86));
 if (id < 0)
  return soap->error;
 return soap_out_PointerTons1__MetadataEntry(soap, tag, id, *a, type);
}

 ns1__MetadataEntry *** soap_in_PointerToPointerTons1__MetadataEntry(struct soap *soap, const char *tag, ns1__MetadataEntry ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__MetadataEntry ***)soap_malloc(soap, sizeof(ns1__MetadataEntry **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_PointerTons1__MetadataEntry(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (ns1__MetadataEntry ***)soap_id_lookup(soap, soap->href, (void**)a, (86), sizeof(ns1__MetadataEntry *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToPointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (87));
 if (soap_out_PointerToPointerTons1__MetadataEntry(soap, tag?tag:"ns1:MetadataEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__MetadataEntry *** soap_get_PointerToPointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToPointerTons1__MetadataEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry *const*a)
{
 if (!soap_reference(soap, *a, (13)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__MetadataEntry(struct soap *soap, const char *tag, int id, ns1__MetadataEntry *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (13));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__MetadataEntry ** soap_in_PointerTons1__MetadataEntry(struct soap *soap, const char *tag, ns1__MetadataEntry **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__MetadataEntry **)soap_malloc(soap, sizeof(ns1__MetadataEntry *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__MetadataEntry *)soap_instantiate_ns1__MetadataEntry(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__MetadataEntry ** p = (ns1__MetadataEntry **)soap_id_lookup(soap, soap->href, (void**)a, (13), sizeof(ns1__MetadataEntry), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (86));
 if (soap_out_PointerTons1__MetadataEntry(soap, tag?tag:"ns1:MetadataEntry", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__MetadataEntry ** soap_get_PointerTons1__MetadataEntry(struct soap *soap, ns1__MetadataEntry **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__MetadataEntry(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__CanonicalUser(struct soap *soap, ns1__CanonicalUser *const*a)
{
 if (!soap_reference(soap, *a, (22)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__CanonicalUser(struct soap *soap, const char *tag, int id, ns1__CanonicalUser *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (22));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__CanonicalUser ** soap_in_PointerTons1__CanonicalUser(struct soap *soap, const char *tag, ns1__CanonicalUser **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__CanonicalUser **)soap_malloc(soap, sizeof(ns1__CanonicalUser *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__CanonicalUser *)soap_instantiate_ns1__CanonicalUser(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__CanonicalUser ** p = (ns1__CanonicalUser **)soap_id_lookup(soap, soap->href, (void**)a, (22), sizeof(ns1__CanonicalUser), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__CanonicalUser(struct soap *soap, ns1__CanonicalUser *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (83));
 if (soap_out_PointerTons1__CanonicalUser(soap, tag?tag:"ns1:CanonicalUser", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__CanonicalUser ** soap_get_PointerTons1__CanonicalUser(struct soap *soap, ns1__CanonicalUser **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__CanonicalUser(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__LocationConstraint(struct soap *soap, ns1__LocationConstraint *const*a)
{
 if (!soap_reference(soap, *a, (27)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__LocationConstraint(struct soap *soap, const char *tag, int id, ns1__LocationConstraint *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (27));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__LocationConstraint ** soap_in_PointerTons1__LocationConstraint(struct soap *soap, const char *tag, ns1__LocationConstraint **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__LocationConstraint **)soap_malloc(soap, sizeof(ns1__LocationConstraint *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__LocationConstraint *)soap_instantiate_ns1__LocationConstraint(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__LocationConstraint ** p = (ns1__LocationConstraint **)soap_id_lookup(soap, soap->href, (void**)a, (27), sizeof(ns1__LocationConstraint), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__LocationConstraint(struct soap *soap, ns1__LocationConstraint *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (82));
 if (soap_out_PointerTons1__LocationConstraint(soap, tag?tag:"ns1:LocationConstraint", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__LocationConstraint ** soap_get_PointerTons1__LocationConstraint(struct soap *soap, ns1__LocationConstraint **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__LocationConstraint(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerToPointerTons1__Grant(struct soap *soap, ns1__Grant **const*a)
{
 if (!soap_reference(soap, *a, (80)))
  soap_serialize_PointerTons1__Grant(soap, *a);
}

 int soap_out_PointerToPointerTons1__Grant(struct soap *soap, const char *tag, int id, ns1__Grant **const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (80));
 if (id < 0)
  return soap->error;
 return soap_out_PointerTons1__Grant(soap, tag, id, *a, type);
}

 ns1__Grant *** soap_in_PointerToPointerTons1__Grant(struct soap *soap, const char *tag, ns1__Grant ***a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__Grant ***)soap_malloc(soap, sizeof(ns1__Grant **))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_PointerTons1__Grant(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (ns1__Grant ***)soap_id_lookup(soap, soap->href, (void**)a, (80), sizeof(ns1__Grant *), 1);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerToPointerTons1__Grant(struct soap *soap, ns1__Grant **const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (81));
 if (soap_out_PointerToPointerTons1__Grant(soap, tag?tag:"ns1:Grant", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__Grant *** soap_get_PointerToPointerTons1__Grant(struct soap *soap, ns1__Grant ***p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerToPointerTons1__Grant(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__Grant(struct soap *soap, ns1__Grant *const*a)
{
 if (!soap_reference(soap, *a, (24)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__Grant(struct soap *soap, const char *tag, int id, ns1__Grant *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (24));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__Grant ** soap_in_PointerTons1__Grant(struct soap *soap, const char *tag, ns1__Grant **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__Grant **)soap_malloc(soap, sizeof(ns1__Grant *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__Grant *)soap_instantiate_ns1__Grant(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__Grant ** p = (ns1__Grant **)soap_id_lookup(soap, soap->href, (void**)a, (24), sizeof(ns1__Grant), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__Grant(struct soap *soap, ns1__Grant *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (80));
 if (soap_out_PointerTons1__Grant(soap, tag?tag:"ns1:Grant", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__Grant ** soap_get_PointerTons1__Grant(struct soap *soap, ns1__Grant **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__Grant(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__Grantee(struct soap *soap, ns1__Grantee *const*a)
{
 if (!soap_reference(soap, *a, (19)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__Grantee(struct soap *soap, const char *tag, int id, ns1__Grantee *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (19));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__Grantee ** soap_in_PointerTons1__Grantee(struct soap *soap, const char *tag, ns1__Grantee **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__Grantee **)soap_malloc(soap, sizeof(ns1__Grantee *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__Grantee *)soap_instantiate_ns1__Grantee(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__Grantee ** p = (ns1__Grantee **)soap_id_lookup(soap, soap->href, (void**)a, (19), sizeof(ns1__Grantee), 0);
  if (!p && soap->error == 26)
  { soap->error = 0;
   p = (ns1__Grantee **)soap_id_lookup(soap, soap->href, (void**)a, (20), sizeof(ns1__User), 0);
  }
  if (!p && soap->error == 26)
  { soap->error = 0;
   p = (ns1__Grantee **)soap_id_lookup(soap, soap->href, (void**)a, (23), sizeof(ns1__Group), 0);
  }
  if (!p && soap->error == 26)
  { soap->error = 0;
   p = (ns1__Grantee **)soap_id_lookup(soap, soap->href, (void**)a, (21), sizeof(ns1__AmazonCustomerByEmail), 0);
  }
  if (!p && soap->error == 26)
  { soap->error = 0;
   p = (ns1__Grantee **)soap_id_lookup(soap, soap->href, (void**)a, (22), sizeof(ns1__CanonicalUser), 0);
  }
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__Grantee(struct soap *soap, ns1__Grantee *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (79));
 if (soap_out_PointerTons1__Grantee(soap, tag?tag:"ns1:Grantee", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__Grantee ** soap_get_PointerTons1__Grantee(struct soap *soap, ns1__Grantee **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__Grantee(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__AccessControlList(struct soap *soap, ns1__AccessControlList *const*a)
{
 if (!soap_reference(soap, *a, (25)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__AccessControlList(struct soap *soap, const char *tag, int id, ns1__AccessControlList *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (25));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__AccessControlList ** soap_in_PointerTons1__AccessControlList(struct soap *soap, const char *tag, ns1__AccessControlList **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__AccessControlList **)soap_malloc(soap, sizeof(ns1__AccessControlList *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__AccessControlList *)soap_instantiate_ns1__AccessControlList(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__AccessControlList ** p = (ns1__AccessControlList **)soap_id_lookup(soap, soap->href, (void**)a, (25), sizeof(ns1__AccessControlList), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__AccessControlList(struct soap *soap, ns1__AccessControlList *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (78));
 if (soap_out_PointerTons1__AccessControlList(soap, tag?tag:"ns1:AccessControlList", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__AccessControlList ** soap_get_PointerTons1__AccessControlList(struct soap *soap, ns1__AccessControlList **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__AccessControlList(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__LoggingSettings(struct soap *soap, ns1__LoggingSettings *const*a)
{
 if (!soap_reference(soap, *a, (18)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__LoggingSettings(struct soap *soap, const char *tag, int id, ns1__LoggingSettings *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (18));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__LoggingSettings ** soap_in_PointerTons1__LoggingSettings(struct soap *soap, const char *tag, ns1__LoggingSettings **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__LoggingSettings **)soap_malloc(soap, sizeof(ns1__LoggingSettings *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__LoggingSettings *)soap_instantiate_ns1__LoggingSettings(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__LoggingSettings ** p = (ns1__LoggingSettings **)soap_id_lookup(soap, soap->href, (void**)a, (18), sizeof(ns1__LoggingSettings), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__LoggingSettings(struct soap *soap, ns1__LoggingSettings *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (77));
 if (soap_out_PointerTons1__LoggingSettings(soap, tag?tag:"ns1:LoggingSettings", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__LoggingSettings ** soap_get_PointerTons1__LoggingSettings(struct soap *soap, ns1__LoggingSettings **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__LoggingSettings(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTons1__Status(struct soap *soap, ns1__Status *const*a)
{
 if (!soap_reference(soap, *a, (14)))
  (*a)->soap_serialize(soap);
}

 int soap_out_PointerTons1__Status(struct soap *soap, const char *tag, int id, ns1__Status *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (14));
 if (id < 0)
  return soap->error;
 return (*a)->soap_out(soap, tag, id, type);
}

 ns1__Status ** soap_in_PointerTons1__Status(struct soap *soap, const char *tag, ns1__Status **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (ns1__Status **)soap_malloc(soap, sizeof(ns1__Status *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = (ns1__Status *)soap_instantiate_ns1__Status(soap, -1, soap->type, soap->arrayType, __null)))
   return __null;
  (*a)->soap_default(soap);
  if (!(*a)->soap_in(soap, tag, __null))
   return __null;
 }
 else
 { ns1__Status ** p = (ns1__Status **)soap_id_lookup(soap, soap->href, (void**)a, (14), sizeof(ns1__Status), 0);
  a = p;
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTons1__Status(struct soap *soap, ns1__Status *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (76));
 if (soap_out_PointerTons1__Status(soap, tag?tag:"ns1:Status", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 ns1__Status ** soap_get_PointerTons1__Status(struct soap *soap, ns1__Status **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTons1__Status(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
 soap_reference(soap, *a, (10));
}

 int soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
 id = soap_element_id(soap, tag, id, *a, __null, 0, type, (10));
 if (id < 0)
  return soap->error;
 return soap_out_unsignedByte(soap, tag, id, *a, type);
}

 unsigned char ** soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
 if (soap_element_begin_in(soap, tag, 1, __null))
  return __null;
 if (!a)
  if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
   return __null;
 *a = __null;
 if (!soap->null && *soap->href != '#')
 { soap_revert(soap);
  if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
   return __null;
 }
 else
 { a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, (10), sizeof(unsigned char), 0);
  if (soap->body && soap_element_end_in(soap, tag))
   return __null;
 }
 return a;
}

 int soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (11));
 if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 unsigned char ** soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
 if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 int soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
 return soap_outstring(soap, tag, id, a, type, (7));
}

 char * * soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{ char **p;
 p = soap_instring(soap, tag, a, type, (7), 1, -1, -1);
 return p;
}

 int soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (7));
 if (soap_out_xsd__anyURI(soap, tag?tag:"byte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 char ** soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
 if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 int soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
 return soap_outstring(soap, tag, id, a, type, (5));
}

 char * * soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{ char **p;
 p = soap_instring(soap, tag, a, type, (5), 2, -1, -1);
 return p;
}

 int soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (5));
 if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 char ** soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
 if ((p = soap_in__QName(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}

 void soap_default_string(struct soap *soap, char **a)
{
 (void)soap;



 *a = (char *)0;

}

 void soap_serialize_string(struct soap *soap, char *const*a)
{
 soap_reference(soap, *a, (4));
}

 int soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
 return soap_outstring(soap, tag, id, a, type, (4));
}

 char * * soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{ char **p;
 p = soap_instring(soap, tag, a, type, (4), 1, -1, -1);
 return p;
}

 int soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
 register int id = soap_embed(soap, (void*)a, __null, 0, tag, (4));
 if (soap_out_string(soap, tag?tag:"byte", id, a, type))
  return soap->error;
 return soap_putindependent(soap);
}

 char ** soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
 if ((p = soap_in_string(soap, tag, p, type)))
  if (soap_getindependent(soap))
   return __null;
 return p;
}
# 7 "dllmain.cpp" 2
# 1 "../../AmazonS3/eternusClient.cpp" 1
# 16 "../../AmazonS3/eternusClient.cpp"



 int soap_call___ns1__CreateBucket(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateBucket *ns1__CreateBucket, _ns1__CreateBucketResponse *ns1__CreateBucketResponse)
{ struct __ns1__CreateBucket soap_tmp___ns1__CreateBucket;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__CreateBucket.ns1__CreateBucket = ns1__CreateBucket;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__CreateBucket(soap, &soap_tmp___ns1__CreateBucket);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__CreateBucket(soap, &soap_tmp___ns1__CreateBucket, "-ns1:CreateBucket", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__CreateBucket(soap, &soap_tmp___ns1__CreateBucket, "-ns1:CreateBucket", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__CreateBucketResponse)
  return soap_closesock(soap);
 ns1__CreateBucketResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__CreateBucketResponse->soap_get(soap, "ns1:CreateBucketResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__DeleteBucket(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteBucket *ns1__DeleteBucket, _ns1__DeleteBucketResponse *ns1__DeleteBucketResponse)
{ struct __ns1__DeleteBucket soap_tmp___ns1__DeleteBucket;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__DeleteBucket.ns1__DeleteBucket = ns1__DeleteBucket;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__DeleteBucket(soap, &soap_tmp___ns1__DeleteBucket);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__DeleteBucket(soap, &soap_tmp___ns1__DeleteBucket, "-ns1:DeleteBucket", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__DeleteBucket(soap, &soap_tmp___ns1__DeleteBucket, "-ns1:DeleteBucket", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__DeleteBucketResponse)
  return soap_closesock(soap);
 ns1__DeleteBucketResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__DeleteBucketResponse->soap_get(soap, "ns1:DeleteBucketResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__GetObjectAccessControlPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetObjectAccessControlPolicy *ns1__GetObjectAccessControlPolicy, _ns1__GetObjectAccessControlPolicyResponse *ns1__GetObjectAccessControlPolicyResponse)
{ struct __ns1__GetObjectAccessControlPolicy soap_tmp___ns1__GetObjectAccessControlPolicy;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__GetObjectAccessControlPolicy.ns1__GetObjectAccessControlPolicy = ns1__GetObjectAccessControlPolicy;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__GetObjectAccessControlPolicy(soap, &soap_tmp___ns1__GetObjectAccessControlPolicy);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__GetObjectAccessControlPolicy(soap, &soap_tmp___ns1__GetObjectAccessControlPolicy, "-ns1:GetObjectAccessControlPolicy", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__GetObjectAccessControlPolicy(soap, &soap_tmp___ns1__GetObjectAccessControlPolicy, "-ns1:GetObjectAccessControlPolicy", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__GetObjectAccessControlPolicyResponse)
  return soap_closesock(soap);
 ns1__GetObjectAccessControlPolicyResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__GetObjectAccessControlPolicyResponse->soap_get(soap, "ns1:GetObjectAccessControlPolicyResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__GetBucketAccessControlPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetBucketAccessControlPolicy *ns1__GetBucketAccessControlPolicy, _ns1__GetBucketAccessControlPolicyResponse *ns1__GetBucketAccessControlPolicyResponse)
{ struct __ns1__GetBucketAccessControlPolicy soap_tmp___ns1__GetBucketAccessControlPolicy;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__GetBucketAccessControlPolicy.ns1__GetBucketAccessControlPolicy = ns1__GetBucketAccessControlPolicy;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__GetBucketAccessControlPolicy(soap, &soap_tmp___ns1__GetBucketAccessControlPolicy);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__GetBucketAccessControlPolicy(soap, &soap_tmp___ns1__GetBucketAccessControlPolicy, "-ns1:GetBucketAccessControlPolicy", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__GetBucketAccessControlPolicy(soap, &soap_tmp___ns1__GetBucketAccessControlPolicy, "-ns1:GetBucketAccessControlPolicy", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__GetBucketAccessControlPolicyResponse)
  return soap_closesock(soap);
 ns1__GetBucketAccessControlPolicyResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__GetBucketAccessControlPolicyResponse->soap_get(soap, "ns1:GetBucketAccessControlPolicyResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__SetObjectAccessControlPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetObjectAccessControlPolicy *ns1__SetObjectAccessControlPolicy, _ns1__SetObjectAccessControlPolicyResponse *ns1__SetObjectAccessControlPolicyResponse)
{ struct __ns1__SetObjectAccessControlPolicy soap_tmp___ns1__SetObjectAccessControlPolicy;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__SetObjectAccessControlPolicy.ns1__SetObjectAccessControlPolicy = ns1__SetObjectAccessControlPolicy;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__SetObjectAccessControlPolicy(soap, &soap_tmp___ns1__SetObjectAccessControlPolicy);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__SetObjectAccessControlPolicy(soap, &soap_tmp___ns1__SetObjectAccessControlPolicy, "-ns1:SetObjectAccessControlPolicy", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__SetObjectAccessControlPolicy(soap, &soap_tmp___ns1__SetObjectAccessControlPolicy, "-ns1:SetObjectAccessControlPolicy", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__SetObjectAccessControlPolicyResponse)
  return soap_closesock(soap);
 ns1__SetObjectAccessControlPolicyResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__SetObjectAccessControlPolicyResponse->soap_get(soap, "ns1:SetObjectAccessControlPolicyResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__SetBucketAccessControlPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetBucketAccessControlPolicy *ns1__SetBucketAccessControlPolicy, _ns1__SetBucketAccessControlPolicyResponse *ns1__SetBucketAccessControlPolicyResponse)
{ struct __ns1__SetBucketAccessControlPolicy soap_tmp___ns1__SetBucketAccessControlPolicy;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__SetBucketAccessControlPolicy.ns1__SetBucketAccessControlPolicy = ns1__SetBucketAccessControlPolicy;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__SetBucketAccessControlPolicy(soap, &soap_tmp___ns1__SetBucketAccessControlPolicy);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__SetBucketAccessControlPolicy(soap, &soap_tmp___ns1__SetBucketAccessControlPolicy, "-ns1:SetBucketAccessControlPolicy", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__SetBucketAccessControlPolicy(soap, &soap_tmp___ns1__SetBucketAccessControlPolicy, "-ns1:SetBucketAccessControlPolicy", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__SetBucketAccessControlPolicyResponse)
  return soap_closesock(soap);
 ns1__SetBucketAccessControlPolicyResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__SetBucketAccessControlPolicyResponse->soap_get(soap, "ns1:SetBucketAccessControlPolicyResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__GetObject(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetObject *ns1__GetObject, _ns1__GetObjectResponse *ns1__GetObjectResponse)
{ struct __ns1__GetObject soap_tmp___ns1__GetObject;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__GetObject.ns1__GetObject = ns1__GetObject;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__GetObject(soap, &soap_tmp___ns1__GetObject);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__GetObject(soap, &soap_tmp___ns1__GetObject, "-ns1:GetObject", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__GetObject(soap, &soap_tmp___ns1__GetObject, "-ns1:GetObject", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__GetObjectResponse)
  return soap_closesock(soap);
 ns1__GetObjectResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__GetObjectResponse->soap_get(soap, "ns1:GetObjectResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__GetObjectExtended(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetObjectExtended *ns1__GetObjectExtended, _ns1__GetObjectExtendedResponse *ns1__GetObjectExtendedResponse)
{ struct __ns1__GetObjectExtended soap_tmp___ns1__GetObjectExtended;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__GetObjectExtended.ns1__GetObjectExtended = ns1__GetObjectExtended;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__GetObjectExtended(soap, &soap_tmp___ns1__GetObjectExtended);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__GetObjectExtended(soap, &soap_tmp___ns1__GetObjectExtended, "-ns1:GetObjectExtended", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__GetObjectExtended(soap, &soap_tmp___ns1__GetObjectExtended, "-ns1:GetObjectExtended", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__GetObjectExtendedResponse)
  return soap_closesock(soap);
 ns1__GetObjectExtendedResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__GetObjectExtendedResponse->soap_get(soap, "ns1:GetObjectExtendedResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__PutObject(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PutObject *ns1__PutObject, _ns1__PutObjectResponse *ns1__PutObjectResponse)
{ struct __ns1__PutObject soap_tmp___ns1__PutObject;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__PutObject.ns1__PutObject = ns1__PutObject;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__PutObject(soap, &soap_tmp___ns1__PutObject);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__PutObject(soap, &soap_tmp___ns1__PutObject, "-ns1:PutObject", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__PutObject(soap, &soap_tmp___ns1__PutObject, "-ns1:PutObject", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__PutObjectResponse)
  return soap_closesock(soap);
 ns1__PutObjectResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__PutObjectResponse->soap_get(soap, "ns1:PutObjectResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__PutObjectInline(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PutObjectInline *ns1__PutObjectInline, _ns1__PutObjectInlineResponse *ns1__PutObjectInlineResponse)
{ struct __ns1__PutObjectInline soap_tmp___ns1__PutObjectInline;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__PutObjectInline.ns1__PutObjectInline = ns1__PutObjectInline;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__PutObjectInline(soap, &soap_tmp___ns1__PutObjectInline);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__PutObjectInline(soap, &soap_tmp___ns1__PutObjectInline, "-ns1:PutObjectInline", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__PutObjectInline(soap, &soap_tmp___ns1__PutObjectInline, "-ns1:PutObjectInline", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__PutObjectInlineResponse)
  return soap_closesock(soap);
 ns1__PutObjectInlineResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__PutObjectInlineResponse->soap_get(soap, "ns1:PutObjectInlineResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__DeleteObject(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteObject *ns1__DeleteObject, _ns1__DeleteObjectResponse *ns1__DeleteObjectResponse)
{ struct __ns1__DeleteObject soap_tmp___ns1__DeleteObject;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__DeleteObject.ns1__DeleteObject = ns1__DeleteObject;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__DeleteObject(soap, &soap_tmp___ns1__DeleteObject);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__DeleteObject(soap, &soap_tmp___ns1__DeleteObject, "-ns1:DeleteObject", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__DeleteObject(soap, &soap_tmp___ns1__DeleteObject, "-ns1:DeleteObject", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__DeleteObjectResponse)
  return soap_closesock(soap);
 ns1__DeleteObjectResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__DeleteObjectResponse->soap_get(soap, "ns1:DeleteObjectResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__ListBucket(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ListBucket *ns1__ListBucket, _ns1__ListBucketResponse *ns1__ListBucketResponse)
{ struct __ns1__ListBucket soap_tmp___ns1__ListBucket;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__ListBucket.ns1__ListBucket = ns1__ListBucket;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__ListBucket(soap, &soap_tmp___ns1__ListBucket);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__ListBucket(soap, &soap_tmp___ns1__ListBucket, "-ns1:ListBucket", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__ListBucket(soap, &soap_tmp___ns1__ListBucket, "-ns1:ListBucket", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__ListBucketResponse)
  return soap_closesock(soap);
 ns1__ListBucketResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__ListBucketResponse->soap_get(soap, "ns1:ListBucketResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__ListAllMyBuckets(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ListAllMyBuckets *ns1__ListAllMyBuckets, _ns1__ListAllMyBucketsResponse *ns1__ListAllMyBucketsResponse)
{ struct __ns1__ListAllMyBuckets soap_tmp___ns1__ListAllMyBuckets;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__ListAllMyBuckets.ns1__ListAllMyBuckets = ns1__ListAllMyBuckets;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__ListAllMyBuckets(soap, &soap_tmp___ns1__ListAllMyBuckets);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__ListAllMyBuckets(soap, &soap_tmp___ns1__ListAllMyBuckets, "-ns1:ListAllMyBuckets", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__ListAllMyBuckets(soap, &soap_tmp___ns1__ListAllMyBuckets, "-ns1:ListAllMyBuckets", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__ListAllMyBucketsResponse)
  return soap_closesock(soap);
 ns1__ListAllMyBucketsResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__ListAllMyBucketsResponse->soap_get(soap, "ns1:ListAllMyBucketsResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__SetBucketLoggingStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetBucketLoggingStatus *ns1__SetBucketLoggingStatus, _ns1__SetBucketLoggingStatusResponse *ns1__SetBucketLoggingStatusResponse)
{ struct __ns1__SetBucketLoggingStatus soap_tmp___ns1__SetBucketLoggingStatus;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__SetBucketLoggingStatus.ns1__SetBucketLoggingStatus = ns1__SetBucketLoggingStatus;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__SetBucketLoggingStatus(soap, &soap_tmp___ns1__SetBucketLoggingStatus);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__SetBucketLoggingStatus(soap, &soap_tmp___ns1__SetBucketLoggingStatus, "-ns1:SetBucketLoggingStatus", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__SetBucketLoggingStatus(soap, &soap_tmp___ns1__SetBucketLoggingStatus, "-ns1:SetBucketLoggingStatus", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__SetBucketLoggingStatusResponse)
  return soap_closesock(soap);
 ns1__SetBucketLoggingStatusResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__SetBucketLoggingStatusResponse->soap_get(soap, "ns1:SetBucketLoggingStatusResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__GetBucketLoggingStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetBucketLoggingStatus *ns1__GetBucketLoggingStatus, _ns1__GetBucketLoggingStatusResponse *ns1__GetBucketLoggingStatusResponse)
{ struct __ns1__GetBucketLoggingStatus soap_tmp___ns1__GetBucketLoggingStatus;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__GetBucketLoggingStatus.ns1__GetBucketLoggingStatus = ns1__GetBucketLoggingStatus;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__GetBucketLoggingStatus(soap, &soap_tmp___ns1__GetBucketLoggingStatus);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__GetBucketLoggingStatus(soap, &soap_tmp___ns1__GetBucketLoggingStatus, "-ns1:GetBucketLoggingStatus", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__GetBucketLoggingStatus(soap, &soap_tmp___ns1__GetBucketLoggingStatus, "-ns1:GetBucketLoggingStatus", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__GetBucketLoggingStatusResponse)
  return soap_closesock(soap);
 ns1__GetBucketLoggingStatusResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__GetBucketLoggingStatusResponse->soap_get(soap, "ns1:GetBucketLoggingStatusResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}

 int soap_call___ns1__CopyObject(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CopyObject *ns1__CopyObject, _ns1__CopyObjectResponse *ns1__CopyObjectResponse)
{ struct __ns1__CopyObject soap_tmp___ns1__CopyObject;
 if (!soap_endpoint)
  soap_endpoint = "https://s3.amazonaws.com/soap";
 if (!soap_action)
  soap_action = "";
 soap->encodingStyle = __null;
 soap_tmp___ns1__CopyObject.ns1__CopyObject = ns1__CopyObject;
 soap_begin(soap);
 soap_serializeheader(soap);
 soap_serialize___ns1__CopyObject(soap, &soap_tmp___ns1__CopyObject);
 if (soap_begin_count(soap))
  return soap->error;
 if (soap->mode & 0x00000008)
 { if (soap_envelope_begin_out(soap)
   || soap_putheader(soap)
   || soap_body_begin_out(soap)
   || soap_put___ns1__CopyObject(soap, &soap_tmp___ns1__CopyObject, "-ns1:CopyObject", __null)
   || soap_body_end_out(soap)
   || soap_envelope_end_out(soap))
    return soap->error;
 }
 if (soap_end_count(soap))
  return soap->error;
 if (soap_connect(soap, soap_endpoint, soap_action)
  || soap_envelope_begin_out(soap)
  || soap_putheader(soap)
  || soap_body_begin_out(soap)
  || soap_put___ns1__CopyObject(soap, &soap_tmp___ns1__CopyObject, "-ns1:CopyObject", __null)
  || soap_body_end_out(soap)
  || soap_envelope_end_out(soap)
  || soap_end_send(soap))
  return soap_closesock(soap);
 if (!ns1__CopyObjectResponse)
  return soap_closesock(soap);
 ns1__CopyObjectResponse->soap_default(soap);
 if (soap_begin_recv(soap)
  || soap_envelope_begin_in(soap)
  || soap_recv_header(soap)
  || soap_body_begin_in(soap))
  return soap_closesock(soap);
 ns1__CopyObjectResponse->soap_get(soap, "ns1:CopyObjectResponse", "");
 if (soap->error)
  return soap_recv_fault(soap, 0);
 if (soap_body_end_in(soap)
  || soap_envelope_end_in(soap)
  || soap_end_recv(soap))
  return soap_closesock(soap);
 return soap_closesock(soap);
}
# 8 "dllmain.cpp" 2

# 1 "../../AmazonS3/eternusAmazonS3SoapBindingObject.h" 1
# 20 "../../AmazonS3/eternusAmazonS3SoapBindingObject.h"
class AmazonS3SoapBindingService : public soap
{ public:
 AmazonS3SoapBindingService()
 { static const struct Namespace namespaces[] =
{
 {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", __null},
 {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", __null},
 {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", __null},
 {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", __null},
 {"ns1", "http://s3.amazonaws.com/doc/2006-03-01/", __null, __null},
 {__null, __null, __null, __null}
};

 this->namespaces = namespaces; };
 virtual ~AmazonS3SoapBindingService() { };

 virtual int bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };

 virtual int accept() { return soap_accept(this); };

 virtual int serve() { return soap_serve(this); };
};
# 50 "../../AmazonS3/eternusAmazonS3SoapBindingObject.h"
 int __ns1__CreateBucket(struct soap*, _ns1__CreateBucket *ns1__CreateBucket, _ns1__CreateBucketResponse *ns1__CreateBucketResponse);

 int __ns1__DeleteBucket(struct soap*, _ns1__DeleteBucket *ns1__DeleteBucket, _ns1__DeleteBucketResponse *ns1__DeleteBucketResponse);

 int __ns1__GetObjectAccessControlPolicy(struct soap*, _ns1__GetObjectAccessControlPolicy *ns1__GetObjectAccessControlPolicy, _ns1__GetObjectAccessControlPolicyResponse *ns1__GetObjectAccessControlPolicyResponse);

 int __ns1__GetBucketAccessControlPolicy(struct soap*, _ns1__GetBucketAccessControlPolicy *ns1__GetBucketAccessControlPolicy, _ns1__GetBucketAccessControlPolicyResponse *ns1__GetBucketAccessControlPolicyResponse);

 int __ns1__SetObjectAccessControlPolicy(struct soap*, _ns1__SetObjectAccessControlPolicy *ns1__SetObjectAccessControlPolicy, _ns1__SetObjectAccessControlPolicyResponse *ns1__SetObjectAccessControlPolicyResponse);

 int __ns1__SetBucketAccessControlPolicy(struct soap*, _ns1__SetBucketAccessControlPolicy *ns1__SetBucketAccessControlPolicy, _ns1__SetBucketAccessControlPolicyResponse *ns1__SetBucketAccessControlPolicyResponse);

 int __ns1__GetObject(struct soap*, _ns1__GetObject *ns1__GetObject, _ns1__GetObjectResponse *ns1__GetObjectResponse);

 int __ns1__GetObjectExtended(struct soap*, _ns1__GetObjectExtended *ns1__GetObjectExtended, _ns1__GetObjectExtendedResponse *ns1__GetObjectExtendedResponse);

 int __ns1__PutObject(struct soap*, _ns1__PutObject *ns1__PutObject, _ns1__PutObjectResponse *ns1__PutObjectResponse);

 int __ns1__PutObjectInline(struct soap*, _ns1__PutObjectInline *ns1__PutObjectInline, _ns1__PutObjectInlineResponse *ns1__PutObjectInlineResponse);

 int __ns1__DeleteObject(struct soap*, _ns1__DeleteObject *ns1__DeleteObject, _ns1__DeleteObjectResponse *ns1__DeleteObjectResponse);

 int __ns1__ListBucket(struct soap*, _ns1__ListBucket *ns1__ListBucket, _ns1__ListBucketResponse *ns1__ListBucketResponse);

 int __ns1__ListAllMyBuckets(struct soap*, _ns1__ListAllMyBuckets *ns1__ListAllMyBuckets, _ns1__ListAllMyBucketsResponse *ns1__ListAllMyBucketsResponse);

 int __ns1__SetBucketLoggingStatus(struct soap*, _ns1__SetBucketLoggingStatus *ns1__SetBucketLoggingStatus, _ns1__SetBucketLoggingStatusResponse *ns1__SetBucketLoggingStatusResponse);

 int __ns1__GetBucketLoggingStatus(struct soap*, _ns1__GetBucketLoggingStatus *ns1__GetBucketLoggingStatus, _ns1__GetBucketLoggingStatusResponse *ns1__GetBucketLoggingStatusResponse);

 int __ns1__CopyObject(struct soap*, _ns1__CopyObject *ns1__CopyObject, _ns1__CopyObjectResponse *ns1__CopyObjectResponse);
# 10 "dllmain.cpp" 2
# 1 "../../AmazonS3/eternusAmazonS3SoapBindingProxy.h" 1
# 13 "../../AmazonS3/eternusAmazonS3SoapBindingProxy.h"
class AmazonS3SoapBinding
{ public:

 struct soap *soap;

 const char *endpoint;

 AmazonS3SoapBinding()
 { soap = soap_new(); endpoint = "https://s3.amazonaws.com/soap"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] =
{
 {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", __null},
 {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", __null},
 {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", __null},
 {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", __null},
 {"ns1", "http://s3.amazonaws.com/doc/2006-03-01/", __null, __null},
 {__null, __null, __null, __null}
};
 soap->namespaces = namespaces; } };

 virtual ~AmazonS3SoapBinding() { if (soap) { soap_delete((soap), __null); soap_end(soap); soap_free(soap); } };

 virtual int __ns1__CreateBucket(_ns1__CreateBucket *ns1__CreateBucket, _ns1__CreateBucketResponse *ns1__CreateBucketResponse) { return soap ? soap_call___ns1__CreateBucket(soap, endpoint, __null, ns1__CreateBucket, ns1__CreateBucketResponse) : 20; };

 virtual int __ns1__DeleteBucket(_ns1__DeleteBucket *ns1__DeleteBucket, _ns1__DeleteBucketResponse *ns1__DeleteBucketResponse) { return soap ? soap_call___ns1__DeleteBucket(soap, endpoint, __null, ns1__DeleteBucket, ns1__DeleteBucketResponse) : 20; };

 virtual int __ns1__GetObjectAccessControlPolicy(_ns1__GetObjectAccessControlPolicy *ns1__GetObjectAccessControlPolicy, _ns1__GetObjectAccessControlPolicyResponse *ns1__GetObjectAccessControlPolicyResponse) { return soap ? soap_call___ns1__GetObjectAccessControlPolicy(soap, endpoint, __null, ns1__GetObjectAccessControlPolicy, ns1__GetObjectAccessControlPolicyResponse) : 20; };

 virtual int __ns1__GetBucketAccessControlPolicy(_ns1__GetBucketAccessControlPolicy *ns1__GetBucketAccessControlPolicy, _ns1__GetBucketAccessControlPolicyResponse *ns1__GetBucketAccessControlPolicyResponse) { return soap ? soap_call___ns1__GetBucketAccessControlPolicy(soap, endpoint, __null, ns1__GetBucketAccessControlPolicy, ns1__GetBucketAccessControlPolicyResponse) : 20; };

 virtual int __ns1__SetObjectAccessControlPolicy(_ns1__SetObjectAccessControlPolicy *ns1__SetObjectAccessControlPolicy, _ns1__SetObjectAccessControlPolicyResponse *ns1__SetObjectAccessControlPolicyResponse) { return soap ? soap_call___ns1__SetObjectAccessControlPolicy(soap, endpoint, __null, ns1__SetObjectAccessControlPolicy, ns1__SetObjectAccessControlPolicyResponse) : 20; };

 virtual int __ns1__SetBucketAccessControlPolicy(_ns1__SetBucketAccessControlPolicy *ns1__SetBucketAccessControlPolicy, _ns1__SetBucketAccessControlPolicyResponse *ns1__SetBucketAccessControlPolicyResponse) { return soap ? soap_call___ns1__SetBucketAccessControlPolicy(soap, endpoint, __null, ns1__SetBucketAccessControlPolicy, ns1__SetBucketAccessControlPolicyResponse) : 20; };

 virtual int __ns1__GetObject(_ns1__GetObject *ns1__GetObject, _ns1__GetObjectResponse *ns1__GetObjectResponse) { return soap ? soap_call___ns1__GetObject(soap, endpoint, __null, ns1__GetObject, ns1__GetObjectResponse) : 20; };

 virtual int __ns1__GetObjectExtended(_ns1__GetObjectExtended *ns1__GetObjectExtended, _ns1__GetObjectExtendedResponse *ns1__GetObjectExtendedResponse) { return soap ? soap_call___ns1__GetObjectExtended(soap, endpoint, __null, ns1__GetObjectExtended, ns1__GetObjectExtendedResponse) : 20; };

 virtual int __ns1__PutObject(_ns1__PutObject *ns1__PutObject, _ns1__PutObjectResponse *ns1__PutObjectResponse) { return soap ? soap_call___ns1__PutObject(soap, endpoint, __null, ns1__PutObject, ns1__PutObjectResponse) : 20; };

 virtual int __ns1__PutObjectInline(_ns1__PutObjectInline *ns1__PutObjectInline, _ns1__PutObjectInlineResponse *ns1__PutObjectInlineResponse) { return soap ? soap_call___ns1__PutObjectInline(soap, endpoint, __null, ns1__PutObjectInline, ns1__PutObjectInlineResponse) : 20; };

 virtual int __ns1__DeleteObject(_ns1__DeleteObject *ns1__DeleteObject, _ns1__DeleteObjectResponse *ns1__DeleteObjectResponse) { return soap ? soap_call___ns1__DeleteObject(soap, endpoint, __null, ns1__DeleteObject, ns1__DeleteObjectResponse) : 20; };

 virtual int __ns1__ListBucket(_ns1__ListBucket *ns1__ListBucket, _ns1__ListBucketResponse *ns1__ListBucketResponse) { return soap ? soap_call___ns1__ListBucket(soap, endpoint, __null, ns1__ListBucket, ns1__ListBucketResponse) : 20; };

 virtual int __ns1__ListAllMyBuckets(_ns1__ListAllMyBuckets *ns1__ListAllMyBuckets, _ns1__ListAllMyBucketsResponse *ns1__ListAllMyBucketsResponse) { return soap ? soap_call___ns1__ListAllMyBuckets(soap, endpoint, __null, ns1__ListAllMyBuckets, ns1__ListAllMyBucketsResponse) : 20; };

 virtual int __ns1__SetBucketLoggingStatus(_ns1__SetBucketLoggingStatus *ns1__SetBucketLoggingStatus, _ns1__SetBucketLoggingStatusResponse *ns1__SetBucketLoggingStatusResponse) { return soap ? soap_call___ns1__SetBucketLoggingStatus(soap, endpoint, __null, ns1__SetBucketLoggingStatus, ns1__SetBucketLoggingStatusResponse) : 20; };

 virtual int __ns1__GetBucketLoggingStatus(_ns1__GetBucketLoggingStatus *ns1__GetBucketLoggingStatus, _ns1__GetBucketLoggingStatusResponse *ns1__GetBucketLoggingStatusResponse) { return soap ? soap_call___ns1__GetBucketLoggingStatus(soap, endpoint, __null, ns1__GetBucketLoggingStatus, ns1__GetBucketLoggingStatusResponse) : 20; };

 virtual int __ns1__CopyObject(_ns1__CopyObject *ns1__CopyObject, _ns1__CopyObjectResponse *ns1__CopyObjectResponse) { return soap ? soap_call___ns1__CopyObject(soap, endpoint, __null, ns1__CopyObject, ns1__CopyObjectResponse) : 20; };
};
# 11 "dllmain.cpp" 2

void createBucket(const char *mesg)

{
    AmazonS3SoapBinding binding;
    _ns1__CreateBucket request;
    _ns1__CreateBucketResponse response;
    binding.__ns1__CreateBucket(&request, &response);
    printf("%s\n", mesg);
}
